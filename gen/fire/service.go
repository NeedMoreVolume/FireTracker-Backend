// Code generated by goa v3.2.5, DO NOT EDIT.
//
// fire service
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package fire

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// The fire service creates new fires, updates data for a fire, deletes fires,
// and gets/lists fires
type Service interface {
	// Create a fire and optional payloads
	Create(context.Context, *Fire) (res *Fire, err error)
	// Get fire and data friends
	Get(context.Context, *GetPayload) (res *Fire, err error)
	// Update something about a fire specifically
	Update(context.Context, *Fire) (res *Fire, err error)
	// Update something about a fire specifically
	Delete(context.Context, *DeletePayload) (err error)
	// List fires
	List(context.Context, *FireListPayload) (res *FireList, err error)
	// Gets a list of weather for a fire
	GetWeatherForFire(context.Context, *GetWeatherForFirePayload) (res *WeatherList, err error)
	// Gets a list of logs for a fire
	GetLogsForFire(context.Context, *GetLogsForFirePayload) (res *LogList, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "fire"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"create", "get", "update", "delete", "list", "getWeatherForFire", "getLogsForFire"}

// Fire is the payload type of the fire service create method.
type Fire struct {
	// id
	ID *int
	// name
	CreatedAt *string
	// name
	UpdatedAt *string
	// name
	DeletedAt *string
	// name
	Name *string
	// description
	Description *string
	// start time of fire
	Start *string
	// end time of fire
	End *string
}

// GetPayload is the payload type of the fire service get method.
type GetPayload struct {
	// fire id
	ID *int
}

// DeletePayload is the payload type of the fire service delete method.
type DeletePayload struct {
	// fire id
	ID *int
}

// FireListPayload is the payload type of the fire service list method.
type FireListPayload struct {
	// product filters to apply
	Filters *FireFilters
	// product search to apply
	Search *FireSearch
	// product sort to apply
	Sort *FireSorts
	// product pagination to apply
	Pagination *FirePagination
}

// FireList is the result type of the fire service list method.
type FireList struct {
	// list of fires
	Fires []*Fire
	// pagination results
	Pagination *Pagination
}

// GetWeatherForFirePayload is the payload type of the fire service
// getWeatherForFire method.
type GetWeatherForFirePayload struct {
	// fire id
	ID *int
}

// WeatherList is the result type of the fire service getWeatherForFire method.
type WeatherList struct {
	// weather results
	Weathers []*Weather
	// pagination info
	Pagination *Pagination
}

// GetLogsForFirePayload is the payload type of the fire service getLogsForFire
// method.
type GetLogsForFirePayload struct {
	// fire id
	ID *int
}

// LogList is the result type of the fire service getLogsForFire method.
type LogList struct {
	// logs
	Logs []*Log
	// pagination results
	Pagination *Pagination
}

// list filter payload for fires, with each field representing a valid filter
// key
type FireFilters struct {
	Name  []*StringFilter
	Start []*TimeFilter
	End   []*TimeFilter
}

type StringFilter struct {
	// filter key
	Key string
	// operator value
	Operator string
	// filter value
	Value string
}

type TimeFilter struct {
	// filter key
	Key string
	// operator value
	Operator string
	// filter value
	Value int
}

// list search payload for products, with each field representing a valid
// search key
type FireSearch struct {
	Name        *string
	Description *string
}

// list sort payload for fires, with each field representing a valid sort key
type FireSorts struct {
	ID    *string
	Start *string
	End   *string
}

// list pagination for products
type FirePagination struct {
	Page  int
	Limit int
}

type Pagination struct {
	// count of the things
	Total *int
	// page number
	Page *int
	// max number of things
	Limit *int
}

type Weather struct {
	// id
	ID *int
	// name
	CreatedAt *string
	// ID of the fire
	FireID *int
	// ID of the log
	LogID *int
	// temperature
	Temperature *Temperature
	// humidity level
	Humidity *int32
	// dew point
	DewPoint *Temperature
	// wind data
	Wind *Wind
	// type of weather
	WeatherType *string
	WeatherTime *string
}

type Temperature struct {
	// measurement unit
	Unit *string
	// temperature value
	Value *int32
}

type Wind struct {
	// wind speed
	Speed *int32
	// wind direction
	Direction *string
	// measurement unit
	Unit *string
}

type Log struct {
	// id
	ID *int
	// name
	CreatedAt *string
	// name
	UpdatedAt *string
	// name
	Name *string
	// size of log
	Size *string
	// Fire identifier log belongs to
	FireID *int
	// time log was added to fire
	AddedAt *string
	// weather data at time log was added to fire
	Weather *Weather
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
