// Code generated by goa v3.2.5, DO NOT EDIT.
//
// fire endpoints
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package fire

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "fire" service endpoints.
type Endpoints struct {
	Create            goa.Endpoint
	Get               goa.Endpoint
	Update            goa.Endpoint
	Delete            goa.Endpoint
	List              goa.Endpoint
	GetWeatherForFire goa.Endpoint
	GetLogsForFire    goa.Endpoint
}

// NewEndpoints wraps the methods of the "fire" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Create:            NewCreateEndpoint(s),
		Get:               NewGetEndpoint(s),
		Update:            NewUpdateEndpoint(s),
		Delete:            NewDeleteEndpoint(s),
		List:              NewListEndpoint(s),
		GetWeatherForFire: NewGetWeatherForFireEndpoint(s),
		GetLogsForFire:    NewGetLogsForFireEndpoint(s),
	}
}

// Use applies the given middleware to all the "fire" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Create = m(e.Create)
	e.Get = m(e.Get)
	e.Update = m(e.Update)
	e.Delete = m(e.Delete)
	e.List = m(e.List)
	e.GetWeatherForFire = m(e.GetWeatherForFire)
	e.GetLogsForFire = m(e.GetLogsForFire)
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "fire".
func NewCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Fire)
		return s.Create(ctx, p)
	}
}

// NewGetEndpoint returns an endpoint function that calls the method "get" of
// service "fire".
func NewGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetPayload)
		return s.Get(ctx, p)
	}
}

// NewUpdateEndpoint returns an endpoint function that calls the method
// "update" of service "fire".
func NewUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Fire)
		return s.Update(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "delete" of service "fire".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "fire".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FireListPayload)
		return s.List(ctx, p)
	}
}

// NewGetWeatherForFireEndpoint returns an endpoint function that calls the
// method "getWeatherForFire" of service "fire".
func NewGetWeatherForFireEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetWeatherForFirePayload)
		return s.GetWeatherForFire(ctx, p)
	}
}

// NewGetLogsForFireEndpoint returns an endpoint function that calls the method
// "getLogsForFire" of service "fire".
func NewGetLogsForFireEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetLogsForFirePayload)
		return s.GetLogsForFire(ctx, p)
	}
}
