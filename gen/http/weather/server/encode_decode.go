// Code generated by goa v3.3.1, DO NOT EDIT.
//
// weather HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	weather "github.com/NeedMoreVolume/FireTracker/gen/weather"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateResponse returns an encoder for responses returned by the
// weather create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*weather.Weather)
		enc := encoder(ctx, w)
		body := NewCreateOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the weather
// create endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateWeather(&body)

		return payload, nil
	}
}

// EncodeCreateError returns an encoder for errors returned by the create
// weather endpoint.
func EncodeCreateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetResponse returns an encoder for responses returned by the weather
// get endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*weather.Weather)
		enc := encoder(ctx, w)
		body := NewGetOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the weather get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GetRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGetRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetWeather(&body, id)

		return payload, nil
	}
}

// EncodeGetError returns an encoder for errors returned by the get weather
// endpoint.
func EncodeGetError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateResponse returns an encoder for responses returned by the
// weather update endpoint.
func EncodeUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*weather.Weather)
		enc := encoder(ctx, w)
		body := NewUpdateOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateRequest returns a decoder for requests sent to the weather
// update endpoint.
func DecodeUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateWeather(&body, id)

		return payload, nil
	}
}

// EncodeUpdateError returns an encoder for errors returned by the update
// weather endpoint.
func EncodeUpdateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteResponse returns an encoder for responses returned by the
// weather delete endpoint.
func EncodeDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteRequest returns a decoder for requests sent to the weather
// delete endpoint.
func DecodeDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DeleteRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeleteRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteWeather(&body, id)

		return payload, nil
	}
}

// EncodeDeleteError returns an encoder for errors returned by the delete
// weather endpoint.
func EncodeDeleteError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListResponse returns an encoder for responses returned by the weather
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*weather.WeatherList)
		enc := encoder(ctx, w)
		body := NewListOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the weather list
// endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateListRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewListWeatherListPayload(&body)

		return payload, nil
	}
}

// unmarshalTemperatureRequestBodyToWeatherTemperature builds a value of type
// *weather.Temperature from a value of type *TemperatureRequestBody.
func unmarshalTemperatureRequestBodyToWeatherTemperature(v *TemperatureRequestBody) *weather.Temperature {
	if v == nil {
		return nil
	}
	res := &weather.Temperature{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// unmarshalWindRequestBodyToWeatherWind builds a value of type *weather.Wind
// from a value of type *WindRequestBody.
func unmarshalWindRequestBodyToWeatherWind(v *WindRequestBody) *weather.Wind {
	if v == nil {
		return nil
	}
	res := &weather.Wind{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// marshalWeatherTemperatureToTemperatureResponseBody builds a value of type
// *TemperatureResponseBody from a value of type *weather.Temperature.
func marshalWeatherTemperatureToTemperatureResponseBody(v *weather.Temperature) *TemperatureResponseBody {
	if v == nil {
		return nil
	}
	res := &TemperatureResponseBody{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// marshalWeatherWindToWindResponseBody builds a value of type
// *WindResponseBody from a value of type *weather.Wind.
func marshalWeatherWindToWindResponseBody(v *weather.Wind) *WindResponseBody {
	if v == nil {
		return nil
	}
	res := &WindResponseBody{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// unmarshalWeatherFiltersRequestBodyToWeatherWeatherFilters builds a value of
// type *weather.WeatherFilters from a value of type *WeatherFiltersRequestBody.
func unmarshalWeatherFiltersRequestBodyToWeatherWeatherFilters(v *WeatherFiltersRequestBody) *weather.WeatherFilters {
	res := &weather.WeatherFilters{}
	if v.Time != nil {
		res.Time = make([]*weather.TimeFilter, len(v.Time))
		for i, val := range v.Time {
			res.Time[i] = unmarshalTimeFilterRequestBodyToWeatherTimeFilter(val)
		}
	}
	if v.WindSpeed != nil {
		res.WindSpeed = make([]*weather.NumberFilter, len(v.WindSpeed))
		for i, val := range v.WindSpeed {
			res.WindSpeed[i] = unmarshalNumberFilterRequestBodyToWeatherNumberFilter(val)
		}
	}
	if v.Temperature != nil {
		res.Temperature = make([]*weather.NumberFilter, len(v.Temperature))
		for i, val := range v.Temperature {
			res.Temperature[i] = unmarshalNumberFilterRequestBodyToWeatherNumberFilter(val)
		}
	}
	if v.Humidity != nil {
		res.Humidity = make([]*weather.NumberFilter, len(v.Humidity))
		for i, val := range v.Humidity {
			res.Humidity[i] = unmarshalNumberFilterRequestBodyToWeatherNumberFilter(val)
		}
	}

	return res
}

// unmarshalTimeFilterRequestBodyToWeatherTimeFilter builds a value of type
// *weather.TimeFilter from a value of type *TimeFilterRequestBody.
func unmarshalTimeFilterRequestBodyToWeatherTimeFilter(v *TimeFilterRequestBody) *weather.TimeFilter {
	if v == nil {
		return nil
	}
	res := &weather.TimeFilter{
		Key:      *v.Key,
		Operator: *v.Operator,
		Value:    *v.Value,
	}

	return res
}

// unmarshalNumberFilterRequestBodyToWeatherNumberFilter builds a value of type
// *weather.NumberFilter from a value of type *NumberFilterRequestBody.
func unmarshalNumberFilterRequestBodyToWeatherNumberFilter(v *NumberFilterRequestBody) *weather.NumberFilter {
	if v == nil {
		return nil
	}
	res := &weather.NumberFilter{
		Key:      *v.Key,
		Operator: *v.Operator,
		Value:    *v.Value,
	}

	return res
}

// unmarshalWeatherSearchRequestBodyToWeatherWeatherSearch builds a value of
// type *weather.WeatherSearch from a value of type *WeatherSearchRequestBody.
func unmarshalWeatherSearchRequestBodyToWeatherWeatherSearch(v *WeatherSearchRequestBody) *weather.WeatherSearch {
	res := &weather.WeatherSearch{
		Name:        v.Name,
		Description: v.Description,
	}

	return res
}

// unmarshalWeatherSortsRequestBodyToWeatherWeatherSorts builds a value of type
// *weather.WeatherSorts from a value of type *WeatherSortsRequestBody.
func unmarshalWeatherSortsRequestBodyToWeatherWeatherSorts(v *WeatherSortsRequestBody) *weather.WeatherSorts {
	res := &weather.WeatherSorts{
		ID: v.ID,
	}

	return res
}

// unmarshalWeatherPaginationRequestBodyToWeatherWeatherPagination builds a
// value of type *weather.WeatherPagination from a value of type
// *WeatherPaginationRequestBody.
func unmarshalWeatherPaginationRequestBodyToWeatherWeatherPagination(v *WeatherPaginationRequestBody) *weather.WeatherPagination {
	res := &weather.WeatherPagination{
		Page:  *v.Page,
		Limit: *v.Limit,
	}

	return res
}

// marshalWeatherWeatherToWeatherResponseBody builds a value of type
// *WeatherResponseBody from a value of type *weather.Weather.
func marshalWeatherWeatherToWeatherResponseBody(v *weather.Weather) *WeatherResponseBody {
	if v == nil {
		return nil
	}
	res := &WeatherResponseBody{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		FireID:      v.FireID,
		LogID:       v.LogID,
		Humidity:    v.Humidity,
		WeatherType: v.WeatherType,
		WeatherTime: v.WeatherTime,
	}
	if v.Temperature != nil {
		res.Temperature = marshalWeatherTemperatureToTemperatureResponseBody(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = marshalWeatherTemperatureToTemperatureResponseBody(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = marshalWeatherWindToWindResponseBody(v.Wind)
	}

	return res
}

// marshalWeatherPaginationToPaginationResponseBody builds a value of type
// *PaginationResponseBody from a value of type *weather.Pagination.
func marshalWeatherPaginationToPaginationResponseBody(v *weather.Pagination) *PaginationResponseBody {
	if v == nil {
		return nil
	}
	res := &PaginationResponseBody{
		Total: v.Total,
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}
