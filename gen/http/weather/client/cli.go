// Code generated by goa v3.2.5, DO NOT EDIT.
//
// weather HTTP client CLI support package
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	weather "github.com/NeedMoreVolume/FireTracker/gen/weather"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the weather create endpoint from
// CLI flags.
func BuildCreatePayload(weatherCreateBody string) (*weather.Weather, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(weatherCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"1996-03-11T03:59:22Z\",\n      \"dewPoint\": {\n         \"unit\": \"K\",\n         \"value\": 1984646352\n      },\n      \"fireID\": 4892500656643819481,\n      \"humidity\": 1395475403,\n      \"id\": 1328387204821531769,\n      \"logID\": 4669324356095458075,\n      \"temperature\": {\n         \"unit\": \"K\",\n         \"value\": 1984646352\n      },\n      \"weatherTime\": \"2002-06-28T14:09:40Z\",\n      \"weatherType\": \"Windy\",\n      \"wind\": {\n         \"direction\": \"E\",\n         \"speed\": 762000299,\n         \"unit\": \"KPH\"\n      }\n   }'")
		}
	}
	v := &weather.Weather{
		ID:          body.ID,
		CreatedAt:   body.CreatedAt,
		FireID:      body.FireID,
		LogID:       body.LogID,
		Humidity:    body.Humidity,
		WeatherType: body.WeatherType,
		WeatherTime: body.WeatherTime,
	}
	if body.Temperature != nil {
		v.Temperature = marshalTemperatureRequestBodyToWeatherTemperature(body.Temperature)
	}
	if body.DewPoint != nil {
		v.DewPoint = marshalTemperatureRequestBodyToWeatherTemperature(body.DewPoint)
	}
	if body.Wind != nil {
		v.Wind = marshalWindRequestBodyToWeatherWind(body.Wind)
	}

	return v, nil
}

// BuildGetPayload builds the payload for the weather get endpoint from CLI
// flags.
func BuildGetPayload(weatherGetBody string, weatherGetID string) (*weather.Weather, error) {
	var err error
	var body GetRequestBody
	{
		err = json.Unmarshal([]byte(weatherGetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2011-07-09T07:26:45Z\",\n      \"dewPoint\": {\n         \"unit\": \"K\",\n         \"value\": 1984646352\n      },\n      \"fireID\": 7644816922455962702,\n      \"humidity\": 1153174560,\n      \"logID\": 1051516125295673869,\n      \"temperature\": {\n         \"unit\": \"K\",\n         \"value\": 1984646352\n      },\n      \"weatherTime\": \"1987-04-15T11:02:40Z\",\n      \"weatherType\": \"Windy\",\n      \"wind\": {\n         \"direction\": \"E\",\n         \"speed\": 762000299,\n         \"unit\": \"KPH\"\n      }\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(weatherGetID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &weather.Weather{
		CreatedAt:   body.CreatedAt,
		FireID:      body.FireID,
		LogID:       body.LogID,
		Humidity:    body.Humidity,
		WeatherType: body.WeatherType,
		WeatherTime: body.WeatherTime,
	}
	if body.Temperature != nil {
		v.Temperature = marshalTemperatureRequestBodyToWeatherTemperature(body.Temperature)
	}
	if body.DewPoint != nil {
		v.DewPoint = marshalTemperatureRequestBodyToWeatherTemperature(body.DewPoint)
	}
	if body.Wind != nil {
		v.Wind = marshalWindRequestBodyToWeatherWind(body.Wind)
	}
	v.ID = &id

	return v, nil
}

// BuildUpdatePayload builds the payload for the weather update endpoint from
// CLI flags.
func BuildUpdatePayload(weatherUpdateBody string, weatherUpdateID string) (*weather.Weather, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(weatherUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"1971-10-16T16:36:42Z\",\n      \"dewPoint\": {\n         \"unit\": \"K\",\n         \"value\": 1984646352\n      },\n      \"fireID\": 1916387546735013310,\n      \"humidity\": 1852166951,\n      \"logID\": 8850231432476937971,\n      \"temperature\": {\n         \"unit\": \"K\",\n         \"value\": 1984646352\n      },\n      \"weatherTime\": \"1976-08-27T17:34:24Z\",\n      \"weatherType\": \"Cloudy\",\n      \"wind\": {\n         \"direction\": \"E\",\n         \"speed\": 762000299,\n         \"unit\": \"KPH\"\n      }\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(weatherUpdateID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &weather.Weather{
		CreatedAt:   body.CreatedAt,
		FireID:      body.FireID,
		LogID:       body.LogID,
		Humidity:    body.Humidity,
		WeatherType: body.WeatherType,
		WeatherTime: body.WeatherTime,
	}
	if body.Temperature != nil {
		v.Temperature = marshalTemperatureRequestBodyToWeatherTemperature(body.Temperature)
	}
	if body.DewPoint != nil {
		v.DewPoint = marshalTemperatureRequestBodyToWeatherTemperature(body.DewPoint)
	}
	if body.Wind != nil {
		v.Wind = marshalWindRequestBodyToWeatherWind(body.Wind)
	}
	v.ID = &id

	return v, nil
}

// BuildDeletePayload builds the payload for the weather delete endpoint from
// CLI flags.
func BuildDeletePayload(weatherDeleteBody string, weatherDeleteID string) (*weather.Weather, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(weatherDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"1996-07-13T01:19:59Z\",\n      \"dewPoint\": {\n         \"unit\": \"K\",\n         \"value\": 1984646352\n      },\n      \"fireID\": 5913042865191821757,\n      \"humidity\": 1192088750,\n      \"logID\": 821447477319398918,\n      \"temperature\": {\n         \"unit\": \"K\",\n         \"value\": 1984646352\n      },\n      \"weatherTime\": \"1991-11-28T03:06:21Z\",\n      \"weatherType\": \"Windy\",\n      \"wind\": {\n         \"direction\": \"E\",\n         \"speed\": 762000299,\n         \"unit\": \"KPH\"\n      }\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(weatherDeleteID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &weather.Weather{
		CreatedAt:   body.CreatedAt,
		FireID:      body.FireID,
		LogID:       body.LogID,
		Humidity:    body.Humidity,
		WeatherType: body.WeatherType,
		WeatherTime: body.WeatherTime,
	}
	if body.Temperature != nil {
		v.Temperature = marshalTemperatureRequestBodyToWeatherTemperature(body.Temperature)
	}
	if body.DewPoint != nil {
		v.DewPoint = marshalTemperatureRequestBodyToWeatherTemperature(body.DewPoint)
	}
	if body.Wind != nil {
		v.Wind = marshalWindRequestBodyToWeatherWind(body.Wind)
	}
	v.ID = &id

	return v, nil
}

// BuildListPayload builds the payload for the weather list endpoint from CLI
// flags.
func BuildListPayload(weatherListBody string) (*weather.WeatherListPayload, error) {
	var err error
	var body ListRequestBody
	{
		err = json.Unmarshal([]byte(weatherListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"filters\": {\n         \"humidity\": [\n            {\n               \"key\": \"Soluta deserunt.\",\n               \"operator\": \"\\u003c=\",\n               \"value\": 7933183697958230931\n            },\n            {\n               \"key\": \"Soluta deserunt.\",\n               \"operator\": \"\\u003c=\",\n               \"value\": 7933183697958230931\n            }\n         ],\n         \"temperature\": [\n            {\n               \"key\": \"Soluta deserunt.\",\n               \"operator\": \"\\u003c=\",\n               \"value\": 7933183697958230931\n            },\n            {\n               \"key\": \"Soluta deserunt.\",\n               \"operator\": \"\\u003c=\",\n               \"value\": 7933183697958230931\n            },\n            {\n               \"key\": \"Soluta deserunt.\",\n               \"operator\": \"\\u003c=\",\n               \"value\": 7933183697958230931\n            },\n            {\n               \"key\": \"Soluta deserunt.\",\n               \"operator\": \"\\u003c=\",\n               \"value\": 7933183697958230931\n            }\n         ],\n         \"time\": [\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            },\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            },\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            },\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            }\n         ],\n         \"windSpeed\": [\n            {\n               \"key\": \"Soluta deserunt.\",\n               \"operator\": \"\\u003c=\",\n               \"value\": 7933183697958230931\n            },\n            {\n               \"key\": \"Soluta deserunt.\",\n               \"operator\": \"\\u003c=\",\n               \"value\": 7933183697958230931\n            }\n         ]\n      },\n      \"pagination\": {\n         \"limit\": 3704434890186808598,\n         \"page\": 2662948493226508770\n      },\n      \"search\": {\n         \"description\": \"Repellat voluptatum animi quae aut voluptate est.\",\n         \"name\": \"Rerum quas omnis.\"\n      },\n      \"sort\": {\n         \"id\": \"ASC, DESC\"\n      }\n   }'")
		}
		if body.Filters == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("filters", "body"))
		}
		if body.Search == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("search", "body"))
		}
		if body.Sort == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("sort", "body"))
		}
		if body.Pagination == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
		}
		if body.Filters != nil {
			if err2 := ValidateWeatherFiltersRequestBody(body.Filters); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.Sort != nil {
			if err2 := ValidateWeatherSortsRequestBody(body.Sort); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &weather.WeatherListPayload{}
	if body.Filters != nil {
		v.Filters = marshalWeatherFiltersRequestBodyToWeatherWeatherFilters(body.Filters)
	}
	if body.Search != nil {
		v.Search = marshalWeatherSearchRequestBodyToWeatherWeatherSearch(body.Search)
	}
	if body.Sort != nil {
		v.Sort = marshalWeatherSortsRequestBodyToWeatherWeatherSorts(body.Sort)
	}
	if body.Pagination != nil {
		v.Pagination = marshalWeatherPaginationRequestBodyToWeatherWeatherPagination(body.Pagination)
	}

	return v, nil
}
