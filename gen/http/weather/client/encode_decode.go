// Code generated by goa v3.2.5, DO NOT EDIT.
//
// weather HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	weather "github.com/NeedMoreVolume/FireTracker/gen/weather"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "weather" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateWeatherPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("weather", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the weather
// create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*weather.Weather)
		if !ok {
			return goahttp.ErrInvalidType("weather", "create", "*weather.Weather", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("weather", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the weather
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("weather", "create", err)
			}
			err = ValidateCreateOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("weather", "create", err)
			}
			res := NewCreateWeatherOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("weather", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("weather", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("weather", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "weather" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*weather.Weather)
		if !ok {
			return nil, goahttp.ErrInvalidType("weather", "get", "*weather.Weather", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetWeatherPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("weather", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the weather get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*weather.Weather)
		if !ok {
			return goahttp.ErrInvalidType("weather", "get", "*weather.Weather", v)
		}
		body := NewGetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("weather", "get", err)
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the weather
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("weather", "get", err)
			}
			err = ValidateGetOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("weather", "get", err)
			}
			res := NewGetWeatherOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("weather", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("weather", "get", err)
			}
			return nil, NewGetNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("weather", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "weather" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*weather.Weather)
		if !ok {
			return nil, goahttp.ErrInvalidType("weather", "update", "*weather.Weather", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateWeatherPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("weather", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the weather
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*weather.Weather)
		if !ok {
			return goahttp.ErrInvalidType("weather", "update", "*weather.Weather", v)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("weather", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the weather
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("weather", "update", err)
			}
			err = ValidateUpdateOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("weather", "update", err)
			}
			res := NewUpdateWeatherOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("weather", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("weather", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("weather", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "weather" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*weather.Weather)
		if !ok {
			return nil, goahttp.ErrInvalidType("weather", "delete", "*weather.Weather", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteWeatherPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("weather", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the weather
// delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*weather.Weather)
		if !ok {
			return goahttp.ErrInvalidType("weather", "delete", "*weather.Weather", v)
		}
		body := NewDeleteRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("weather", "delete", err)
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the weather
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("weather", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("weather", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("weather", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "weather" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListWeatherPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("weather", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the weather list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*weather.WeatherListPayload)
		if !ok {
			return goahttp.ErrInvalidType("weather", "list", "*weather.WeatherListPayload", v)
		}
		body := NewListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("weather", "list", err)
		}
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the weather
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("weather", "list", err)
			}
			err = ValidateListOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("weather", "list", err)
			}
			res := NewListWeatherListOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("weather", "list", resp.StatusCode, string(body))
		}
	}
}

// marshalWeatherTemperatureToTemperatureRequestBody builds a value of type
// *TemperatureRequestBody from a value of type *weather.Temperature.
func marshalWeatherTemperatureToTemperatureRequestBody(v *weather.Temperature) *TemperatureRequestBody {
	if v == nil {
		return nil
	}
	res := &TemperatureRequestBody{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// marshalWeatherWindToWindRequestBody builds a value of type *WindRequestBody
// from a value of type *weather.Wind.
func marshalWeatherWindToWindRequestBody(v *weather.Wind) *WindRequestBody {
	if v == nil {
		return nil
	}
	res := &WindRequestBody{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// marshalTemperatureRequestBodyToWeatherTemperature builds a value of type
// *weather.Temperature from a value of type *TemperatureRequestBody.
func marshalTemperatureRequestBodyToWeatherTemperature(v *TemperatureRequestBody) *weather.Temperature {
	if v == nil {
		return nil
	}
	res := &weather.Temperature{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// marshalWindRequestBodyToWeatherWind builds a value of type *weather.Wind
// from a value of type *WindRequestBody.
func marshalWindRequestBodyToWeatherWind(v *WindRequestBody) *weather.Wind {
	if v == nil {
		return nil
	}
	res := &weather.Wind{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// unmarshalTemperatureResponseBodyToWeatherTemperature builds a value of type
// *weather.Temperature from a value of type *TemperatureResponseBody.
func unmarshalTemperatureResponseBodyToWeatherTemperature(v *TemperatureResponseBody) *weather.Temperature {
	if v == nil {
		return nil
	}
	res := &weather.Temperature{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// unmarshalWindResponseBodyToWeatherWind builds a value of type *weather.Wind
// from a value of type *WindResponseBody.
func unmarshalWindResponseBodyToWeatherWind(v *WindResponseBody) *weather.Wind {
	if v == nil {
		return nil
	}
	res := &weather.Wind{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// marshalWeatherWeatherFiltersToWeatherFiltersRequestBody builds a value of
// type *WeatherFiltersRequestBody from a value of type *weather.WeatherFilters.
func marshalWeatherWeatherFiltersToWeatherFiltersRequestBody(v *weather.WeatherFilters) *WeatherFiltersRequestBody {
	res := &WeatherFiltersRequestBody{}
	if v.Time != nil {
		res.Time = make([]*TimeFilterRequestBody, len(v.Time))
		for i, val := range v.Time {
			res.Time[i] = marshalWeatherTimeFilterToTimeFilterRequestBody(val)
		}
	}
	if v.WindSpeed != nil {
		res.WindSpeed = make([]*NumberFilterRequestBody, len(v.WindSpeed))
		for i, val := range v.WindSpeed {
			res.WindSpeed[i] = marshalWeatherNumberFilterToNumberFilterRequestBody(val)
		}
	}
	if v.Temperature != nil {
		res.Temperature = make([]*NumberFilterRequestBody, len(v.Temperature))
		for i, val := range v.Temperature {
			res.Temperature[i] = marshalWeatherNumberFilterToNumberFilterRequestBody(val)
		}
	}
	if v.Humidity != nil {
		res.Humidity = make([]*NumberFilterRequestBody, len(v.Humidity))
		for i, val := range v.Humidity {
			res.Humidity[i] = marshalWeatherNumberFilterToNumberFilterRequestBody(val)
		}
	}

	return res
}

// marshalWeatherTimeFilterToTimeFilterRequestBody builds a value of type
// *TimeFilterRequestBody from a value of type *weather.TimeFilter.
func marshalWeatherTimeFilterToTimeFilterRequestBody(v *weather.TimeFilter) *TimeFilterRequestBody {
	if v == nil {
		return nil
	}
	res := &TimeFilterRequestBody{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalWeatherNumberFilterToNumberFilterRequestBody builds a value of type
// *NumberFilterRequestBody from a value of type *weather.NumberFilter.
func marshalWeatherNumberFilterToNumberFilterRequestBody(v *weather.NumberFilter) *NumberFilterRequestBody {
	if v == nil {
		return nil
	}
	res := &NumberFilterRequestBody{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalWeatherWeatherSearchToWeatherSearchRequestBody builds a value of type
// *WeatherSearchRequestBody from a value of type *weather.WeatherSearch.
func marshalWeatherWeatherSearchToWeatherSearchRequestBody(v *weather.WeatherSearch) *WeatherSearchRequestBody {
	res := &WeatherSearchRequestBody{
		Name:        v.Name,
		Description: v.Description,
	}

	return res
}

// marshalWeatherWeatherSortsToWeatherSortsRequestBody builds a value of type
// *WeatherSortsRequestBody from a value of type *weather.WeatherSorts.
func marshalWeatherWeatherSortsToWeatherSortsRequestBody(v *weather.WeatherSorts) *WeatherSortsRequestBody {
	res := &WeatherSortsRequestBody{
		ID: v.ID,
	}

	return res
}

// marshalWeatherWeatherPaginationToWeatherPaginationRequestBody builds a value
// of type *WeatherPaginationRequestBody from a value of type
// *weather.WeatherPagination.
func marshalWeatherWeatherPaginationToWeatherPaginationRequestBody(v *weather.WeatherPagination) *WeatherPaginationRequestBody {
	res := &WeatherPaginationRequestBody{
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}

// marshalWeatherFiltersRequestBodyToWeatherWeatherFilters builds a value of
// type *weather.WeatherFilters from a value of type *WeatherFiltersRequestBody.
func marshalWeatherFiltersRequestBodyToWeatherWeatherFilters(v *WeatherFiltersRequestBody) *weather.WeatherFilters {
	res := &weather.WeatherFilters{}
	if v.Time != nil {
		res.Time = make([]*weather.TimeFilter, len(v.Time))
		for i, val := range v.Time {
			res.Time[i] = marshalTimeFilterRequestBodyToWeatherTimeFilter(val)
		}
	}
	if v.WindSpeed != nil {
		res.WindSpeed = make([]*weather.NumberFilter, len(v.WindSpeed))
		for i, val := range v.WindSpeed {
			res.WindSpeed[i] = marshalNumberFilterRequestBodyToWeatherNumberFilter(val)
		}
	}
	if v.Temperature != nil {
		res.Temperature = make([]*weather.NumberFilter, len(v.Temperature))
		for i, val := range v.Temperature {
			res.Temperature[i] = marshalNumberFilterRequestBodyToWeatherNumberFilter(val)
		}
	}
	if v.Humidity != nil {
		res.Humidity = make([]*weather.NumberFilter, len(v.Humidity))
		for i, val := range v.Humidity {
			res.Humidity[i] = marshalNumberFilterRequestBodyToWeatherNumberFilter(val)
		}
	}

	return res
}

// marshalTimeFilterRequestBodyToWeatherTimeFilter builds a value of type
// *weather.TimeFilter from a value of type *TimeFilterRequestBody.
func marshalTimeFilterRequestBodyToWeatherTimeFilter(v *TimeFilterRequestBody) *weather.TimeFilter {
	if v == nil {
		return nil
	}
	res := &weather.TimeFilter{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalNumberFilterRequestBodyToWeatherNumberFilter builds a value of type
// *weather.NumberFilter from a value of type *NumberFilterRequestBody.
func marshalNumberFilterRequestBodyToWeatherNumberFilter(v *NumberFilterRequestBody) *weather.NumberFilter {
	if v == nil {
		return nil
	}
	res := &weather.NumberFilter{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalWeatherSearchRequestBodyToWeatherWeatherSearch builds a value of type
// *weather.WeatherSearch from a value of type *WeatherSearchRequestBody.
func marshalWeatherSearchRequestBodyToWeatherWeatherSearch(v *WeatherSearchRequestBody) *weather.WeatherSearch {
	res := &weather.WeatherSearch{
		Name:        v.Name,
		Description: v.Description,
	}

	return res
}

// marshalWeatherSortsRequestBodyToWeatherWeatherSorts builds a value of type
// *weather.WeatherSorts from a value of type *WeatherSortsRequestBody.
func marshalWeatherSortsRequestBodyToWeatherWeatherSorts(v *WeatherSortsRequestBody) *weather.WeatherSorts {
	res := &weather.WeatherSorts{
		ID: v.ID,
	}

	return res
}

// marshalWeatherPaginationRequestBodyToWeatherWeatherPagination builds a value
// of type *weather.WeatherPagination from a value of type
// *WeatherPaginationRequestBody.
func marshalWeatherPaginationRequestBodyToWeatherWeatherPagination(v *WeatherPaginationRequestBody) *weather.WeatherPagination {
	res := &weather.WeatherPagination{
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}

// unmarshalWeatherResponseBodyToWeatherWeather builds a value of type
// *weather.Weather from a value of type *WeatherResponseBody.
func unmarshalWeatherResponseBodyToWeatherWeather(v *WeatherResponseBody) *weather.Weather {
	if v == nil {
		return nil
	}
	res := &weather.Weather{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		FireID:      v.FireID,
		LogID:       v.LogID,
		Humidity:    v.Humidity,
		WeatherType: v.WeatherType,
		WeatherTime: v.WeatherTime,
	}
	if v.Temperature != nil {
		res.Temperature = unmarshalTemperatureResponseBodyToWeatherTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = unmarshalTemperatureResponseBodyToWeatherTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = unmarshalWindResponseBodyToWeatherWind(v.Wind)
	}

	return res
}

// unmarshalPaginationResponseBodyToWeatherPagination builds a value of type
// *weather.Pagination from a value of type *PaginationResponseBody.
func unmarshalPaginationResponseBodyToWeatherPagination(v *PaginationResponseBody) *weather.Pagination {
	if v == nil {
		return nil
	}
	res := &weather.Pagination{
		Total: v.Total,
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}
