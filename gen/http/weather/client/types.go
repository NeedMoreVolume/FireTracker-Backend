// Code generated by goa v3.3.1, DO NOT EDIT.
//
// weather HTTP client types
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	weather "github.com/NeedMoreVolume/FireTracker/gen/weather"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "weather" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureRequestBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureRequestBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindRequestBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// GetRequestBody is the type of the "weather" service "get" endpoint HTTP
// request body.
type GetRequestBody struct {
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureRequestBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureRequestBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindRequestBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// UpdateRequestBody is the type of the "weather" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureRequestBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureRequestBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindRequestBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// DeleteRequestBody is the type of the "weather" service "delete" endpoint
// HTTP request body.
type DeleteRequestBody struct {
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureRequestBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureRequestBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindRequestBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// ListRequestBody is the type of the "weather" service "list" endpoint HTTP
// request body.
type ListRequestBody struct {
	// product filters to apply
	Filters *WeatherFiltersRequestBody `form:"filters" json:"filters" xml:"filters"`
	// product search to apply
	Search *WeatherSearchRequestBody `form:"search" json:"search" xml:"search"`
	// product sort to apply
	Sort *WeatherSortsRequestBody `form:"sort" json:"sort" xml:"sort"`
	// product pagination to apply
	Pagination *WeatherPaginationRequestBody `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateOKResponseBody is the type of the "weather" service "create" endpoint
// HTTP response body.
type CreateOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// GetOKResponseBody is the type of the "weather" service "get" endpoint HTTP
// response body.
type GetOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// UpdateOKResponseBody is the type of the "weather" service "update" endpoint
// HTTP response body.
type UpdateOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// ListOKResponseBody is the type of the "weather" service "list" endpoint HTTP
// response body.
type ListOKResponseBody struct {
	// weather results
	Weathers []*WeatherResponseBody `form:"weathers,omitempty" json:"weathers,omitempty" xml:"weathers,omitempty"`
	// pagination info
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "weather" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetNotFoundResponseBody is the type of the "weather" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "weather" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "weather" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// TemperatureRequestBody is used to define fields on request body types.
type TemperatureRequestBody struct {
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	// temperature value
	Value *int32 `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WindRequestBody is used to define fields on request body types.
type WindRequestBody struct {
	// wind speed
	Speed *int32 `form:"speed,omitempty" json:"speed,omitempty" xml:"speed,omitempty"`
	// wind direction
	Direction *string `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
}

// TemperatureResponseBody is used to define fields on response body types.
type TemperatureResponseBody struct {
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	// temperature value
	Value *int32 `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WindResponseBody is used to define fields on response body types.
type WindResponseBody struct {
	// wind speed
	Speed *int32 `form:"speed,omitempty" json:"speed,omitempty" xml:"speed,omitempty"`
	// wind direction
	Direction *string `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
}

// CreateInternalServerErrorResponseBody is used to define fields on response
// body types.
type CreateInternalServerErrorResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// GetInternalServerErrorResponseBody is used to define fields on response body
// types.
type GetInternalServerErrorResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// UpdateInternalServerErrorResponseBody is used to define fields on response
// body types.
type UpdateInternalServerErrorResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// WeatherFiltersRequestBody is used to define fields on request body types.
type WeatherFiltersRequestBody struct {
	Time        []*TimeFilterRequestBody   `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
	WindSpeed   []*NumberFilterRequestBody `form:"windSpeed,omitempty" json:"windSpeed,omitempty" xml:"windSpeed,omitempty"`
	Temperature []*NumberFilterRequestBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	Humidity    []*NumberFilterRequestBody `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
}

// TimeFilterRequestBody is used to define fields on request body types.
type TimeFilterRequestBody struct {
	// filter key
	Key string `form:"key" json:"key" xml:"key"`
	// operator value
	Operator string `form:"operator" json:"operator" xml:"operator"`
	// filter value
	Value string `form:"value" json:"value" xml:"value"`
}

// NumberFilterRequestBody is used to define fields on request body types.
type NumberFilterRequestBody struct {
	// filter key
	Key string `form:"key" json:"key" xml:"key"`
	// operator value
	Operator string `form:"operator" json:"operator" xml:"operator"`
	// filter value
	Value int `form:"value" json:"value" xml:"value"`
}

// WeatherSearchRequestBody is used to define fields on request body types.
type WeatherSearchRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// WeatherSortsRequestBody is used to define fields on request body types.
type WeatherSortsRequestBody struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// WeatherPaginationRequestBody is used to define fields on request body types.
type WeatherPaginationRequestBody struct {
	Page  int `form:"page" json:"page" xml:"page"`
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// WeatherResponseBody is used to define fields on response body types.
type WeatherResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// count of the things
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// page number
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// max number of things
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// ListBadRequestResponseBody is used to define fields on response body types.
type ListBadRequestResponseBody struct {
	// weather results
	Weathers []*WeatherResponseBody `form:"weathers,omitempty" json:"weathers,omitempty" xml:"weathers,omitempty"`
	// pagination info
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// ListInternalServerErrorResponseBody is used to define fields on response
// body types.
type ListInternalServerErrorResponseBody struct {
	// weather results
	Weathers []*WeatherResponseBody `form:"weathers,omitempty" json:"weathers,omitempty" xml:"weathers,omitempty"`
	// pagination info
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "weather" service.
func NewCreateRequestBody(p *weather.Weather) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:          p.ID,
		CreatedAt:   p.CreatedAt,
		FireID:      p.FireID,
		LogID:       p.LogID,
		Humidity:    p.Humidity,
		WeatherType: p.WeatherType,
		WeatherTime: p.WeatherTime,
	}
	if p.Temperature != nil {
		body.Temperature = marshalWeatherTemperatureToTemperatureRequestBody(p.Temperature)
	}
	if p.DewPoint != nil {
		body.DewPoint = marshalWeatherTemperatureToTemperatureRequestBody(p.DewPoint)
	}
	if p.Wind != nil {
		body.Wind = marshalWeatherWindToWindRequestBody(p.Wind)
	}
	return body
}

// NewGetRequestBody builds the HTTP request body from the payload of the "get"
// endpoint of the "weather" service.
func NewGetRequestBody(p *weather.Weather) *GetRequestBody {
	body := &GetRequestBody{
		CreatedAt:   p.CreatedAt,
		FireID:      p.FireID,
		LogID:       p.LogID,
		Humidity:    p.Humidity,
		WeatherType: p.WeatherType,
		WeatherTime: p.WeatherTime,
	}
	if p.Temperature != nil {
		body.Temperature = marshalWeatherTemperatureToTemperatureRequestBody(p.Temperature)
	}
	if p.DewPoint != nil {
		body.DewPoint = marshalWeatherTemperatureToTemperatureRequestBody(p.DewPoint)
	}
	if p.Wind != nil {
		body.Wind = marshalWeatherWindToWindRequestBody(p.Wind)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "weather" service.
func NewUpdateRequestBody(p *weather.Weather) *UpdateRequestBody {
	body := &UpdateRequestBody{
		CreatedAt:   p.CreatedAt,
		FireID:      p.FireID,
		LogID:       p.LogID,
		Humidity:    p.Humidity,
		WeatherType: p.WeatherType,
		WeatherTime: p.WeatherTime,
	}
	if p.Temperature != nil {
		body.Temperature = marshalWeatherTemperatureToTemperatureRequestBody(p.Temperature)
	}
	if p.DewPoint != nil {
		body.DewPoint = marshalWeatherTemperatureToTemperatureRequestBody(p.DewPoint)
	}
	if p.Wind != nil {
		body.Wind = marshalWeatherWindToWindRequestBody(p.Wind)
	}
	return body
}

// NewDeleteRequestBody builds the HTTP request body from the payload of the
// "delete" endpoint of the "weather" service.
func NewDeleteRequestBody(p *weather.Weather) *DeleteRequestBody {
	body := &DeleteRequestBody{
		CreatedAt:   p.CreatedAt,
		FireID:      p.FireID,
		LogID:       p.LogID,
		Humidity:    p.Humidity,
		WeatherType: p.WeatherType,
		WeatherTime: p.WeatherTime,
	}
	if p.Temperature != nil {
		body.Temperature = marshalWeatherTemperatureToTemperatureRequestBody(p.Temperature)
	}
	if p.DewPoint != nil {
		body.DewPoint = marshalWeatherTemperatureToTemperatureRequestBody(p.DewPoint)
	}
	if p.Wind != nil {
		body.Wind = marshalWeatherWindToWindRequestBody(p.Wind)
	}
	return body
}

// NewListRequestBody builds the HTTP request body from the payload of the
// "list" endpoint of the "weather" service.
func NewListRequestBody(p *weather.WeatherListPayload) *ListRequestBody {
	body := &ListRequestBody{}
	if p.Filters != nil {
		body.Filters = marshalWeatherWeatherFiltersToWeatherFiltersRequestBody(p.Filters)
	}
	if p.Search != nil {
		body.Search = marshalWeatherWeatherSearchToWeatherSearchRequestBody(p.Search)
	}
	if p.Sort != nil {
		body.Sort = marshalWeatherWeatherSortsToWeatherSortsRequestBody(p.Sort)
	}
	if p.Pagination != nil {
		body.Pagination = marshalWeatherWeatherPaginationToWeatherPaginationRequestBody(p.Pagination)
	}
	return body
}

// NewCreateWeatherOK builds a "weather" service "create" endpoint result from
// a HTTP "OK" response.
func NewCreateWeatherOK(body *CreateOKResponseBody) *weather.Weather {
	v := &weather.Weather{
		ID:          body.ID,
		CreatedAt:   body.CreatedAt,
		FireID:      body.FireID,
		LogID:       body.LogID,
		Humidity:    body.Humidity,
		WeatherType: body.WeatherType,
		WeatherTime: body.WeatherTime,
	}
	if body.Temperature != nil {
		v.Temperature = unmarshalTemperatureResponseBodyToWeatherTemperature(body.Temperature)
	}
	if body.DewPoint != nil {
		v.DewPoint = unmarshalTemperatureResponseBodyToWeatherTemperature(body.DewPoint)
	}
	if body.Wind != nil {
		v.Wind = unmarshalWindResponseBodyToWeatherWind(body.Wind)
	}

	return v
}

// NewCreateBadRequest builds a weather service create endpoint bad_request
// error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetWeatherOK builds a "weather" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetWeatherOK(body *GetOKResponseBody) *weather.Weather {
	v := &weather.Weather{
		ID:          body.ID,
		CreatedAt:   body.CreatedAt,
		FireID:      body.FireID,
		LogID:       body.LogID,
		Humidity:    body.Humidity,
		WeatherType: body.WeatherType,
		WeatherTime: body.WeatherTime,
	}
	if body.Temperature != nil {
		v.Temperature = unmarshalTemperatureResponseBodyToWeatherTemperature(body.Temperature)
	}
	if body.DewPoint != nil {
		v.DewPoint = unmarshalTemperatureResponseBodyToWeatherTemperature(body.DewPoint)
	}
	if body.Wind != nil {
		v.Wind = unmarshalWindResponseBodyToWeatherWind(body.Wind)
	}

	return v
}

// NewGetNotFound builds a weather service get endpoint not_found error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateWeatherOK builds a "weather" service "update" endpoint result from
// a HTTP "OK" response.
func NewUpdateWeatherOK(body *UpdateOKResponseBody) *weather.Weather {
	v := &weather.Weather{
		ID:          body.ID,
		CreatedAt:   body.CreatedAt,
		FireID:      body.FireID,
		LogID:       body.LogID,
		Humidity:    body.Humidity,
		WeatherType: body.WeatherType,
		WeatherTime: body.WeatherTime,
	}
	if body.Temperature != nil {
		v.Temperature = unmarshalTemperatureResponseBodyToWeatherTemperature(body.Temperature)
	}
	if body.DewPoint != nil {
		v.DewPoint = unmarshalTemperatureResponseBodyToWeatherTemperature(body.DewPoint)
	}
	if body.Wind != nil {
		v.Wind = unmarshalWindResponseBodyToWeatherWind(body.Wind)
	}

	return v
}

// NewUpdateNotFound builds a weather service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteNotFound builds a weather service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListWeatherListOK builds a "weather" service "list" endpoint result from
// a HTTP "OK" response.
func NewListWeatherListOK(body *ListOKResponseBody) *weather.WeatherList {
	v := &weather.WeatherList{}
	if body.Weathers != nil {
		v.Weathers = make([]*weather.Weather, len(body.Weathers))
		for i, val := range body.Weathers {
			v.Weathers[i] = unmarshalWeatherResponseBodyToWeatherWeather(val)
		}
	}
	if body.Pagination != nil {
		v.Pagination = unmarshalPaginationResponseBodyToWeatherPagination(body.Pagination)
	}

	return v
}

// ValidateCreateOKResponseBody runs the validations defined on
// CreateOKResponseBody
func ValidateCreateOKResponseBody(body *CreateOKResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureResponseBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureResponseBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindResponseBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateGetOKResponseBody runs the validations defined on GetOKResponseBody
func ValidateGetOKResponseBody(body *GetOKResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureResponseBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureResponseBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindResponseBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateOKResponseBody runs the validations defined on
// UpdateOKResponseBody
func ValidateUpdateOKResponseBody(body *UpdateOKResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureResponseBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureResponseBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindResponseBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateListOKResponseBody runs the validations defined on ListOKResponseBody
func ValidateListOKResponseBody(body *ListOKResponseBody) (err error) {
	for _, e := range body.Weathers {
		if e != nil {
			if err2 := ValidateWeatherResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_not_found_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateTemperatureRequestBody runs the validations defined on
// TemperatureRequestBody
func ValidateTemperatureRequestBody(body *TemperatureRequestBody) (err error) {
	if body.Unit != nil {
		if !(*body.Unit == "K" || *body.Unit == "C" || *body.Unit == "F") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{"K", "C", "F"}))
		}
	}
	return
}

// ValidateWindRequestBody runs the validations defined on WindRequestBody
func ValidateWindRequestBody(body *WindRequestBody) (err error) {
	if body.Direction != nil {
		if !(*body.Direction == "S" || *body.Direction == "SE" || *body.Direction == "E" || *body.Direction == "NE" || *body.Direction == "N" || *body.Direction == "NW" || *body.Direction == "W" || *body.Direction == "SW") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.direction", *body.Direction, []interface{}{"S", "SE", "E", "NE", "N", "NW", "W", "SW"}))
		}
	}
	if body.Unit != nil {
		if !(*body.Unit == "KPH" || *body.Unit == "MPH") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{"KPH", "MPH"}))
		}
	}
	return
}

// ValidateTemperatureResponseBody runs the validations defined on
// TemperatureResponseBody
func ValidateTemperatureResponseBody(body *TemperatureResponseBody) (err error) {
	if body.Unit != nil {
		if !(*body.Unit == "K" || *body.Unit == "C" || *body.Unit == "F") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{"K", "C", "F"}))
		}
	}
	return
}

// ValidateWindResponseBody runs the validations defined on WindResponseBody
func ValidateWindResponseBody(body *WindResponseBody) (err error) {
	if body.Direction != nil {
		if !(*body.Direction == "S" || *body.Direction == "SE" || *body.Direction == "E" || *body.Direction == "NE" || *body.Direction == "N" || *body.Direction == "NW" || *body.Direction == "W" || *body.Direction == "SW") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.direction", *body.Direction, []interface{}{"S", "SE", "E", "NE", "N", "NW", "W", "SW"}))
		}
	}
	if body.Unit != nil {
		if !(*body.Unit == "KPH" || *body.Unit == "MPH") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{"KPH", "MPH"}))
		}
	}
	return
}

// ValidateCreateInternalServerErrorResponseBody runs the validations defined
// on CreateInternal Server ErrorResponseBody
func ValidateCreateInternalServerErrorResponseBody(body *CreateInternalServerErrorResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureResponseBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureResponseBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindResponseBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateGetInternalServerErrorResponseBody runs the validations defined on
// GetInternal Server ErrorResponseBody
func ValidateGetInternalServerErrorResponseBody(body *GetInternalServerErrorResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureResponseBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureResponseBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindResponseBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateInternalServerErrorResponseBody runs the validations defined
// on UpdateInternal Server ErrorResponseBody
func ValidateUpdateInternalServerErrorResponseBody(body *UpdateInternalServerErrorResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureResponseBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureResponseBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindResponseBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateWeatherFiltersRequestBody runs the validations defined on
// WeatherFiltersRequestBody
func ValidateWeatherFiltersRequestBody(body *WeatherFiltersRequestBody) (err error) {
	for _, e := range body.Time {
		if e != nil {
			if err2 := ValidateTimeFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.WindSpeed {
		if e != nil {
			if err2 := ValidateNumberFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Temperature {
		if e != nil {
			if err2 := ValidateNumberFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Humidity {
		if e != nil {
			if err2 := ValidateNumberFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTimeFilterRequestBody runs the validations defined on
// TimeFilterRequestBody
func ValidateTimeFilterRequestBody(body *TimeFilterRequestBody) (err error) {
	if !(body.Operator == "=" || body.Operator == ">" || body.Operator == ">=" || body.Operator == "<=" || body.Operator == "<") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.operator", body.Operator, []interface{}{"=", ">", ">=", "<=", "<"}))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.value", body.Value, goa.FormatDateTime))

	return
}

// ValidateNumberFilterRequestBody runs the validations defined on
// NumberFilterRequestBody
func ValidateNumberFilterRequestBody(body *NumberFilterRequestBody) (err error) {
	if !(body.Operator == "=" || body.Operator == ">" || body.Operator == ">=" || body.Operator == "<=" || body.Operator == "<") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.operator", body.Operator, []interface{}{"=", ">", ">=", "<=", "<"}))
	}
	return
}

// ValidateWeatherSortsRequestBody runs the validations defined on
// WeatherSortsRequestBody
func ValidateWeatherSortsRequestBody(body *WeatherSortsRequestBody) (err error) {
	if body.ID != nil {
		if !(*body.ID == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.id", *body.ID, []interface{}{"ASC, DESC"}))
		}
	}
	return
}

// ValidateWeatherResponseBody runs the validations defined on
// WeatherResponseBody
func ValidateWeatherResponseBody(body *WeatherResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureResponseBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureResponseBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindResponseBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on ListBad
// RequestResponseBody
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	for _, e := range body.Weathers {
		if e != nil {
			if err2 := ValidateWeatherResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListInternalServerErrorResponseBody runs the validations defined on
// ListInternal Server ErrorResponseBody
func ValidateListInternalServerErrorResponseBody(body *ListInternalServerErrorResponseBody) (err error) {
	for _, e := range body.Weathers {
		if e != nil {
			if err2 := ValidateWeatherResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
