// Code generated by goa v3.3.1, DO NOT EDIT.
//
// fire HTTP client CLI support package
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	fire "github.com/NeedMoreVolume/FireTracker/gen/fire"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the fire create endpoint from CLI
// flags.
func BuildCreatePayload(fireCreateBody string) (*fire.Fire, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(fireCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2020-01-01T00:00:00Z\",\n      \"deletedAt\": \"2020-01-01T00:00:00Z\",\n      \"description\": \"My first fire with FireTracker\",\n      \"end\": \"2020-01-02T00:00:00Z\",\n      \"id\": 1,\n      \"logs\": [\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 5428893232733128143,\n            \"name\": \"Big Log\",\n            \"size\": \"M\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Sunny\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 5428893232733128143,\n            \"name\": \"Big Log\",\n            \"size\": \"M\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Sunny\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 5428893232733128143,\n            \"name\": \"Big Log\",\n            \"size\": \"M\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Sunny\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 5428893232733128143,\n            \"name\": \"Big Log\",\n            \"size\": \"M\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Sunny\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         }\n      ],\n      \"name\": \"Test Fire\",\n      \"start\": \"2020-01-01T00:00:00Z\",\n      \"updatedAt\": \"2020-01-01T00:00:00Z\",\n      \"weathers\": [\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Sunny\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         },\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Sunny\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         }\n      ]\n   }'")
		}
	}
	v := &fire.Fire{
		ID:          body.ID,
		CreatedAt:   body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
		DeletedAt:   body.DeletedAt,
		Name:        body.Name,
		Description: body.Description,
		Start:       body.Start,
		End:         body.End,
	}
	if body.Logs != nil {
		v.Logs = make([]*fire.Log, len(body.Logs))
		for i, val := range body.Logs {
			v.Logs[i] = marshalLogRequestBodyToFireLog(val)
		}
	}
	if body.Weathers != nil {
		v.Weathers = make([]*fire.Weather, len(body.Weathers))
		for i, val := range body.Weathers {
			v.Weathers[i] = marshalWeatherRequestBodyToFireWeather(val)
		}
	}

	return v, nil
}

// BuildGetPayload builds the payload for the fire get endpoint from CLI flags.
func BuildGetPayload(fireGetID string) (*fire.GetPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireGetID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.GetPayload{}
	v.ID = &id

	return v, nil
}

// BuildUpdatePayload builds the payload for the fire update endpoint from CLI
// flags.
func BuildUpdatePayload(fireUpdateBody string, fireUpdateID string) (*fire.Fire, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(fireUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2020-01-01T00:00:00Z\",\n      \"deletedAt\": \"2020-01-01T00:00:00Z\",\n      \"description\": \"My first fire with FireTracker\",\n      \"end\": \"2020-01-02T00:00:00Z\",\n      \"logs\": [\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 5428893232733128143,\n            \"name\": \"Big Log\",\n            \"size\": \"M\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Sunny\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 5428893232733128143,\n            \"name\": \"Big Log\",\n            \"size\": \"M\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Sunny\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 5428893232733128143,\n            \"name\": \"Big Log\",\n            \"size\": \"M\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Sunny\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 5428893232733128143,\n            \"name\": \"Big Log\",\n            \"size\": \"M\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"K\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Sunny\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         }\n      ],\n      \"name\": \"Test Fire\",\n      \"start\": \"2020-01-01T00:00:00Z\",\n      \"updatedAt\": \"2020-01-01T00:00:00Z\",\n      \"weathers\": [\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Sunny\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         },\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Sunny\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         },\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"K\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Sunny\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         }\n      ]\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireUpdateID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.Fire{
		CreatedAt:   body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
		DeletedAt:   body.DeletedAt,
		Name:        body.Name,
		Description: body.Description,
		Start:       body.Start,
		End:         body.End,
	}
	if body.Logs != nil {
		v.Logs = make([]*fire.Log, len(body.Logs))
		for i, val := range body.Logs {
			v.Logs[i] = marshalLogRequestBodyToFireLog(val)
		}
	}
	if body.Weathers != nil {
		v.Weathers = make([]*fire.Weather, len(body.Weathers))
		for i, val := range body.Weathers {
			v.Weathers[i] = marshalWeatherRequestBodyToFireWeather(val)
		}
	}
	v.ID = &id

	return v, nil
}

// BuildDeletePayload builds the payload for the fire delete endpoint from CLI
// flags.
func BuildDeletePayload(fireDeleteID string) (*fire.DeletePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireDeleteID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.DeletePayload{}
	v.ID = &id

	return v, nil
}

// BuildListPayload builds the payload for the fire list endpoint from CLI
// flags.
func BuildListPayload(fireListBody string) (*fire.FireListPayload, error) {
	var err error
	var body ListRequestBody
	{
		err = json.Unmarshal([]byte(fireListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"filters\": {\n         \"end\": [\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"=\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            },\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"=\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            }\n         ],\n         \"name\": [\n            {\n               \"key\": \"name\",\n               \"operator\": \"=\",\n               \"value\": \"Daniel\"\n            },\n            {\n               \"key\": \"name\",\n               \"operator\": \"=\",\n               \"value\": \"Daniel\"\n            },\n            {\n               \"key\": \"name\",\n               \"operator\": \"=\",\n               \"value\": \"Daniel\"\n            },\n            {\n               \"key\": \"name\",\n               \"operator\": \"=\",\n               \"value\": \"Daniel\"\n            }\n         ],\n         \"start\": [\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"=\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            },\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"=\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            },\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"=\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            }\n         ]\n      },\n      \"pagination\": {\n         \"limit\": 10,\n         \"page\": 1\n      },\n      \"search\": {\n         \"description\": \"That time johnny lit the fire with gasoline\",\n         \"name\": \"Test\"\n      },\n      \"sort\": {\n         \"end\": \"ASC, DESC\",\n         \"id\": \"ASC, DESC\",\n         \"start\": \"ASC, DESC\"\n      }\n   }'")
		}
		if body.Filters == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("filters", "body"))
		}
		if body.Search == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("search", "body"))
		}
		if body.Sort == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("sort", "body"))
		}
		if body.Pagination == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
		}
		if body.Filters != nil {
			if err2 := ValidateFireFiltersRequestBody(body.Filters); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.Sort != nil {
			if err2 := ValidateFireSortsRequestBody(body.Sort); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &fire.FireListPayload{}
	if body.Filters != nil {
		v.Filters = marshalFireFiltersRequestBodyToFireFireFilters(body.Filters)
	}
	if body.Search != nil {
		v.Search = marshalFireSearchRequestBodyToFireFireSearch(body.Search)
	}
	if body.Sort != nil {
		v.Sort = marshalFireSortsRequestBodyToFireFireSorts(body.Sort)
	}
	if body.Pagination != nil {
		v.Pagination = marshalFirePaginationRequestBodyToFireFirePagination(body.Pagination)
	}

	return v, nil
}

// BuildGetWeatherForFirePayload builds the payload for the fire
// getWeatherForFire endpoint from CLI flags.
func BuildGetWeatherForFirePayload(fireGetWeatherForFireID string) (*fire.GetWeatherForFirePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireGetWeatherForFireID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.GetWeatherForFirePayload{}
	v.ID = &id

	return v, nil
}

// BuildGetLogsForFirePayload builds the payload for the fire getLogsForFire
// endpoint from CLI flags.
func BuildGetLogsForFirePayload(fireGetLogsForFireID string) (*fire.GetLogsForFirePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireGetLogsForFireID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.GetLogsForFirePayload{}
	v.ID = &id

	return v, nil
}
