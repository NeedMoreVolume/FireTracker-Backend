// Code generated by goa v3.2.5, DO NOT EDIT.
//
// fire HTTP client CLI support package
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	fire "github.com/NeedMoreVolume/FireTracker/gen/fire"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the fire create endpoint from CLI
// flags.
func BuildCreatePayload(fireCreateBody string) (*fire.Fire, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(fireCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2009-11-20T04:16:19Z\",\n      \"deletedAt\": \"1991-05-21T08:03:01Z\",\n      \"description\": \"Dicta est itaque.\",\n      \"end\": \"2010-07-05T02:19:15Z\",\n      \"id\": 8063970344505608117,\n      \"name\": \"Eveniet possimus error a et qui.\",\n      \"start\": \"1987-01-21T21:20:18Z\",\n      \"updatedAt\": \"1992-01-15T01:43:50Z\"\n   }'")
		}
	}
	v := &fire.Fire{
		ID:          body.ID,
		CreatedAt:   body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
		DeletedAt:   body.DeletedAt,
		Name:        body.Name,
		Description: body.Description,
		Start:       body.Start,
		End:         body.End,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the fire get endpoint from CLI flags.
func BuildGetPayload(fireGetID string) (*fire.GetPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireGetID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.GetPayload{}
	v.ID = &id

	return v, nil
}

// BuildUpdatePayload builds the payload for the fire update endpoint from CLI
// flags.
func BuildUpdatePayload(fireUpdateBody string, fireUpdateID string) (*fire.Fire, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(fireUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2007-11-26T14:19:47Z\",\n      \"deletedAt\": \"2006-04-23T22:29:09Z\",\n      \"description\": \"Atque ipsum qui saepe voluptatem.\",\n      \"end\": \"1989-04-28T18:56:23Z\",\n      \"name\": \"Sint accusamus.\",\n      \"start\": \"1980-12-04T06:55:30Z\",\n      \"updatedAt\": \"1991-03-19T17:24:25Z\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireUpdateID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.Fire{
		CreatedAt:   body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
		DeletedAt:   body.DeletedAt,
		Name:        body.Name,
		Description: body.Description,
		Start:       body.Start,
		End:         body.End,
	}
	v.ID = &id

	return v, nil
}

// BuildDeletePayload builds the payload for the fire delete endpoint from CLI
// flags.
func BuildDeletePayload(fireDeleteID string) (*fire.DeletePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireDeleteID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.DeletePayload{}
	v.ID = &id

	return v, nil
}

// BuildListPayload builds the payload for the fire list endpoint from CLI
// flags.
func BuildListPayload(fireListBody string) (*fire.FireListPayload, error) {
	var err error
	var body ListRequestBody
	{
		err = json.Unmarshal([]byte(fireListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"filters\": {\n         \"end\": [\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            },\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            }\n         ],\n         \"name\": [\n            {\n               \"key\": \"In reprehenderit veniam asperiores aliquid.\",\n               \"operator\": \"!=\",\n               \"value\": \"Quod in iusto.\"\n            },\n            {\n               \"key\": \"In reprehenderit veniam asperiores aliquid.\",\n               \"operator\": \"!=\",\n               \"value\": \"Quod in iusto.\"\n            },\n            {\n               \"key\": \"In reprehenderit veniam asperiores aliquid.\",\n               \"operator\": \"!=\",\n               \"value\": \"Quod in iusto.\"\n            },\n            {\n               \"key\": \"In reprehenderit veniam asperiores aliquid.\",\n               \"operator\": \"!=\",\n               \"value\": \"Quod in iusto.\"\n            }\n         ],\n         \"start\": [\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            },\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            },\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            },\n            {\n               \"key\": \"2004-12-16T02:06:51Z\",\n               \"operator\": \"=\",\n               \"value\": 3707112604264870284\n            }\n         ]\n      },\n      \"pagination\": {\n         \"limit\": 8489130491829772062,\n         \"page\": 7661817797635690513\n      },\n      \"search\": {\n         \"description\": \"Ab quas.\",\n         \"name\": \"Error laborum.\"\n      },\n      \"sort\": {\n         \"end\": \"ASC, DESC\",\n         \"id\": \"ASC, DESC\",\n         \"start\": \"ASC, DESC\"\n      }\n   }'")
		}
		if body.Filters == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("filters", "body"))
		}
		if body.Search == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("search", "body"))
		}
		if body.Sort == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("sort", "body"))
		}
		if body.Pagination == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
		}
		if body.Filters != nil {
			if err2 := ValidateFireFiltersRequestBody(body.Filters); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if body.Sort != nil {
			if err2 := ValidateFireSortsRequestBody(body.Sort); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &fire.FireListPayload{}
	if body.Filters != nil {
		v.Filters = marshalFireFiltersRequestBodyToFireFireFilters(body.Filters)
	}
	if body.Search != nil {
		v.Search = marshalFireSearchRequestBodyToFireFireSearch(body.Search)
	}
	if body.Sort != nil {
		v.Sort = marshalFireSortsRequestBodyToFireFireSorts(body.Sort)
	}
	if body.Pagination != nil {
		v.Pagination = marshalFirePaginationRequestBodyToFireFirePagination(body.Pagination)
	}

	return v, nil
}

// BuildGetWeatherForFirePayload builds the payload for the fire
// getWeatherForFire endpoint from CLI flags.
func BuildGetWeatherForFirePayload(fireGetWeatherForFireID string) (*fire.GetWeatherForFirePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireGetWeatherForFireID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.GetWeatherForFirePayload{}
	v.ID = &id

	return v, nil
}

// BuildGetLogsForFirePayload builds the payload for the fire getLogsForFire
// endpoint from CLI flags.
func BuildGetLogsForFirePayload(fireGetLogsForFireID string) (*fire.GetLogsForFirePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(fireGetLogsForFireID, 10, 64)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &fire.GetLogsForFirePayload{}
	v.ID = &id

	return v, nil
}
