// Code generated by goa v3.2.5, DO NOT EDIT.
//
// fire HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	fire "github.com/NeedMoreVolume/FireTracker/gen/fire"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "fire" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateFirePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fire", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the fire create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*fire.Fire)
		if !ok {
			return goahttp.ErrInvalidType("fire", "create", "*fire.Fire", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("fire", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the fire
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "create", err)
			}
			err = ValidateCreateOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "create", err)
			}
			res := NewCreateFireOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fire", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "fire" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*fire.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("fire", "get", "*fire.GetPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetFirePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fire", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResponse returns a decoder for responses returned by the fire get
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeGetResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "get", err)
			}
			err = ValidateGetOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "get", err)
			}
			res := NewGetFireOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "get", err)
			}
			return nil, NewGetNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fire", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "fire" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*fire.Fire)
		if !ok {
			return nil, goahttp.ErrInvalidType("fire", "update", "*fire.Fire", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateFirePath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fire", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the fire update
// server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*fire.Fire)
		if !ok {
			return goahttp.ErrInvalidType("fire", "update", "*fire.Fire", v)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("fire", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the fire
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "update", err)
			}
			err = ValidateUpdateOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "update", err)
			}
			res := NewUpdateFireOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fire", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "fire" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*fire.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("fire", "delete", "*fire.DeletePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteFirePath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fire", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the fire
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fire", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "fire" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFirePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fire", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the fire list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*fire.FireListPayload)
		if !ok {
			return goahttp.ErrInvalidType("fire", "list", "*fire.FireListPayload", v)
		}
		body := NewListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("fire", "list", err)
		}
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the fire list
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "list", err)
			}
			err = ValidateListOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "list", err)
			}
			res := NewListFireListOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fire", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildGetWeatherForFireRequest instantiates a HTTP request object with method
// and path set to call the "fire" service "getWeatherForFire" endpoint
func (c *Client) BuildGetWeatherForFireRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*fire.GetWeatherForFirePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("fire", "getWeatherForFire", "*fire.GetWeatherForFirePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetWeatherForFireFirePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fire", "getWeatherForFire", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetWeatherForFireResponse returns a decoder for responses returned by
// the fire getWeatherForFire endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetWeatherForFireResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeGetWeatherForFireResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetWeatherForFireOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "getWeatherForFire", err)
			}
			err = ValidateGetWeatherForFireOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "getWeatherForFire", err)
			}
			res := NewGetWeatherForFireWeatherListOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetWeatherForFireNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "getWeatherForFire", err)
			}
			err = ValidateGetWeatherForFireNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "getWeatherForFire", err)
			}
			return nil, NewGetWeatherForFireNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fire", "getWeatherForFire", resp.StatusCode, string(body))
		}
	}
}

// BuildGetLogsForFireRequest instantiates a HTTP request object with method
// and path set to call the "fire" service "getLogsForFire" endpoint
func (c *Client) BuildGetLogsForFireRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*fire.GetLogsForFirePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("fire", "getLogsForFire", "*fire.GetLogsForFirePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetLogsForFireFirePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("fire", "getLogsForFire", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetLogsForFireResponse returns a decoder for responses returned by the
// fire getLogsForFire endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetLogsForFireResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeGetLogsForFireResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetLogsForFireOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "getLogsForFire", err)
			}
			err = ValidateGetLogsForFireOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "getLogsForFire", err)
			}
			res := NewGetLogsForFireLogListOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetLogsForFireNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("fire", "getLogsForFire", err)
			}
			err = ValidateGetLogsForFireNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("fire", "getLogsForFire", err)
			}
			return nil, NewGetLogsForFireNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("fire", "getLogsForFire", resp.StatusCode, string(body))
		}
	}
}

// marshalFireFireFiltersToFireFiltersRequestBody builds a value of type
// *FireFiltersRequestBody from a value of type *fire.FireFilters.
func marshalFireFireFiltersToFireFiltersRequestBody(v *fire.FireFilters) *FireFiltersRequestBody {
	res := &FireFiltersRequestBody{}
	if v.Name != nil {
		res.Name = make([]*StringFilterRequestBody, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = marshalFireStringFilterToStringFilterRequestBody(val)
		}
	}
	if v.Start != nil {
		res.Start = make([]*TimeFilterRequestBody, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = marshalFireTimeFilterToTimeFilterRequestBody(val)
		}
	}
	if v.End != nil {
		res.End = make([]*TimeFilterRequestBody, len(v.End))
		for i, val := range v.End {
			res.End[i] = marshalFireTimeFilterToTimeFilterRequestBody(val)
		}
	}

	return res
}

// marshalFireStringFilterToStringFilterRequestBody builds a value of type
// *StringFilterRequestBody from a value of type *fire.StringFilter.
func marshalFireStringFilterToStringFilterRequestBody(v *fire.StringFilter) *StringFilterRequestBody {
	if v == nil {
		return nil
	}
	res := &StringFilterRequestBody{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalFireTimeFilterToTimeFilterRequestBody builds a value of type
// *TimeFilterRequestBody from a value of type *fire.TimeFilter.
func marshalFireTimeFilterToTimeFilterRequestBody(v *fire.TimeFilter) *TimeFilterRequestBody {
	if v == nil {
		return nil
	}
	res := &TimeFilterRequestBody{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalFireFireSearchToFireSearchRequestBody builds a value of type
// *FireSearchRequestBody from a value of type *fire.FireSearch.
func marshalFireFireSearchToFireSearchRequestBody(v *fire.FireSearch) *FireSearchRequestBody {
	res := &FireSearchRequestBody{
		Name:        v.Name,
		Description: v.Description,
	}

	return res
}

// marshalFireFireSortsToFireSortsRequestBody builds a value of type
// *FireSortsRequestBody from a value of type *fire.FireSorts.
func marshalFireFireSortsToFireSortsRequestBody(v *fire.FireSorts) *FireSortsRequestBody {
	res := &FireSortsRequestBody{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// marshalFireFirePaginationToFirePaginationRequestBody builds a value of type
// *FirePaginationRequestBody from a value of type *fire.FirePagination.
func marshalFireFirePaginationToFirePaginationRequestBody(v *fire.FirePagination) *FirePaginationRequestBody {
	res := &FirePaginationRequestBody{
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}

// marshalFireFiltersRequestBodyToFireFireFilters builds a value of type
// *fire.FireFilters from a value of type *FireFiltersRequestBody.
func marshalFireFiltersRequestBodyToFireFireFilters(v *FireFiltersRequestBody) *fire.FireFilters {
	res := &fire.FireFilters{}
	if v.Name != nil {
		res.Name = make([]*fire.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = marshalStringFilterRequestBodyToFireStringFilter(val)
		}
	}
	if v.Start != nil {
		res.Start = make([]*fire.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = marshalTimeFilterRequestBodyToFireTimeFilter(val)
		}
	}
	if v.End != nil {
		res.End = make([]*fire.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = marshalTimeFilterRequestBodyToFireTimeFilter(val)
		}
	}

	return res
}

// marshalStringFilterRequestBodyToFireStringFilter builds a value of type
// *fire.StringFilter from a value of type *StringFilterRequestBody.
func marshalStringFilterRequestBodyToFireStringFilter(v *StringFilterRequestBody) *fire.StringFilter {
	if v == nil {
		return nil
	}
	res := &fire.StringFilter{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalTimeFilterRequestBodyToFireTimeFilter builds a value of type
// *fire.TimeFilter from a value of type *TimeFilterRequestBody.
func marshalTimeFilterRequestBodyToFireTimeFilter(v *TimeFilterRequestBody) *fire.TimeFilter {
	if v == nil {
		return nil
	}
	res := &fire.TimeFilter{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalFireSearchRequestBodyToFireFireSearch builds a value of type
// *fire.FireSearch from a value of type *FireSearchRequestBody.
func marshalFireSearchRequestBodyToFireFireSearch(v *FireSearchRequestBody) *fire.FireSearch {
	res := &fire.FireSearch{
		Name:        v.Name,
		Description: v.Description,
	}

	return res
}

// marshalFireSortsRequestBodyToFireFireSorts builds a value of type
// *fire.FireSorts from a value of type *FireSortsRequestBody.
func marshalFireSortsRequestBodyToFireFireSorts(v *FireSortsRequestBody) *fire.FireSorts {
	res := &fire.FireSorts{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// marshalFirePaginationRequestBodyToFireFirePagination builds a value of type
// *fire.FirePagination from a value of type *FirePaginationRequestBody.
func marshalFirePaginationRequestBodyToFireFirePagination(v *FirePaginationRequestBody) *fire.FirePagination {
	res := &fire.FirePagination{
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}

// unmarshalFireResponseBodyToFireFire builds a value of type *fire.Fire from a
// value of type *FireResponseBody.
func unmarshalFireResponseBodyToFireFire(v *FireResponseBody) *fire.Fire {
	if v == nil {
		return nil
	}
	res := &fire.Fire{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
		DeletedAt:   v.DeletedAt,
		Name:        v.Name,
		Description: v.Description,
		Start:       v.Start,
		End:         v.End,
	}

	return res
}

// unmarshalPaginationResponseBodyToFirePagination builds a value of type
// *fire.Pagination from a value of type *PaginationResponseBody.
func unmarshalPaginationResponseBodyToFirePagination(v *PaginationResponseBody) *fire.Pagination {
	if v == nil {
		return nil
	}
	res := &fire.Pagination{
		Total: v.Total,
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}

// unmarshalWeatherResponseBodyToFireWeather builds a value of type
// *fire.Weather from a value of type *WeatherResponseBody.
func unmarshalWeatherResponseBodyToFireWeather(v *WeatherResponseBody) *fire.Weather {
	if v == nil {
		return nil
	}
	res := &fire.Weather{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		FireID:      v.FireID,
		LogID:       v.LogID,
		Humidity:    v.Humidity,
		WeatherType: v.WeatherType,
		WeatherTime: v.WeatherTime,
	}
	if v.Temperature != nil {
		res.Temperature = unmarshalTemperatureResponseBodyToFireTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = unmarshalTemperatureResponseBodyToFireTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = unmarshalWindResponseBodyToFireWind(v.Wind)
	}

	return res
}

// unmarshalTemperatureResponseBodyToFireTemperature builds a value of type
// *fire.Temperature from a value of type *TemperatureResponseBody.
func unmarshalTemperatureResponseBodyToFireTemperature(v *TemperatureResponseBody) *fire.Temperature {
	if v == nil {
		return nil
	}
	res := &fire.Temperature{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// unmarshalWindResponseBodyToFireWind builds a value of type *fire.Wind from a
// value of type *WindResponseBody.
func unmarshalWindResponseBodyToFireWind(v *WindResponseBody) *fire.Wind {
	if v == nil {
		return nil
	}
	res := &fire.Wind{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// unmarshalLogResponseBodyToFireLog builds a value of type *fire.Log from a
// value of type *LogResponseBody.
func unmarshalLogResponseBodyToFireLog(v *LogResponseBody) *fire.Log {
	if v == nil {
		return nil
	}
	res := &fire.Log{
		ID:        v.ID,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		Name:      v.Name,
		Size:      v.Size,
		FireID:    v.FireID,
		AddedAt:   v.AddedAt,
	}
	if v.Weather != nil {
		res.Weather = unmarshalWeatherResponseBodyToFireWeather(v.Weather)
	}

	return res
}
