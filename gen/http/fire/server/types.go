// Code generated by goa v3.2.5, DO NOT EDIT.
//
// fire HTTP server types
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package server

import (
	fire "github.com/NeedMoreVolume/FireTracker/gen/fire"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "fire" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	DeletedAt *string `form:"deletedAt,omitempty" json:"deletedAt,omitempty" xml:"deletedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// start time of fire
	Start *string `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	// end time of fire
	End *string `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// UpdateRequestBody is the type of the "fire" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	DeletedAt *string `form:"deletedAt,omitempty" json:"deletedAt,omitempty" xml:"deletedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// start time of fire
	Start *string `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	// end time of fire
	End *string `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// ListRequestBody is the type of the "fire" service "list" endpoint HTTP
// request body.
type ListRequestBody struct {
	// product filters to apply
	Filters *FireFiltersRequestBody `form:"filters,omitempty" json:"filters,omitempty" xml:"filters,omitempty"`
	// product search to apply
	Search *FireSearchRequestBody `form:"search,omitempty" json:"search,omitempty" xml:"search,omitempty"`
	// product sort to apply
	Sort *FireSortsRequestBody `form:"sort,omitempty" json:"sort,omitempty" xml:"sort,omitempty"`
	// product pagination to apply
	Pagination *FirePaginationRequestBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateOKResponseBody is the type of the "fire" service "create" endpoint
// HTTP response body.
type CreateOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	DeletedAt *string `form:"deletedAt,omitempty" json:"deletedAt,omitempty" xml:"deletedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// start time of fire
	Start *string `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	// end time of fire
	End *string `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// GetOKResponseBody is the type of the "fire" service "get" endpoint HTTP
// response body.
type GetOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	DeletedAt *string `form:"deletedAt,omitempty" json:"deletedAt,omitempty" xml:"deletedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// start time of fire
	Start *string `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	// end time of fire
	End *string `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// UpdateOKResponseBody is the type of the "fire" service "update" endpoint
// HTTP response body.
type UpdateOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	DeletedAt *string `form:"deletedAt,omitempty" json:"deletedAt,omitempty" xml:"deletedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// start time of fire
	Start *string `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	// end time of fire
	End *string `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// ListOKResponseBody is the type of the "fire" service "list" endpoint HTTP
// response body.
type ListOKResponseBody struct {
	// list of fires
	Fires []*FireResponseBody `form:"fires,omitempty" json:"fires,omitempty" xml:"fires,omitempty"`
	// pagination results
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// GetWeatherForFireOKResponseBody is the type of the "fire" service
// "getWeatherForFire" endpoint HTTP response body.
type GetWeatherForFireOKResponseBody struct {
	// weather results
	Weathers []*WeatherResponseBody `form:"weathers,omitempty" json:"weathers,omitempty" xml:"weathers,omitempty"`
	// pagination info
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// GetLogsForFireOKResponseBody is the type of the "fire" service
// "getLogsForFire" endpoint HTTP response body.
type GetLogsForFireOKResponseBody struct {
	// logs
	Logs []*LogResponseBody `form:"logs,omitempty" json:"logs,omitempty" xml:"logs,omitempty"`
	// pagination results
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "fire" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetNotFoundResponseBody is the type of the "fire" service "get" endpoint
// HTTP response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "fire" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "fire" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetWeatherForFireNotFoundResponseBody is the type of the "fire" service
// "getWeatherForFire" endpoint HTTP response body for the "not_found" error.
type GetWeatherForFireNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetLogsForFireNotFoundResponseBody is the type of the "fire" service
// "getLogsForFire" endpoint HTTP response body for the "not_found" error.
type GetLogsForFireNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FireResponseBody is used to define fields on response body types.
type FireResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	DeletedAt *string `form:"deletedAt,omitempty" json:"deletedAt,omitempty" xml:"deletedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// start time of fire
	Start *string `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	// end time of fire
	End *string `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// count of the things
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// page number
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// max number of things
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// WeatherResponseBody is used to define fields on response body types.
type WeatherResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// TemperatureResponseBody is used to define fields on response body types.
type TemperatureResponseBody struct {
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	// temperature value
	Value *int32 `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WindResponseBody is used to define fields on response body types.
type WindResponseBody struct {
	// wind speed
	Speed *int32 `form:"speed,omitempty" json:"speed,omitempty" xml:"speed,omitempty"`
	// wind direction
	Direction *string `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
}

// LogResponseBody is used to define fields on response body types.
type LogResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherResponseBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// FireFiltersRequestBody is used to define fields on request body types.
type FireFiltersRequestBody struct {
	Name  []*StringFilterRequestBody `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Start []*TimeFilterRequestBody   `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End   []*TimeFilterRequestBody   `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// StringFilterRequestBody is used to define fields on request body types.
type StringFilterRequestBody struct {
	// filter key
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// operator value
	Operator *string `form:"operator,omitempty" json:"operator,omitempty" xml:"operator,omitempty"`
	// filter value
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// TimeFilterRequestBody is used to define fields on request body types.
type TimeFilterRequestBody struct {
	// filter key
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// operator value
	Operator *string `form:"operator,omitempty" json:"operator,omitempty" xml:"operator,omitempty"`
	// filter value
	Value *int `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// FireSearchRequestBody is used to define fields on request body types.
type FireSearchRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// FireSortsRequestBody is used to define fields on request body types.
type FireSortsRequestBody struct {
	ID    *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Start *string `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End   *string `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// FirePaginationRequestBody is used to define fields on request body types.
type FirePaginationRequestBody struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// NewCreateOKResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "fire" service.
func NewCreateOKResponseBody(res *fire.Fire) *CreateOKResponseBody {
	body := &CreateOKResponseBody{
		ID:          res.ID,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		DeletedAt:   res.DeletedAt,
		Name:        res.Name,
		Description: res.Description,
		Start:       res.Start,
		End:         res.End,
	}
	return body
}

// NewGetOKResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "fire" service.
func NewGetOKResponseBody(res *fire.Fire) *GetOKResponseBody {
	body := &GetOKResponseBody{
		ID:          res.ID,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		DeletedAt:   res.DeletedAt,
		Name:        res.Name,
		Description: res.Description,
		Start:       res.Start,
		End:         res.End,
	}
	return body
}

// NewUpdateOKResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "fire" service.
func NewUpdateOKResponseBody(res *fire.Fire) *UpdateOKResponseBody {
	body := &UpdateOKResponseBody{
		ID:          res.ID,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
		DeletedAt:   res.DeletedAt,
		Name:        res.Name,
		Description: res.Description,
		Start:       res.Start,
		End:         res.End,
	}
	return body
}

// NewListOKResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "fire" service.
func NewListOKResponseBody(res *fire.FireList) *ListOKResponseBody {
	body := &ListOKResponseBody{}
	if res.Fires != nil {
		body.Fires = make([]*FireResponseBody, len(res.Fires))
		for i, val := range res.Fires {
			body.Fires[i] = marshalFireFireToFireResponseBody(val)
		}
	}
	if res.Pagination != nil {
		body.Pagination = marshalFirePaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewGetWeatherForFireOKResponseBody builds the HTTP response body from the
// result of the "getWeatherForFire" endpoint of the "fire" service.
func NewGetWeatherForFireOKResponseBody(res *fire.WeatherList) *GetWeatherForFireOKResponseBody {
	body := &GetWeatherForFireOKResponseBody{}
	if res.Weathers != nil {
		body.Weathers = make([]*WeatherResponseBody, len(res.Weathers))
		for i, val := range res.Weathers {
			body.Weathers[i] = marshalFireWeatherToWeatherResponseBody(val)
		}
	}
	if res.Pagination != nil {
		body.Pagination = marshalFirePaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewGetLogsForFireOKResponseBody builds the HTTP response body from the
// result of the "getLogsForFire" endpoint of the "fire" service.
func NewGetLogsForFireOKResponseBody(res *fire.LogList) *GetLogsForFireOKResponseBody {
	body := &GetLogsForFireOKResponseBody{}
	if res.Logs != nil {
		body.Logs = make([]*LogResponseBody, len(res.Logs))
		for i, val := range res.Logs {
			body.Logs[i] = marshalFireLogToLogResponseBody(val)
		}
	}
	if res.Pagination != nil {
		body.Pagination = marshalFirePaginationToPaginationResponseBody(res.Pagination)
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "fire" service.
func NewCreateBadRequestResponseBody(res *goa.ServiceError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "fire" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "fire" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "fire" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetWeatherForFireNotFoundResponseBody builds the HTTP response body from
// the result of the "getWeatherForFire" endpoint of the "fire" service.
func NewGetWeatherForFireNotFoundResponseBody(res *goa.ServiceError) *GetWeatherForFireNotFoundResponseBody {
	body := &GetWeatherForFireNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetLogsForFireNotFoundResponseBody builds the HTTP response body from the
// result of the "getLogsForFire" endpoint of the "fire" service.
func NewGetLogsForFireNotFoundResponseBody(res *goa.ServiceError) *GetLogsForFireNotFoundResponseBody {
	body := &GetLogsForFireNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateFire builds a fire service create endpoint payload.
func NewCreateFire(body *CreateRequestBody) *fire.Fire {
	v := &fire.Fire{
		ID:          body.ID,
		CreatedAt:   body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
		DeletedAt:   body.DeletedAt,
		Name:        body.Name,
		Description: body.Description,
		Start:       body.Start,
		End:         body.End,
	}

	return v
}

// NewGetPayload builds a fire service get endpoint payload.
func NewGetPayload(id int) *fire.GetPayload {
	v := &fire.GetPayload{}
	v.ID = &id

	return v
}

// NewUpdateFire builds a fire service update endpoint payload.
func NewUpdateFire(body *UpdateRequestBody, id int) *fire.Fire {
	v := &fire.Fire{
		CreatedAt:   body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
		DeletedAt:   body.DeletedAt,
		Name:        body.Name,
		Description: body.Description,
		Start:       body.Start,
		End:         body.End,
	}
	v.ID = &id

	return v
}

// NewDeletePayload builds a fire service delete endpoint payload.
func NewDeletePayload(id int) *fire.DeletePayload {
	v := &fire.DeletePayload{}
	v.ID = &id

	return v
}

// NewListFireListPayload builds a fire service list endpoint payload.
func NewListFireListPayload(body *ListRequestBody) *fire.FireListPayload {
	v := &fire.FireListPayload{}
	v.Filters = unmarshalFireFiltersRequestBodyToFireFireFilters(body.Filters)
	v.Search = unmarshalFireSearchRequestBodyToFireFireSearch(body.Search)
	v.Sort = unmarshalFireSortsRequestBodyToFireFireSorts(body.Sort)
	v.Pagination = unmarshalFirePaginationRequestBodyToFireFirePagination(body.Pagination)

	return v
}

// NewGetWeatherForFirePayload builds a fire service getWeatherForFire endpoint
// payload.
func NewGetWeatherForFirePayload(id int) *fire.GetWeatherForFirePayload {
	v := &fire.GetWeatherForFirePayload{}
	v.ID = &id

	return v
}

// NewGetLogsForFirePayload builds a fire service getLogsForFire endpoint
// payload.
func NewGetLogsForFirePayload(id int) *fire.GetLogsForFirePayload {
	v := &fire.GetLogsForFirePayload{}
	v.ID = &id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.DeletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.deletedAt", *body.DeletedAt, goa.FormatDateTime))
	}
	if body.Start != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start", *body.Start, goa.FormatDateTime))
	}
	if body.End != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end", *body.End, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.DeletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.deletedAt", *body.DeletedAt, goa.FormatDateTime))
	}
	if body.Start != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.start", *body.Start, goa.FormatDateTime))
	}
	if body.End != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.end", *body.End, goa.FormatDateTime))
	}
	return
}

// ValidateListRequestBody runs the validations defined on ListRequestBody
func ValidateListRequestBody(body *ListRequestBody) (err error) {
	if body.Filters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filters", "body"))
	}
	if body.Search == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("search", "body"))
	}
	if body.Sort == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sort", "body"))
	}
	if body.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "body"))
	}
	if body.Filters != nil {
		if err2 := ValidateFireFiltersRequestBody(body.Filters); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Sort != nil {
		if err2 := ValidateFireSortsRequestBody(body.Sort); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Pagination != nil {
		if err2 := ValidateFirePaginationRequestBody(body.Pagination); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFireFiltersRequestBody runs the validations defined on
// FireFiltersRequestBody
func ValidateFireFiltersRequestBody(body *FireFiltersRequestBody) (err error) {
	for _, e := range body.Name {
		if e != nil {
			if err2 := ValidateStringFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Start {
		if e != nil {
			if err2 := ValidateTimeFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.End {
		if e != nil {
			if err2 := ValidateTimeFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStringFilterRequestBody runs the validations defined on
// StringFilterRequestBody
func ValidateStringFilterRequestBody(body *StringFilterRequestBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Operator == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("operator", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Operator != nil {
		if !(*body.Operator == "=" || *body.Operator == "!=") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.operator", *body.Operator, []interface{}{"=", "!="}))
		}
	}
	return
}

// ValidateTimeFilterRequestBody runs the validations defined on
// TimeFilterRequestBody
func ValidateTimeFilterRequestBody(body *TimeFilterRequestBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Operator == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("operator", "body"))
	}
	if body.Value == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("value", "body"))
	}
	if body.Key != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.key", *body.Key, goa.FormatDateTime))
	}
	if body.Operator != nil {
		if !(*body.Operator == "=" || *body.Operator == ">" || *body.Operator == ">=" || *body.Operator == "<=" || *body.Operator == "<") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.operator", *body.Operator, []interface{}{"=", ">", ">=", "<=", "<"}))
		}
	}
	return
}

// ValidateFireSortsRequestBody runs the validations defined on
// FireSortsRequestBody
func ValidateFireSortsRequestBody(body *FireSortsRequestBody) (err error) {
	if body.ID != nil {
		if !(*body.ID == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.id", *body.ID, []interface{}{"ASC, DESC"}))
		}
	}
	if body.Start != nil {
		if !(*body.Start == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.start", *body.Start, []interface{}{"ASC, DESC"}))
		}
	}
	if body.End != nil {
		if !(*body.End == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.end", *body.End, []interface{}{"ASC, DESC"}))
		}
	}
	return
}

// ValidateFirePaginationRequestBody runs the validations defined on
// FirePaginationRequestBody
func ValidateFirePaginationRequestBody(body *FirePaginationRequestBody) (err error) {
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	return
}
