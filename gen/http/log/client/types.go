// Code generated by goa v3.2.5, DO NOT EDIT.
//
// log HTTP client types
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	log "github.com/NeedMoreVolume/FireTracker/gen/log"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "log" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherRequestBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// GetRequestBody is the type of the "log" service "get" endpoint HTTP request
// body.
type GetRequestBody struct {
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherRequestBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// UpdateRequestBody is the type of the "log" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherRequestBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// DeleteRequestBody is the type of the "log" service "delete" endpoint HTTP
// request body.
type DeleteRequestBody struct {
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherRequestBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// ListRequestBody is the type of the "log" service "list" endpoint HTTP
// request body.
type ListRequestBody struct {
	// product filters to apply
	Filters *LogFiltersRequestBody `form:"filters" json:"filters" xml:"filters"`
	// product search to apply
	Search *LogSearchRequestBody `form:"search" json:"search" xml:"search"`
	// product sort to apply
	Sort *LogSortsRequestBody `form:"sort" json:"sort" xml:"sort"`
	// product pagination to apply
	Pagination *LogPaginationRequestBody `form:"pagination" json:"pagination" xml:"pagination"`
}

// CreateOKResponseBody is the type of the "log" service "create" endpoint HTTP
// response body.
type CreateOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherResponseBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// GetOKResponseBody is the type of the "log" service "get" endpoint HTTP
// response body.
type GetOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherResponseBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// UpdateOKResponseBody is the type of the "log" service "update" endpoint HTTP
// response body.
type UpdateOKResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherResponseBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// ListOKResponseBody is the type of the "log" service "list" endpoint HTTP
// response body.
type ListOKResponseBody struct {
	// logs
	Logs []*LogResponseBody `form:"logs,omitempty" json:"logs,omitempty" xml:"logs,omitempty"`
	// pagination results
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "log" service "create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetNotFoundResponseBody is the type of the "log" service "get" endpoint HTTP
// response body for the "not_found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "log" service "update"
// endpoint HTTP response body for the "not_found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "log" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// WeatherRequestBody is used to define fields on request body types.
type WeatherRequestBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureRequestBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureRequestBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindRequestBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// TemperatureRequestBody is used to define fields on request body types.
type TemperatureRequestBody struct {
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	// temperature value
	Value *int32 `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WindRequestBody is used to define fields on request body types.
type WindRequestBody struct {
	// wind speed
	Speed *int32 `form:"speed,omitempty" json:"speed,omitempty" xml:"speed,omitempty"`
	// wind direction
	Direction *string `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
}

// WeatherResponseBody is used to define fields on response body types.
type WeatherResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// ID of the fire
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// ID of the log
	LogID *int `form:"logID,omitempty" json:"logID,omitempty" xml:"logID,omitempty"`
	// temperature
	Temperature *TemperatureResponseBody `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// humidity level
	Humidity *int32 `form:"humidity,omitempty" json:"humidity,omitempty" xml:"humidity,omitempty"`
	// dew point
	DewPoint *TemperatureResponseBody `form:"dewPoint,omitempty" json:"dewPoint,omitempty" xml:"dewPoint,omitempty"`
	// wind data
	Wind *WindResponseBody `form:"wind,omitempty" json:"wind,omitempty" xml:"wind,omitempty"`
	// type of weather
	WeatherType *string `form:"weatherType,omitempty" json:"weatherType,omitempty" xml:"weatherType,omitempty"`
	WeatherTime *string `form:"weatherTime,omitempty" json:"weatherTime,omitempty" xml:"weatherTime,omitempty"`
}

// TemperatureResponseBody is used to define fields on response body types.
type TemperatureResponseBody struct {
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	// temperature value
	Value *int32 `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// WindResponseBody is used to define fields on response body types.
type WindResponseBody struct {
	// wind speed
	Speed *int32 `form:"speed,omitempty" json:"speed,omitempty" xml:"speed,omitempty"`
	// wind direction
	Direction *string `form:"direction,omitempty" json:"direction,omitempty" xml:"direction,omitempty"`
	// measurement unit
	Unit *string `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
}

// CreateInternalServerErrorResponseBody is used to define fields on response
// body types.
type CreateInternalServerErrorResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherResponseBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// GetInternalServerErrorResponseBody is used to define fields on response body
// types.
type GetInternalServerErrorResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherResponseBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// UpdateInternalServerErrorResponseBody is used to define fields on response
// body types.
type UpdateInternalServerErrorResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherResponseBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// LogFiltersRequestBody is used to define fields on request body types.
type LogFiltersRequestBody struct {
	Name  []*StringFilterRequestBody `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Start []*TimeFilterRequestBody   `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End   []*TimeFilterRequestBody   `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// StringFilterRequestBody is used to define fields on request body types.
type StringFilterRequestBody struct {
	// filter key
	Key string `form:"key" json:"key" xml:"key"`
	// operator value
	Operator string `form:"operator" json:"operator" xml:"operator"`
	// filter value
	Value string `form:"value" json:"value" xml:"value"`
}

// TimeFilterRequestBody is used to define fields on request body types.
type TimeFilterRequestBody struct {
	// filter key
	Key string `form:"key" json:"key" xml:"key"`
	// operator value
	Operator string `form:"operator" json:"operator" xml:"operator"`
	// filter value
	Value int `form:"value" json:"value" xml:"value"`
}

// LogSearchRequestBody is used to define fields on request body types.
type LogSearchRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// LogSortsRequestBody is used to define fields on request body types.
type LogSortsRequestBody struct {
	ID    *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Start *string `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End   *string `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// LogPaginationRequestBody is used to define fields on request body types.
type LogPaginationRequestBody struct {
	Page  int `form:"page" json:"page" xml:"page"`
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// LogResponseBody is used to define fields on response body types.
type LogResponseBody struct {
	// id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// name
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// name
	UpdatedAt *string `form:"updatedAt,omitempty" json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// size of log
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// Fire identifier log belongs to
	FireID *int `form:"fireID,omitempty" json:"fireID,omitempty" xml:"fireID,omitempty"`
	// time log was added to fire
	AddedAt *string `form:"addedAt,omitempty" json:"addedAt,omitempty" xml:"addedAt,omitempty"`
	// weather data at time log was added to fire
	Weather *WeatherResponseBody `form:"weather,omitempty" json:"weather,omitempty" xml:"weather,omitempty"`
}

// PaginationResponseBody is used to define fields on response body types.
type PaginationResponseBody struct {
	// count of the things
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// page number
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// max number of things
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// ListBadRequestResponseBody is used to define fields on response body types.
type ListBadRequestResponseBody struct {
	// logs
	Logs []*LogResponseBody `form:"logs,omitempty" json:"logs,omitempty" xml:"logs,omitempty"`
	// pagination results
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// ListInternalServerErrorResponseBody is used to define fields on response
// body types.
type ListInternalServerErrorResponseBody struct {
	// logs
	Logs []*LogResponseBody `form:"logs,omitempty" json:"logs,omitempty" xml:"logs,omitempty"`
	// pagination results
	Pagination *PaginationResponseBody `form:"pagination,omitempty" json:"pagination,omitempty" xml:"pagination,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "log" service.
func NewCreateRequestBody(p *log.Log) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:        p.ID,
		CreatedAt: p.CreatedAt,
		UpdatedAt: p.UpdatedAt,
		Name:      p.Name,
		Size:      p.Size,
		FireID:    p.FireID,
		AddedAt:   p.AddedAt,
	}
	if p.Weather != nil {
		body.Weather = marshalLogWeatherToWeatherRequestBody(p.Weather)
	}
	return body
}

// NewGetRequestBody builds the HTTP request body from the payload of the "get"
// endpoint of the "log" service.
func NewGetRequestBody(p *log.Log) *GetRequestBody {
	body := &GetRequestBody{
		CreatedAt: p.CreatedAt,
		UpdatedAt: p.UpdatedAt,
		Name:      p.Name,
		Size:      p.Size,
		FireID:    p.FireID,
		AddedAt:   p.AddedAt,
	}
	if p.Weather != nil {
		body.Weather = marshalLogWeatherToWeatherRequestBody(p.Weather)
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "log" service.
func NewUpdateRequestBody(p *log.Log) *UpdateRequestBody {
	body := &UpdateRequestBody{
		CreatedAt: p.CreatedAt,
		UpdatedAt: p.UpdatedAt,
		Name:      p.Name,
		Size:      p.Size,
		FireID:    p.FireID,
		AddedAt:   p.AddedAt,
	}
	if p.Weather != nil {
		body.Weather = marshalLogWeatherToWeatherRequestBody(p.Weather)
	}
	return body
}

// NewDeleteRequestBody builds the HTTP request body from the payload of the
// "delete" endpoint of the "log" service.
func NewDeleteRequestBody(p *log.Log) *DeleteRequestBody {
	body := &DeleteRequestBody{
		CreatedAt: p.CreatedAt,
		UpdatedAt: p.UpdatedAt,
		Name:      p.Name,
		Size:      p.Size,
		FireID:    p.FireID,
		AddedAt:   p.AddedAt,
	}
	if p.Weather != nil {
		body.Weather = marshalLogWeatherToWeatherRequestBody(p.Weather)
	}
	return body
}

// NewListRequestBody builds the HTTP request body from the payload of the
// "list" endpoint of the "log" service.
func NewListRequestBody(p *log.LogListPayload) *ListRequestBody {
	body := &ListRequestBody{}
	if p.Filters != nil {
		body.Filters = marshalLogLogFiltersToLogFiltersRequestBody(p.Filters)
	}
	if p.Search != nil {
		body.Search = marshalLogLogSearchToLogSearchRequestBody(p.Search)
	}
	if p.Sort != nil {
		body.Sort = marshalLogLogSortsToLogSortsRequestBody(p.Sort)
	}
	if p.Pagination != nil {
		body.Pagination = marshalLogLogPaginationToLogPaginationRequestBody(p.Pagination)
	}
	return body
}

// NewCreateLogOK builds a "log" service "create" endpoint result from a HTTP
// "OK" response.
func NewCreateLogOK(body *CreateOKResponseBody) *log.Log {
	v := &log.Log{
		ID:        body.ID,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
		Name:      body.Name,
		Size:      body.Size,
		FireID:    body.FireID,
		AddedAt:   body.AddedAt,
	}
	if body.Weather != nil {
		v.Weather = unmarshalWeatherResponseBodyToLogWeather(body.Weather)
	}

	return v
}

// NewCreateBadRequest builds a log service create endpoint bad_request error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetLogOK builds a "log" service "get" endpoint result from a HTTP "OK"
// response.
func NewGetLogOK(body *GetOKResponseBody) *log.Log {
	v := &log.Log{
		ID:        body.ID,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
		Name:      body.Name,
		Size:      body.Size,
		FireID:    body.FireID,
		AddedAt:   body.AddedAt,
	}
	if body.Weather != nil {
		v.Weather = unmarshalWeatherResponseBodyToLogWeather(body.Weather)
	}

	return v
}

// NewGetNotFound builds a log service get endpoint not_found error.
func NewGetNotFound(body *GetNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateLogOK builds a "log" service "update" endpoint result from a HTTP
// "OK" response.
func NewUpdateLogOK(body *UpdateOKResponseBody) *log.Log {
	v := &log.Log{
		ID:        body.ID,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
		Name:      body.Name,
		Size:      body.Size,
		FireID:    body.FireID,
		AddedAt:   body.AddedAt,
	}
	if body.Weather != nil {
		v.Weather = unmarshalWeatherResponseBodyToLogWeather(body.Weather)
	}

	return v
}

// NewUpdateNotFound builds a log service update endpoint not_found error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteNotFound builds a log service delete endpoint not_found error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListLogListOK builds a "log" service "list" endpoint result from a HTTP
// "OK" response.
func NewListLogListOK(body *ListOKResponseBody) *log.LogList {
	v := &log.LogList{}
	if body.Logs != nil {
		v.Logs = make([]*log.Log, len(body.Logs))
		for i, val := range body.Logs {
			v.Logs[i] = unmarshalLogResponseBodyToLogLog(val)
		}
	}
	if body.Pagination != nil {
		v.Pagination = unmarshalPaginationResponseBodyToLogPagination(body.Pagination)
	}

	return v
}

// ValidateCreateOKResponseBody runs the validations defined on
// CreateOKResponseBody
func ValidateCreateOKResponseBody(body *CreateOKResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Size != nil {
		if !(*body.Size == "S" || *body.Size == "M" || *body.Size == "L" || *body.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.size", *body.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if body.AddedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.addedAt", *body.AddedAt, goa.FormatDateTime))
	}
	if body.Weather != nil {
		if err2 := ValidateWeatherResponseBody(body.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetOKResponseBody runs the validations defined on GetOKResponseBody
func ValidateGetOKResponseBody(body *GetOKResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Size != nil {
		if !(*body.Size == "S" || *body.Size == "M" || *body.Size == "L" || *body.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.size", *body.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if body.AddedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.addedAt", *body.AddedAt, goa.FormatDateTime))
	}
	if body.Weather != nil {
		if err2 := ValidateWeatherResponseBody(body.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateOKResponseBody runs the validations defined on
// UpdateOKResponseBody
func ValidateUpdateOKResponseBody(body *UpdateOKResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Size != nil {
		if !(*body.Size == "S" || *body.Size == "M" || *body.Size == "L" || *body.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.size", *body.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if body.AddedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.addedAt", *body.AddedAt, goa.FormatDateTime))
	}
	if body.Weather != nil {
		if err2 := ValidateWeatherResponseBody(body.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListOKResponseBody runs the validations defined on ListOKResponseBody
func ValidateListOKResponseBody(body *ListOKResponseBody) (err error) {
	for _, e := range body.Logs {
		if e != nil {
			if err2 := ValidateLogResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_bad_request_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_not_found_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_not_found_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_not_found_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateWeatherRequestBody runs the validations defined on WeatherRequestBody
func ValidateWeatherRequestBody(body *WeatherRequestBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureRequestBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureRequestBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindRequestBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateTemperatureRequestBody runs the validations defined on
// TemperatureRequestBody
func ValidateTemperatureRequestBody(body *TemperatureRequestBody) (err error) {
	if body.Unit != nil {
		if !(*body.Unit == "K" || *body.Unit == "C" || *body.Unit == "F") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{"K", "C", "F"}))
		}
	}
	return
}

// ValidateWindRequestBody runs the validations defined on WindRequestBody
func ValidateWindRequestBody(body *WindRequestBody) (err error) {
	if body.Direction != nil {
		if !(*body.Direction == "S" || *body.Direction == "SE" || *body.Direction == "E" || *body.Direction == "NE" || *body.Direction == "N" || *body.Direction == "NW" || *body.Direction == "W" || *body.Direction == "SW") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.direction", *body.Direction, []interface{}{"S", "SE", "E", "NE", "N", "NW", "W", "SW"}))
		}
	}
	if body.Unit != nil {
		if !(*body.Unit == "KPH" || *body.Unit == "MPH") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{"KPH", "MPH"}))
		}
	}
	return
}

// ValidateWeatherResponseBody runs the validations defined on
// WeatherResponseBody
func ValidateWeatherResponseBody(body *WeatherResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.Temperature != nil {
		if err2 := ValidateTemperatureResponseBody(body.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DewPoint != nil {
		if err2 := ValidateTemperatureResponseBody(body.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Wind != nil {
		if err2 := ValidateWindResponseBody(body.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.WeatherType != nil {
		if !(*body.WeatherType == "Sunny" || *body.WeatherType == "Cloudy" || *body.WeatherType == "Raining" || *body.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.weatherType", *body.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if body.WeatherTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.weatherTime", *body.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateTemperatureResponseBody runs the validations defined on
// TemperatureResponseBody
func ValidateTemperatureResponseBody(body *TemperatureResponseBody) (err error) {
	if body.Unit != nil {
		if !(*body.Unit == "K" || *body.Unit == "C" || *body.Unit == "F") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{"K", "C", "F"}))
		}
	}
	return
}

// ValidateWindResponseBody runs the validations defined on WindResponseBody
func ValidateWindResponseBody(body *WindResponseBody) (err error) {
	if body.Direction != nil {
		if !(*body.Direction == "S" || *body.Direction == "SE" || *body.Direction == "E" || *body.Direction == "NE" || *body.Direction == "N" || *body.Direction == "NW" || *body.Direction == "W" || *body.Direction == "SW") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.direction", *body.Direction, []interface{}{"S", "SE", "E", "NE", "N", "NW", "W", "SW"}))
		}
	}
	if body.Unit != nil {
		if !(*body.Unit == "KPH" || *body.Unit == "MPH") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{"KPH", "MPH"}))
		}
	}
	return
}

// ValidateCreateInternalServerErrorResponseBody runs the validations defined
// on CreateInternal Server ErrorResponseBody
func ValidateCreateInternalServerErrorResponseBody(body *CreateInternalServerErrorResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Size != nil {
		if !(*body.Size == "S" || *body.Size == "M" || *body.Size == "L" || *body.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.size", *body.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if body.AddedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.addedAt", *body.AddedAt, goa.FormatDateTime))
	}
	if body.Weather != nil {
		if err2 := ValidateWeatherResponseBody(body.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetInternalServerErrorResponseBody runs the validations defined on
// GetInternal Server ErrorResponseBody
func ValidateGetInternalServerErrorResponseBody(body *GetInternalServerErrorResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Size != nil {
		if !(*body.Size == "S" || *body.Size == "M" || *body.Size == "L" || *body.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.size", *body.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if body.AddedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.addedAt", *body.AddedAt, goa.FormatDateTime))
	}
	if body.Weather != nil {
		if err2 := ValidateWeatherResponseBody(body.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateInternalServerErrorResponseBody runs the validations defined
// on UpdateInternal Server ErrorResponseBody
func ValidateUpdateInternalServerErrorResponseBody(body *UpdateInternalServerErrorResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Size != nil {
		if !(*body.Size == "S" || *body.Size == "M" || *body.Size == "L" || *body.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.size", *body.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if body.AddedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.addedAt", *body.AddedAt, goa.FormatDateTime))
	}
	if body.Weather != nil {
		if err2 := ValidateWeatherResponseBody(body.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLogFiltersRequestBody runs the validations defined on
// LogFiltersRequestBody
func ValidateLogFiltersRequestBody(body *LogFiltersRequestBody) (err error) {
	for _, e := range body.Name {
		if e != nil {
			if err2 := ValidateStringFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Start {
		if e != nil {
			if err2 := ValidateTimeFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.End {
		if e != nil {
			if err2 := ValidateTimeFilterRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStringFilterRequestBody runs the validations defined on
// StringFilterRequestBody
func ValidateStringFilterRequestBody(body *StringFilterRequestBody) (err error) {
	if !(body.Operator == "=" || body.Operator == "!=") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.operator", body.Operator, []interface{}{"=", "!="}))
	}
	return
}

// ValidateTimeFilterRequestBody runs the validations defined on
// TimeFilterRequestBody
func ValidateTimeFilterRequestBody(body *TimeFilterRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.key", body.Key, goa.FormatDateTime))

	if !(body.Operator == "=" || body.Operator == ">" || body.Operator == ">=" || body.Operator == "<=" || body.Operator == "<") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.operator", body.Operator, []interface{}{"=", ">", ">=", "<=", "<"}))
	}
	return
}

// ValidateLogSortsRequestBody runs the validations defined on
// LogSortsRequestBody
func ValidateLogSortsRequestBody(body *LogSortsRequestBody) (err error) {
	if body.ID != nil {
		if !(*body.ID == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.id", *body.ID, []interface{}{"ASC, DESC"}))
		}
	}
	if body.Start != nil {
		if !(*body.Start == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.start", *body.Start, []interface{}{"ASC, DESC"}))
		}
	}
	if body.End != nil {
		if !(*body.End == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.end", *body.End, []interface{}{"ASC, DESC"}))
		}
	}
	return
}

// ValidateLogResponseBody runs the validations defined on LogResponseBody
func ValidateLogResponseBody(body *LogResponseBody) (err error) {
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.Size != nil {
		if !(*body.Size == "S" || *body.Size == "M" || *body.Size == "L" || *body.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.size", *body.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if body.AddedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.addedAt", *body.AddedAt, goa.FormatDateTime))
	}
	if body.Weather != nil {
		if err2 := ValidateWeatherResponseBody(body.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on ListBad
// RequestResponseBody
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	for _, e := range body.Logs {
		if e != nil {
			if err2 := ValidateLogResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateListInternalServerErrorResponseBody runs the validations defined on
// ListInternal Server ErrorResponseBody
func ValidateListInternalServerErrorResponseBody(body *ListInternalServerErrorResponseBody) (err error) {
	for _, e := range body.Logs {
		if e != nil {
			if err2 := ValidateLogResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
