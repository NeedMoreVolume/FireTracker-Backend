// Code generated by goa v3.2.5, DO NOT EDIT.
//
// log HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	log "github.com/NeedMoreVolume/FireTracker/gen/log"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "log" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateLogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("log", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the log create
// server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*log.Log)
		if !ok {
			return goahttp.ErrInvalidType("log", "create", "*log.Log", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("log", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the log
// create endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreateResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("log", "create", err)
			}
			err = ValidateCreateOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("log", "create", err)
			}
			res := NewCreateLogOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("log", "create", err)
			}
			err = ValidateCreateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("log", "create", err)
			}
			return nil, NewCreateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("log", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "log" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*log.Log)
		if !ok {
			return nil, goahttp.ErrInvalidType("log", "get", "*log.Log", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetLogPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("log", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the log get server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*log.Log)
		if !ok {
			return goahttp.ErrInvalidType("log", "get", "*log.Log", v)
		}
		body := NewGetRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("log", "get", err)
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the log get
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeGetResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("log", "get", err)
			}
			err = ValidateGetOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("log", "get", err)
			}
			res := NewGetLogOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("log", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("log", "get", err)
			}
			return nil, NewGetNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("log", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "log" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*log.Log)
		if !ok {
			return nil, goahttp.ErrInvalidType("log", "update", "*log.Log", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateLogPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("log", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the log update
// server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*log.Log)
		if !ok {
			return goahttp.ErrInvalidType("log", "update", "*log.Log", v)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("log", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the log
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("log", "update", err)
			}
			err = ValidateUpdateOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("log", "update", err)
			}
			res := NewUpdateLogOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("log", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("log", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("log", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "log" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*log.Log)
		if !ok {
			return nil, goahttp.ErrInvalidType("log", "delete", "*log.Log", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteLogPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("log", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the log delete
// server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*log.Log)
		if !ok {
			return goahttp.ErrInvalidType("log", "delete", "*log.Log", v)
		}
		body := NewDeleteRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("log", "delete", err)
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the log
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("log", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("log", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("log", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "log" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListLogPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("log", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the log list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*log.LogListPayload)
		if !ok {
			return goahttp.ErrInvalidType("log", "list", "*log.LogListPayload", v)
		}
		body := NewListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("log", "list", err)
		}
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the log list
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("log", "list", err)
			}
			err = ValidateListOKResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("log", "list", err)
			}
			res := NewListLogListOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("log", "list", resp.StatusCode, string(body))
		}
	}
}

// marshalLogWeatherToWeatherRequestBody builds a value of type
// *WeatherRequestBody from a value of type *log.Weather.
func marshalLogWeatherToWeatherRequestBody(v *log.Weather) *WeatherRequestBody {
	if v == nil {
		return nil
	}
	res := &WeatherRequestBody{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		FireID:      v.FireID,
		LogID:       v.LogID,
		Humidity:    v.Humidity,
		WeatherType: v.WeatherType,
		WeatherTime: v.WeatherTime,
	}
	if v.Temperature != nil {
		res.Temperature = marshalLogTemperatureToTemperatureRequestBody(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = marshalLogTemperatureToTemperatureRequestBody(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = marshalLogWindToWindRequestBody(v.Wind)
	}

	return res
}

// marshalLogTemperatureToTemperatureRequestBody builds a value of type
// *TemperatureRequestBody from a value of type *log.Temperature.
func marshalLogTemperatureToTemperatureRequestBody(v *log.Temperature) *TemperatureRequestBody {
	if v == nil {
		return nil
	}
	res := &TemperatureRequestBody{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// marshalLogWindToWindRequestBody builds a value of type *WindRequestBody from
// a value of type *log.Wind.
func marshalLogWindToWindRequestBody(v *log.Wind) *WindRequestBody {
	if v == nil {
		return nil
	}
	res := &WindRequestBody{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// marshalWeatherRequestBodyToLogWeather builds a value of type *log.Weather
// from a value of type *WeatherRequestBody.
func marshalWeatherRequestBodyToLogWeather(v *WeatherRequestBody) *log.Weather {
	if v == nil {
		return nil
	}
	res := &log.Weather{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		FireID:      v.FireID,
		LogID:       v.LogID,
		Humidity:    v.Humidity,
		WeatherType: v.WeatherType,
		WeatherTime: v.WeatherTime,
	}
	if v.Temperature != nil {
		res.Temperature = marshalTemperatureRequestBodyToLogTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = marshalTemperatureRequestBodyToLogTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = marshalWindRequestBodyToLogWind(v.Wind)
	}

	return res
}

// marshalTemperatureRequestBodyToLogTemperature builds a value of type
// *log.Temperature from a value of type *TemperatureRequestBody.
func marshalTemperatureRequestBodyToLogTemperature(v *TemperatureRequestBody) *log.Temperature {
	if v == nil {
		return nil
	}
	res := &log.Temperature{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// marshalWindRequestBodyToLogWind builds a value of type *log.Wind from a
// value of type *WindRequestBody.
func marshalWindRequestBodyToLogWind(v *WindRequestBody) *log.Wind {
	if v == nil {
		return nil
	}
	res := &log.Wind{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// unmarshalWeatherResponseBodyToLogWeather builds a value of type *log.Weather
// from a value of type *WeatherResponseBody.
func unmarshalWeatherResponseBodyToLogWeather(v *WeatherResponseBody) *log.Weather {
	if v == nil {
		return nil
	}
	res := &log.Weather{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		FireID:      v.FireID,
		LogID:       v.LogID,
		Humidity:    v.Humidity,
		WeatherType: v.WeatherType,
		WeatherTime: v.WeatherTime,
	}
	if v.Temperature != nil {
		res.Temperature = unmarshalTemperatureResponseBodyToLogTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = unmarshalTemperatureResponseBodyToLogTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = unmarshalWindResponseBodyToLogWind(v.Wind)
	}

	return res
}

// unmarshalTemperatureResponseBodyToLogTemperature builds a value of type
// *log.Temperature from a value of type *TemperatureResponseBody.
func unmarshalTemperatureResponseBodyToLogTemperature(v *TemperatureResponseBody) *log.Temperature {
	if v == nil {
		return nil
	}
	res := &log.Temperature{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// unmarshalWindResponseBodyToLogWind builds a value of type *log.Wind from a
// value of type *WindResponseBody.
func unmarshalWindResponseBodyToLogWind(v *WindResponseBody) *log.Wind {
	if v == nil {
		return nil
	}
	res := &log.Wind{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// marshalLogLogFiltersToLogFiltersRequestBody builds a value of type
// *LogFiltersRequestBody from a value of type *log.LogFilters.
func marshalLogLogFiltersToLogFiltersRequestBody(v *log.LogFilters) *LogFiltersRequestBody {
	res := &LogFiltersRequestBody{}
	if v.Name != nil {
		res.Name = make([]*StringFilterRequestBody, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = marshalLogStringFilterToStringFilterRequestBody(val)
		}
	}
	if v.Start != nil {
		res.Start = make([]*TimeFilterRequestBody, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = marshalLogTimeFilterToTimeFilterRequestBody(val)
		}
	}
	if v.End != nil {
		res.End = make([]*TimeFilterRequestBody, len(v.End))
		for i, val := range v.End {
			res.End[i] = marshalLogTimeFilterToTimeFilterRequestBody(val)
		}
	}

	return res
}

// marshalLogStringFilterToStringFilterRequestBody builds a value of type
// *StringFilterRequestBody from a value of type *log.StringFilter.
func marshalLogStringFilterToStringFilterRequestBody(v *log.StringFilter) *StringFilterRequestBody {
	if v == nil {
		return nil
	}
	res := &StringFilterRequestBody{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalLogTimeFilterToTimeFilterRequestBody builds a value of type
// *TimeFilterRequestBody from a value of type *log.TimeFilter.
func marshalLogTimeFilterToTimeFilterRequestBody(v *log.TimeFilter) *TimeFilterRequestBody {
	if v == nil {
		return nil
	}
	res := &TimeFilterRequestBody{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalLogLogSearchToLogSearchRequestBody builds a value of type
// *LogSearchRequestBody from a value of type *log.LogSearch.
func marshalLogLogSearchToLogSearchRequestBody(v *log.LogSearch) *LogSearchRequestBody {
	res := &LogSearchRequestBody{
		Name:        v.Name,
		Description: v.Description,
	}

	return res
}

// marshalLogLogSortsToLogSortsRequestBody builds a value of type
// *LogSortsRequestBody from a value of type *log.LogSorts.
func marshalLogLogSortsToLogSortsRequestBody(v *log.LogSorts) *LogSortsRequestBody {
	res := &LogSortsRequestBody{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// marshalLogLogPaginationToLogPaginationRequestBody builds a value of type
// *LogPaginationRequestBody from a value of type *log.LogPagination.
func marshalLogLogPaginationToLogPaginationRequestBody(v *log.LogPagination) *LogPaginationRequestBody {
	res := &LogPaginationRequestBody{
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}

// marshalLogFiltersRequestBodyToLogLogFilters builds a value of type
// *log.LogFilters from a value of type *LogFiltersRequestBody.
func marshalLogFiltersRequestBodyToLogLogFilters(v *LogFiltersRequestBody) *log.LogFilters {
	res := &log.LogFilters{}
	if v.Name != nil {
		res.Name = make([]*log.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = marshalStringFilterRequestBodyToLogStringFilter(val)
		}
	}
	if v.Start != nil {
		res.Start = make([]*log.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = marshalTimeFilterRequestBodyToLogTimeFilter(val)
		}
	}
	if v.End != nil {
		res.End = make([]*log.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = marshalTimeFilterRequestBodyToLogTimeFilter(val)
		}
	}

	return res
}

// marshalStringFilterRequestBodyToLogStringFilter builds a value of type
// *log.StringFilter from a value of type *StringFilterRequestBody.
func marshalStringFilterRequestBodyToLogStringFilter(v *StringFilterRequestBody) *log.StringFilter {
	if v == nil {
		return nil
	}
	res := &log.StringFilter{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalTimeFilterRequestBodyToLogTimeFilter builds a value of type
// *log.TimeFilter from a value of type *TimeFilterRequestBody.
func marshalTimeFilterRequestBodyToLogTimeFilter(v *TimeFilterRequestBody) *log.TimeFilter {
	if v == nil {
		return nil
	}
	res := &log.TimeFilter{
		Key:      v.Key,
		Operator: v.Operator,
		Value:    v.Value,
	}

	return res
}

// marshalLogSearchRequestBodyToLogLogSearch builds a value of type
// *log.LogSearch from a value of type *LogSearchRequestBody.
func marshalLogSearchRequestBodyToLogLogSearch(v *LogSearchRequestBody) *log.LogSearch {
	res := &log.LogSearch{
		Name:        v.Name,
		Description: v.Description,
	}

	return res
}

// marshalLogSortsRequestBodyToLogLogSorts builds a value of type *log.LogSorts
// from a value of type *LogSortsRequestBody.
func marshalLogSortsRequestBodyToLogLogSorts(v *LogSortsRequestBody) *log.LogSorts {
	res := &log.LogSorts{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// marshalLogPaginationRequestBodyToLogLogPagination builds a value of type
// *log.LogPagination from a value of type *LogPaginationRequestBody.
func marshalLogPaginationRequestBodyToLogLogPagination(v *LogPaginationRequestBody) *log.LogPagination {
	res := &log.LogPagination{
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}

// unmarshalLogResponseBodyToLogLog builds a value of type *log.Log from a
// value of type *LogResponseBody.
func unmarshalLogResponseBodyToLogLog(v *LogResponseBody) *log.Log {
	if v == nil {
		return nil
	}
	res := &log.Log{
		ID:        v.ID,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		Name:      v.Name,
		Size:      v.Size,
		FireID:    v.FireID,
		AddedAt:   v.AddedAt,
	}
	if v.Weather != nil {
		res.Weather = unmarshalWeatherResponseBodyToLogWeather(v.Weather)
	}

	return res
}

// unmarshalPaginationResponseBodyToLogPagination builds a value of type
// *log.Pagination from a value of type *PaginationResponseBody.
func unmarshalPaginationResponseBodyToLogPagination(v *PaginationResponseBody) *log.Pagination {
	if v == nil {
		return nil
	}
	res := &log.Pagination{
		Total: v.Total,
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}
