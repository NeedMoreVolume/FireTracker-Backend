// Code generated by goa v3.3.1, DO NOT EDIT.
//
// log HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	log "github.com/NeedMoreVolume/FireTracker/gen/log"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateResponse returns an encoder for responses returned by the log
// create endpoint.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*log.Log)
		enc := encoder(ctx, w)
		body := NewCreateOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateRequest returns a decoder for requests sent to the log create
// endpoint.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateLog(&body)

		return payload, nil
	}
}

// EncodeCreateError returns an encoder for errors returned by the create log
// endpoint.
func EncodeCreateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetResponse returns an encoder for responses returned by the log get
// endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*log.Log)
		enc := encoder(ctx, w)
		body := NewGetOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the log get endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GetRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGetRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetLog(&body, id)

		return payload, nil
	}
}

// EncodeGetError returns an encoder for errors returned by the get log
// endpoint.
func EncodeGetError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateResponse returns an encoder for responses returned by the log
// update endpoint.
func EncodeUpdateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*log.Log)
		enc := encoder(ctx, w)
		body := NewUpdateOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateRequest returns a decoder for requests sent to the log update
// endpoint.
func DecodeUpdateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateLog(&body, id)

		return payload, nil
	}
}

// EncodeUpdateError returns an encoder for errors returned by the update log
// endpoint.
func EncodeUpdateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteResponse returns an encoder for responses returned by the log
// delete endpoint.
func EncodeDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteRequest returns a decoder for requests sent to the log delete
// endpoint.
func DecodeDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DeleteRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeleteRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteLog(&body, id)

		return payload, nil
	}
}

// EncodeDeleteError returns an encoder for errors returned by the delete log
// endpoint.
func EncodeDeleteError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListResponse returns an encoder for responses returned by the log list
// endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*log.LogList)
		enc := encoder(ctx, w)
		body := NewListOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the log list
// endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateListRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewListLogListPayload(&body)

		return payload, nil
	}
}

// unmarshalWeatherRequestBodyToLogWeather builds a value of type *log.Weather
// from a value of type *WeatherRequestBody.
func unmarshalWeatherRequestBodyToLogWeather(v *WeatherRequestBody) *log.Weather {
	if v == nil {
		return nil
	}
	res := &log.Weather{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		FireID:      v.FireID,
		LogID:       v.LogID,
		Humidity:    v.Humidity,
		WeatherType: v.WeatherType,
		WeatherTime: v.WeatherTime,
	}
	if v.Temperature != nil {
		res.Temperature = unmarshalTemperatureRequestBodyToLogTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = unmarshalTemperatureRequestBodyToLogTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = unmarshalWindRequestBodyToLogWind(v.Wind)
	}

	return res
}

// unmarshalTemperatureRequestBodyToLogTemperature builds a value of type
// *log.Temperature from a value of type *TemperatureRequestBody.
func unmarshalTemperatureRequestBodyToLogTemperature(v *TemperatureRequestBody) *log.Temperature {
	if v == nil {
		return nil
	}
	res := &log.Temperature{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// unmarshalWindRequestBodyToLogWind builds a value of type *log.Wind from a
// value of type *WindRequestBody.
func unmarshalWindRequestBodyToLogWind(v *WindRequestBody) *log.Wind {
	if v == nil {
		return nil
	}
	res := &log.Wind{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// marshalLogWeatherToWeatherResponseBody builds a value of type
// *WeatherResponseBody from a value of type *log.Weather.
func marshalLogWeatherToWeatherResponseBody(v *log.Weather) *WeatherResponseBody {
	if v == nil {
		return nil
	}
	res := &WeatherResponseBody{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		FireID:      v.FireID,
		LogID:       v.LogID,
		Humidity:    v.Humidity,
		WeatherType: v.WeatherType,
		WeatherTime: v.WeatherTime,
	}
	if v.Temperature != nil {
		res.Temperature = marshalLogTemperatureToTemperatureResponseBody(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = marshalLogTemperatureToTemperatureResponseBody(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = marshalLogWindToWindResponseBody(v.Wind)
	}

	return res
}

// marshalLogTemperatureToTemperatureResponseBody builds a value of type
// *TemperatureResponseBody from a value of type *log.Temperature.
func marshalLogTemperatureToTemperatureResponseBody(v *log.Temperature) *TemperatureResponseBody {
	if v == nil {
		return nil
	}
	res := &TemperatureResponseBody{
		Unit:  v.Unit,
		Value: v.Value,
	}

	return res
}

// marshalLogWindToWindResponseBody builds a value of type *WindResponseBody
// from a value of type *log.Wind.
func marshalLogWindToWindResponseBody(v *log.Wind) *WindResponseBody {
	if v == nil {
		return nil
	}
	res := &WindResponseBody{
		Speed:     v.Speed,
		Direction: v.Direction,
		Unit:      v.Unit,
	}

	return res
}

// unmarshalLogFiltersRequestBodyToLogLogFilters builds a value of type
// *log.LogFilters from a value of type *LogFiltersRequestBody.
func unmarshalLogFiltersRequestBodyToLogLogFilters(v *LogFiltersRequestBody) *log.LogFilters {
	res := &log.LogFilters{}
	if v.Name != nil {
		res.Name = make([]*log.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = unmarshalStringFilterRequestBodyToLogStringFilter(val)
		}
	}
	if v.Start != nil {
		res.Start = make([]*log.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = unmarshalTimeFilterRequestBodyToLogTimeFilter(val)
		}
	}
	if v.End != nil {
		res.End = make([]*log.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = unmarshalTimeFilterRequestBodyToLogTimeFilter(val)
		}
	}

	return res
}

// unmarshalStringFilterRequestBodyToLogStringFilter builds a value of type
// *log.StringFilter from a value of type *StringFilterRequestBody.
func unmarshalStringFilterRequestBodyToLogStringFilter(v *StringFilterRequestBody) *log.StringFilter {
	if v == nil {
		return nil
	}
	res := &log.StringFilter{
		Key:      *v.Key,
		Operator: *v.Operator,
		Value:    *v.Value,
	}

	return res
}

// unmarshalTimeFilterRequestBodyToLogTimeFilter builds a value of type
// *log.TimeFilter from a value of type *TimeFilterRequestBody.
func unmarshalTimeFilterRequestBodyToLogTimeFilter(v *TimeFilterRequestBody) *log.TimeFilter {
	if v == nil {
		return nil
	}
	res := &log.TimeFilter{
		Key:      *v.Key,
		Operator: *v.Operator,
		Value:    *v.Value,
	}

	return res
}

// unmarshalLogSearchRequestBodyToLogLogSearch builds a value of type
// *log.LogSearch from a value of type *LogSearchRequestBody.
func unmarshalLogSearchRequestBodyToLogLogSearch(v *LogSearchRequestBody) *log.LogSearch {
	res := &log.LogSearch{
		Name:        v.Name,
		Description: v.Description,
	}

	return res
}

// unmarshalLogSortsRequestBodyToLogLogSorts builds a value of type
// *log.LogSorts from a value of type *LogSortsRequestBody.
func unmarshalLogSortsRequestBodyToLogLogSorts(v *LogSortsRequestBody) *log.LogSorts {
	res := &log.LogSorts{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// unmarshalLogPaginationRequestBodyToLogLogPagination builds a value of type
// *log.LogPagination from a value of type *LogPaginationRequestBody.
func unmarshalLogPaginationRequestBodyToLogLogPagination(v *LogPaginationRequestBody) *log.LogPagination {
	res := &log.LogPagination{
		Page:  *v.Page,
		Limit: *v.Limit,
	}

	return res
}

// marshalLogLogToLogResponseBody builds a value of type *LogResponseBody from
// a value of type *log.Log.
func marshalLogLogToLogResponseBody(v *log.Log) *LogResponseBody {
	if v == nil {
		return nil
	}
	res := &LogResponseBody{
		ID:        v.ID,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		Name:      v.Name,
		Size:      v.Size,
		FireID:    v.FireID,
		AddedAt:   v.AddedAt,
	}
	if v.Weather != nil {
		res.Weather = marshalLogWeatherToWeatherResponseBody(v.Weather)
	}

	return res
}

// marshalLogPaginationToPaginationResponseBody builds a value of type
// *PaginationResponseBody from a value of type *log.Pagination.
func marshalLogPaginationToPaginationResponseBody(v *log.Pagination) *PaginationResponseBody {
	if v == nil {
		return nil
	}
	res := &PaginationResponseBody{
		Total: v.Total,
		Page:  v.Page,
		Limit: v.Limit,
	}

	return res
}
