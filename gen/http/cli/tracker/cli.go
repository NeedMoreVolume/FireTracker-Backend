// Code generated by goa v3.2.5, DO NOT EDIT.
//
// tracker HTTP client CLI support package
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	firec "github.com/NeedMoreVolume/FireTracker/gen/http/fire/client"
	logc "github.com/NeedMoreVolume/FireTracker/gen/http/log/client"
	weatherc "github.com/NeedMoreVolume/FireTracker/gen/http/weather/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `log (create|get|update|delete|list)
fire (create|get|update|delete|list|get-weather-for-fire|get-logs-for-fire)
weather (create|get|update|delete|list)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` log create --body '{
      "addedAt": "1981-02-18T04:47:49Z",
      "createdAt": "1992-06-27T21:53:41Z",
      "fireID": 5692558848136296972,
      "id": 6577929380304453415,
      "name": "Doloremque qui non.",
      "size": "M",
      "updatedAt": "1985-09-10T06:26:16Z",
      "weather": {
         "createdAt": "2002-05-27T23:56:45Z",
         "dewPoint": {
            "unit": "K",
            "value": 1984646352
         },
         "fireID": 4618423612491386150,
         "humidity": 1322058308,
         "id": 743463055768621296,
         "logID": 3982859360461558219,
         "temperature": {
            "unit": "K",
            "value": 1984646352
         },
         "weatherTime": "1986-11-28T16:39:22Z",
         "weatherType": "Windy",
         "wind": {
            "direction": "E",
            "speed": 762000299,
            "unit": "KPH"
         }
      }
   }'` + "\n" +
		os.Args[0] + ` fire create --body '{
      "createdAt": "2009-11-20T04:16:19Z",
      "deletedAt": "1991-05-21T08:03:01Z",
      "description": "Dicta est itaque.",
      "end": "2010-07-05T02:19:15Z",
      "id": 8063970344505608117,
      "name": "Eveniet possimus error a et qui.",
      "start": "1987-01-21T21:20:18Z",
      "updatedAt": "1992-01-15T01:43:50Z"
   }'` + "\n" +
		os.Args[0] + ` weather create --body '{
      "createdAt": "1996-03-11T03:59:22Z",
      "dewPoint": {
         "unit": "K",
         "value": 1984646352
      },
      "fireID": 4892500656643819481,
      "humidity": 1395475403,
      "id": 1328387204821531769,
      "logID": 4669324356095458075,
      "temperature": {
         "unit": "K",
         "value": 1984646352
      },
      "weatherTime": "2002-06-28T14:09:40Z",
      "weatherType": "Windy",
      "wind": {
         "direction": "E",
         "speed": 762000299,
         "unit": "KPH"
      }
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		logFlags = flag.NewFlagSet("log", flag.ContinueOnError)

		logCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		logCreateBodyFlag = logCreateFlags.String("body", "REQUIRED", "")

		logGetFlags    = flag.NewFlagSet("get", flag.ExitOnError)
		logGetBodyFlag = logGetFlags.String("body", "REQUIRED", "")
		logGetIDFlag   = logGetFlags.String("id", "REQUIRED", "id")

		logUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		logUpdateBodyFlag = logUpdateFlags.String("body", "REQUIRED", "")
		logUpdateIDFlag   = logUpdateFlags.String("id", "REQUIRED", "id")

		logDeleteFlags    = flag.NewFlagSet("delete", flag.ExitOnError)
		logDeleteBodyFlag = logDeleteFlags.String("body", "REQUIRED", "")
		logDeleteIDFlag   = logDeleteFlags.String("id", "REQUIRED", "id")

		logListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		logListBodyFlag = logListFlags.String("body", "REQUIRED", "")

		fireFlags = flag.NewFlagSet("fire", flag.ContinueOnError)

		fireCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		fireCreateBodyFlag = fireCreateFlags.String("body", "REQUIRED", "")

		fireGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		fireGetIDFlag = fireGetFlags.String("id", "REQUIRED", "fire id")

		fireUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		fireUpdateBodyFlag = fireUpdateFlags.String("body", "REQUIRED", "")
		fireUpdateIDFlag   = fireUpdateFlags.String("id", "REQUIRED", "id")

		fireDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		fireDeleteIDFlag = fireDeleteFlags.String("id", "REQUIRED", "fire id")

		fireListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		fireListBodyFlag = fireListFlags.String("body", "REQUIRED", "")

		fireGetWeatherForFireFlags  = flag.NewFlagSet("get-weather-for-fire", flag.ExitOnError)
		fireGetWeatherForFireIDFlag = fireGetWeatherForFireFlags.String("id", "REQUIRED", "fire id")

		fireGetLogsForFireFlags  = flag.NewFlagSet("get-logs-for-fire", flag.ExitOnError)
		fireGetLogsForFireIDFlag = fireGetLogsForFireFlags.String("id", "REQUIRED", "fire id")

		weatherFlags = flag.NewFlagSet("weather", flag.ContinueOnError)

		weatherCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		weatherCreateBodyFlag = weatherCreateFlags.String("body", "REQUIRED", "")

		weatherGetFlags    = flag.NewFlagSet("get", flag.ExitOnError)
		weatherGetBodyFlag = weatherGetFlags.String("body", "REQUIRED", "")
		weatherGetIDFlag   = weatherGetFlags.String("id", "REQUIRED", "id")

		weatherUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		weatherUpdateBodyFlag = weatherUpdateFlags.String("body", "REQUIRED", "")
		weatherUpdateIDFlag   = weatherUpdateFlags.String("id", "REQUIRED", "id")

		weatherDeleteFlags    = flag.NewFlagSet("delete", flag.ExitOnError)
		weatherDeleteBodyFlag = weatherDeleteFlags.String("body", "REQUIRED", "")
		weatherDeleteIDFlag   = weatherDeleteFlags.String("id", "REQUIRED", "id")

		weatherListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		weatherListBodyFlag = weatherListFlags.String("body", "REQUIRED", "")
	)
	logFlags.Usage = logUsage
	logCreateFlags.Usage = logCreateUsage
	logGetFlags.Usage = logGetUsage
	logUpdateFlags.Usage = logUpdateUsage
	logDeleteFlags.Usage = logDeleteUsage
	logListFlags.Usage = logListUsage

	fireFlags.Usage = fireUsage
	fireCreateFlags.Usage = fireCreateUsage
	fireGetFlags.Usage = fireGetUsage
	fireUpdateFlags.Usage = fireUpdateUsage
	fireDeleteFlags.Usage = fireDeleteUsage
	fireListFlags.Usage = fireListUsage
	fireGetWeatherForFireFlags.Usage = fireGetWeatherForFireUsage
	fireGetLogsForFireFlags.Usage = fireGetLogsForFireUsage

	weatherFlags.Usage = weatherUsage
	weatherCreateFlags.Usage = weatherCreateUsage
	weatherGetFlags.Usage = weatherGetUsage
	weatherUpdateFlags.Usage = weatherUpdateUsage
	weatherDeleteFlags.Usage = weatherDeleteUsage
	weatherListFlags.Usage = weatherListUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "log":
			svcf = logFlags
		case "fire":
			svcf = fireFlags
		case "weather":
			svcf = weatherFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "log":
			switch epn {
			case "create":
				epf = logCreateFlags

			case "get":
				epf = logGetFlags

			case "update":
				epf = logUpdateFlags

			case "delete":
				epf = logDeleteFlags

			case "list":
				epf = logListFlags

			}

		case "fire":
			switch epn {
			case "create":
				epf = fireCreateFlags

			case "get":
				epf = fireGetFlags

			case "update":
				epf = fireUpdateFlags

			case "delete":
				epf = fireDeleteFlags

			case "list":
				epf = fireListFlags

			case "get-weather-for-fire":
				epf = fireGetWeatherForFireFlags

			case "get-logs-for-fire":
				epf = fireGetLogsForFireFlags

			}

		case "weather":
			switch epn {
			case "create":
				epf = weatherCreateFlags

			case "get":
				epf = weatherGetFlags

			case "update":
				epf = weatherUpdateFlags

			case "delete":
				epf = weatherDeleteFlags

			case "list":
				epf = weatherListFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "log":
			c := logc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = logc.BuildCreatePayload(*logCreateBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = logc.BuildGetPayload(*logGetBodyFlag, *logGetIDFlag)
			case "update":
				endpoint = c.Update()
				data, err = logc.BuildUpdatePayload(*logUpdateBodyFlag, *logUpdateIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = logc.BuildDeletePayload(*logDeleteBodyFlag, *logDeleteIDFlag)
			case "list":
				endpoint = c.List()
				data, err = logc.BuildListPayload(*logListBodyFlag)
			}
		case "fire":
			c := firec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = firec.BuildCreatePayload(*fireCreateBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = firec.BuildGetPayload(*fireGetIDFlag)
			case "update":
				endpoint = c.Update()
				data, err = firec.BuildUpdatePayload(*fireUpdateBodyFlag, *fireUpdateIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = firec.BuildDeletePayload(*fireDeleteIDFlag)
			case "list":
				endpoint = c.List()
				data, err = firec.BuildListPayload(*fireListBodyFlag)
			case "get-weather-for-fire":
				endpoint = c.GetWeatherForFire()
				data, err = firec.BuildGetWeatherForFirePayload(*fireGetWeatherForFireIDFlag)
			case "get-logs-for-fire":
				endpoint = c.GetLogsForFire()
				data, err = firec.BuildGetLogsForFirePayload(*fireGetLogsForFireIDFlag)
			}
		case "weather":
			c := weatherc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = weatherc.BuildCreatePayload(*weatherCreateBodyFlag)
			case "get":
				endpoint = c.Get()
				data, err = weatherc.BuildGetPayload(*weatherGetBodyFlag, *weatherGetIDFlag)
			case "update":
				endpoint = c.Update()
				data, err = weatherc.BuildUpdatePayload(*weatherUpdateBodyFlag, *weatherUpdateIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = weatherc.BuildDeletePayload(*weatherDeleteBodyFlag, *weatherDeleteIDFlag)
			case "list":
				endpoint = c.List()
				data, err = weatherc.BuildListPayload(*weatherListBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// logUsage displays the usage of the log command and its subcommands.
func logUsage() {
	fmt.Fprintf(os.Stderr, `The fire service creates new fires, updates data for a fire, deletes fires, and gets/lists fires
Usage:
    %s [globalflags] log COMMAND [flags]

COMMAND:
    create: Add a log to existing fire
    get: Get log and data friends
    update: Update something about a log specifically
    delete: Delete some log specifically
    list: List fires

Additional help:
    %s log COMMAND --help
`, os.Args[0], os.Args[0])
}
func logCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] log create -body JSON

Add a log to existing fire
    -body JSON: 

Example:
    `+os.Args[0]+` log create --body '{
      "addedAt": "1981-02-18T04:47:49Z",
      "createdAt": "1992-06-27T21:53:41Z",
      "fireID": 5692558848136296972,
      "id": 6577929380304453415,
      "name": "Doloremque qui non.",
      "size": "M",
      "updatedAt": "1985-09-10T06:26:16Z",
      "weather": {
         "createdAt": "2002-05-27T23:56:45Z",
         "dewPoint": {
            "unit": "K",
            "value": 1984646352
         },
         "fireID": 4618423612491386150,
         "humidity": 1322058308,
         "id": 743463055768621296,
         "logID": 3982859360461558219,
         "temperature": {
            "unit": "K",
            "value": 1984646352
         },
         "weatherTime": "1986-11-28T16:39:22Z",
         "weatherType": "Windy",
         "wind": {
            "direction": "E",
            "speed": 762000299,
            "unit": "KPH"
         }
      }
   }'
`, os.Args[0])
}

func logGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] log get -body JSON -id INT

Get log and data friends
    -body JSON: 
    -id INT: id

Example:
    `+os.Args[0]+` log get --body '{
      "addedAt": "2002-04-25T04:42:22Z",
      "createdAt": "1998-12-11T12:17:29Z",
      "fireID": 6713603813374072266,
      "name": "Deserunt et et cumque nesciunt.",
      "size": "XL",
      "updatedAt": "1986-02-10T00:00:19Z",
      "weather": {
         "createdAt": "2002-05-27T23:56:45Z",
         "dewPoint": {
            "unit": "K",
            "value": 1984646352
         },
         "fireID": 4618423612491386150,
         "humidity": 1322058308,
         "id": 743463055768621296,
         "logID": 3982859360461558219,
         "temperature": {
            "unit": "K",
            "value": 1984646352
         },
         "weatherTime": "1986-11-28T16:39:22Z",
         "weatherType": "Windy",
         "wind": {
            "direction": "E",
            "speed": 762000299,
            "unit": "KPH"
         }
      }
   }' --id 2528098659287120732
`, os.Args[0])
}

func logUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] log update -body JSON -id INT

Update something about a log specifically
    -body JSON: 
    -id INT: id

Example:
    `+os.Args[0]+` log update --body '{
      "addedAt": "1985-10-08T03:04:17Z",
      "createdAt": "2015-07-05T16:03:55Z",
      "fireID": 9073437711020541164,
      "name": "Labore iusto.",
      "size": "XL",
      "updatedAt": "2016-01-31T04:23:21Z",
      "weather": {
         "createdAt": "2002-05-27T23:56:45Z",
         "dewPoint": {
            "unit": "K",
            "value": 1984646352
         },
         "fireID": 4618423612491386150,
         "humidity": 1322058308,
         "id": 743463055768621296,
         "logID": 3982859360461558219,
         "temperature": {
            "unit": "K",
            "value": 1984646352
         },
         "weatherTime": "1986-11-28T16:39:22Z",
         "weatherType": "Windy",
         "wind": {
            "direction": "E",
            "speed": 762000299,
            "unit": "KPH"
         }
      }
   }' --id 824684199293100925
`, os.Args[0])
}

func logDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] log delete -body JSON -id INT

Delete some log specifically
    -body JSON: 
    -id INT: id

Example:
    `+os.Args[0]+` log delete --body '{
      "addedAt": "2013-07-20T12:54:06Z",
      "createdAt": "2000-03-07T22:36:50Z",
      "fireID": 3117523544869095399,
      "name": "Rerum et a qui.",
      "size": "L",
      "updatedAt": "2002-08-31T02:52:53Z",
      "weather": {
         "createdAt": "2002-05-27T23:56:45Z",
         "dewPoint": {
            "unit": "K",
            "value": 1984646352
         },
         "fireID": 4618423612491386150,
         "humidity": 1322058308,
         "id": 743463055768621296,
         "logID": 3982859360461558219,
         "temperature": {
            "unit": "K",
            "value": 1984646352
         },
         "weatherTime": "1986-11-28T16:39:22Z",
         "weatherType": "Windy",
         "wind": {
            "direction": "E",
            "speed": 762000299,
            "unit": "KPH"
         }
      }
   }' --id 597154936493788160
`, os.Args[0])
}

func logListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] log list -body JSON

List fires
    -body JSON: 

Example:
    `+os.Args[0]+` log list --body '{
      "filters": {
         "end": [
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            }
         ],
         "name": [
            {
               "key": "In reprehenderit veniam asperiores aliquid.",
               "operator": "!=",
               "value": "Quod in iusto."
            },
            {
               "key": "In reprehenderit veniam asperiores aliquid.",
               "operator": "!=",
               "value": "Quod in iusto."
            },
            {
               "key": "In reprehenderit veniam asperiores aliquid.",
               "operator": "!=",
               "value": "Quod in iusto."
            }
         ],
         "start": [
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            }
         ]
      },
      "pagination": {
         "limit": 6359683262686384173,
         "page": 448613042018020648
      },
      "search": {
         "description": "Quos atque incidunt quo reiciendis nisi magnam.",
         "name": "Qui aliquam."
      },
      "sort": {
         "end": "ASC, DESC",
         "id": "ASC, DESC",
         "start": "ASC, DESC"
      }
   }'
`, os.Args[0])
}

// fireUsage displays the usage of the fire command and its subcommands.
func fireUsage() {
	fmt.Fprintf(os.Stderr, `The fire service creates new fires, updates data for a fire, deletes fires, and gets/lists fires
Usage:
    %s [globalflags] fire COMMAND [flags]

COMMAND:
    create: Create a fire and optional payloads
    get: Get fire and data friends
    update: Update something about a fire specifically
    delete: Update something about a fire specifically
    list: List fires
    get-weather-for-fire: Gets a list of weather for a fire
    get-logs-for-fire: Gets a list of logs for a fire

Additional help:
    %s fire COMMAND --help
`, os.Args[0], os.Args[0])
}
func fireCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fire create -body JSON

Create a fire and optional payloads
    -body JSON: 

Example:
    `+os.Args[0]+` fire create --body '{
      "createdAt": "2009-11-20T04:16:19Z",
      "deletedAt": "1991-05-21T08:03:01Z",
      "description": "Dicta est itaque.",
      "end": "2010-07-05T02:19:15Z",
      "id": 8063970344505608117,
      "name": "Eveniet possimus error a et qui.",
      "start": "1987-01-21T21:20:18Z",
      "updatedAt": "1992-01-15T01:43:50Z"
   }'
`, os.Args[0])
}

func fireGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fire get -id INT

Get fire and data friends
    -id INT: fire id

Example:
    `+os.Args[0]+` fire get --id 2268876966347922658
`, os.Args[0])
}

func fireUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fire update -body JSON -id INT

Update something about a fire specifically
    -body JSON: 
    -id INT: id

Example:
    `+os.Args[0]+` fire update --body '{
      "createdAt": "2007-11-26T14:19:47Z",
      "deletedAt": "2006-04-23T22:29:09Z",
      "description": "Atque ipsum qui saepe voluptatem.",
      "end": "1989-04-28T18:56:23Z",
      "name": "Sint accusamus.",
      "start": "1980-12-04T06:55:30Z",
      "updatedAt": "1991-03-19T17:24:25Z"
   }' --id 7129527481062190853
`, os.Args[0])
}

func fireDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fire delete -id INT

Update something about a fire specifically
    -id INT: fire id

Example:
    `+os.Args[0]+` fire delete --id 1235195792582555513
`, os.Args[0])
}

func fireListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fire list -body JSON

List fires
    -body JSON: 

Example:
    `+os.Args[0]+` fire list --body '{
      "filters": {
         "end": [
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            }
         ],
         "name": [
            {
               "key": "In reprehenderit veniam asperiores aliquid.",
               "operator": "!=",
               "value": "Quod in iusto."
            },
            {
               "key": "In reprehenderit veniam asperiores aliquid.",
               "operator": "!=",
               "value": "Quod in iusto."
            },
            {
               "key": "In reprehenderit veniam asperiores aliquid.",
               "operator": "!=",
               "value": "Quod in iusto."
            },
            {
               "key": "In reprehenderit veniam asperiores aliquid.",
               "operator": "!=",
               "value": "Quod in iusto."
            }
         ],
         "start": [
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            }
         ]
      },
      "pagination": {
         "limit": 8489130491829772062,
         "page": 7661817797635690513
      },
      "search": {
         "description": "Ab quas.",
         "name": "Error laborum."
      },
      "sort": {
         "end": "ASC, DESC",
         "id": "ASC, DESC",
         "start": "ASC, DESC"
      }
   }'
`, os.Args[0])
}

func fireGetWeatherForFireUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fire get-weather-for-fire -id INT

Gets a list of weather for a fire
    -id INT: fire id

Example:
    `+os.Args[0]+` fire get-weather-for-fire --id 8807139012384553209
`, os.Args[0])
}

func fireGetLogsForFireUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] fire get-logs-for-fire -id INT

Gets a list of logs for a fire
    -id INT: fire id

Example:
    `+os.Args[0]+` fire get-logs-for-fire --id 2274613654502925465
`, os.Args[0])
}

// weatherUsage displays the usage of the weather command and its subcommands.
func weatherUsage() {
	fmt.Fprintf(os.Stderr, `The fire service creates new weather datas for fires, and gets/lists weather data
Usage:
    %s [globalflags] weather COMMAND [flags]

COMMAND:
    create: Create a weather observation and optional payloads
    get: Get a specific piece of weather data
    update: Update something about a weather observation specifically
    delete: Delete a weather observation
    list: List weather

Additional help:
    %s weather COMMAND --help
`, os.Args[0], os.Args[0])
}
func weatherCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] weather create -body JSON

Create a weather observation and optional payloads
    -body JSON: 

Example:
    `+os.Args[0]+` weather create --body '{
      "createdAt": "1996-03-11T03:59:22Z",
      "dewPoint": {
         "unit": "K",
         "value": 1984646352
      },
      "fireID": 4892500656643819481,
      "humidity": 1395475403,
      "id": 1328387204821531769,
      "logID": 4669324356095458075,
      "temperature": {
         "unit": "K",
         "value": 1984646352
      },
      "weatherTime": "2002-06-28T14:09:40Z",
      "weatherType": "Windy",
      "wind": {
         "direction": "E",
         "speed": 762000299,
         "unit": "KPH"
      }
   }'
`, os.Args[0])
}

func weatherGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] weather get -body JSON -id INT

Get a specific piece of weather data
    -body JSON: 
    -id INT: id

Example:
    `+os.Args[0]+` weather get --body '{
      "createdAt": "2011-07-09T07:26:45Z",
      "dewPoint": {
         "unit": "K",
         "value": 1984646352
      },
      "fireID": 7644816922455962702,
      "humidity": 1153174560,
      "logID": 1051516125295673869,
      "temperature": {
         "unit": "K",
         "value": 1984646352
      },
      "weatherTime": "1987-04-15T11:02:40Z",
      "weatherType": "Windy",
      "wind": {
         "direction": "E",
         "speed": 762000299,
         "unit": "KPH"
      }
   }' --id 3310934989796531201
`, os.Args[0])
}

func weatherUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] weather update -body JSON -id INT

Update something about a weather observation specifically
    -body JSON: 
    -id INT: id

Example:
    `+os.Args[0]+` weather update --body '{
      "createdAt": "1971-10-16T16:36:42Z",
      "dewPoint": {
         "unit": "K",
         "value": 1984646352
      },
      "fireID": 1916387546735013310,
      "humidity": 1852166951,
      "logID": 8850231432476937971,
      "temperature": {
         "unit": "K",
         "value": 1984646352
      },
      "weatherTime": "1976-08-27T17:34:24Z",
      "weatherType": "Cloudy",
      "wind": {
         "direction": "E",
         "speed": 762000299,
         "unit": "KPH"
      }
   }' --id 8166153144612841369
`, os.Args[0])
}

func weatherDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] weather delete -body JSON -id INT

Delete a weather observation
    -body JSON: 
    -id INT: id

Example:
    `+os.Args[0]+` weather delete --body '{
      "createdAt": "1996-07-13T01:19:59Z",
      "dewPoint": {
         "unit": "K",
         "value": 1984646352
      },
      "fireID": 5913042865191821757,
      "humidity": 1192088750,
      "logID": 821447477319398918,
      "temperature": {
         "unit": "K",
         "value": 1984646352
      },
      "weatherTime": "1991-11-28T03:06:21Z",
      "weatherType": "Windy",
      "wind": {
         "direction": "E",
         "speed": 762000299,
         "unit": "KPH"
      }
   }' --id 7272230065274353033
`, os.Args[0])
}

func weatherListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] weather list -body JSON

List weather
    -body JSON: 

Example:
    `+os.Args[0]+` weather list --body '{
      "filters": {
         "humidity": [
            {
               "key": "Soluta deserunt.",
               "operator": "\u003c=",
               "value": 7933183697958230931
            },
            {
               "key": "Soluta deserunt.",
               "operator": "\u003c=",
               "value": 7933183697958230931
            }
         ],
         "temperature": [
            {
               "key": "Soluta deserunt.",
               "operator": "\u003c=",
               "value": 7933183697958230931
            },
            {
               "key": "Soluta deserunt.",
               "operator": "\u003c=",
               "value": 7933183697958230931
            },
            {
               "key": "Soluta deserunt.",
               "operator": "\u003c=",
               "value": 7933183697958230931
            },
            {
               "key": "Soluta deserunt.",
               "operator": "\u003c=",
               "value": 7933183697958230931
            }
         ],
         "time": [
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            },
            {
               "key": "2004-12-16T02:06:51Z",
               "operator": "=",
               "value": 3707112604264870284
            }
         ],
         "windSpeed": [
            {
               "key": "Soluta deserunt.",
               "operator": "\u003c=",
               "value": 7933183697958230931
            },
            {
               "key": "Soluta deserunt.",
               "operator": "\u003c=",
               "value": 7933183697958230931
            }
         ]
      },
      "pagination": {
         "limit": 3704434890186808598,
         "page": 2662948493226508770
      },
      "search": {
         "description": "Repellat voluptatum animi quae aut voluptate est.",
         "name": "Rerum quas omnis."
      },
      "sort": {
         "id": "ASC, DESC"
      }
   }'
`, os.Args[0])
}
