// Code generated by goa v3.3.1, DO NOT EDIT.
//
// weather gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package server

import (
	"context"

	weatherpb "github.com/NeedMoreVolume/FireTracker/gen/grpc/weather/pb"
	weather "github.com/NeedMoreVolume/FireTracker/gen/weather"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateResponse encodes responses from the "weather" service "create"
// endpoint.
func EncodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*weather.Weather)
	if !ok {
		return nil, goagrpc.ErrInvalidType("weather", "create", "*weather.Weather", v)
	}
	resp := NewCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "weather" service "create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *weatherpb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*weatherpb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("weather", "create", "*weatherpb.CreateRequest", v)
		}
		if err := ValidateCreateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *weather.Weather
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeGetResponse encodes responses from the "weather" service "get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*weather.Weather)
	if !ok {
		return nil, goagrpc.ErrInvalidType("weather", "get", "*weather.Weather", v)
	}
	resp := NewGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "weather" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *weatherpb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*weatherpb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("weather", "get", "*weatherpb.GetRequest", v)
		}
		if err := ValidateGetRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *weather.Weather
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "weather" service "update"
// endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*weather.Weather)
	if !ok {
		return nil, goagrpc.ErrInvalidType("weather", "update", "*weather.Weather", v)
	}
	resp := NewUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "weather" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *weatherpb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*weatherpb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("weather", "update", "*weatherpb.UpdateRequest", v)
		}
		if err := ValidateUpdateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *weather.Weather
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "weather" service "delete"
// endpoint.
func EncodeDeleteResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewDeleteResponse()
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "weather" service "delete"
// endpoint.
func DecodeDeleteRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *weatherpb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*weatherpb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("weather", "delete", "*weatherpb.DeleteRequest", v)
		}
		if err := ValidateDeleteRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *weather.Weather
	{
		payload = NewDeletePayload(message)
	}
	return payload, nil
}

// EncodeListResponse encodes responses from the "weather" service "list"
// endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*weather.WeatherList)
	if !ok {
		return nil, goagrpc.ErrInvalidType("weather", "list", "*weather.WeatherList", v)
	}
	resp := NewListResponse(result)
	return resp, nil
}

// DecodeListRequest decodes requests sent to "weather" service "list" endpoint.
func DecodeListRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *weatherpb.ListRequest
		ok      bool
	)
	{
		if message, ok = v.(*weatherpb.ListRequest); !ok {
			return nil, goagrpc.ErrInvalidType("weather", "list", "*weatherpb.ListRequest", v)
		}
		if err := ValidateListRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *weather.WeatherListPayload
	{
		payload = NewListPayload(message)
	}
	return payload, nil
}
