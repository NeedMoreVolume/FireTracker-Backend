// Code generated by goa v3.3.1, DO NOT EDIT.
//
// weather gRPC client CLI support package
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"encoding/json"
	"fmt"

	weatherpb "github.com/NeedMoreVolume/FireTracker/gen/grpc/weather/pb"
	weather "github.com/NeedMoreVolume/FireTracker/gen/weather"
)

// BuildCreatePayload builds the payload for the weather create endpoint from
// CLI flags.
func BuildCreatePayload(weatherCreateMessage string) (*weather.Weather, error) {
	var err error
	var message weatherpb.CreateRequest
	{
		if weatherCreateMessage != "" {
			err = json.Unmarshal([]byte(weatherCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2020-01-02T00:00:00Z\",\n      \"dewPoint\": {\n         \"unit\": \"C\",\n         \"value\": 20\n      },\n      \"fireID\": 1,\n      \"humidity\": 1500,\n      \"id\": 1,\n      \"logID\": 1,\n      \"temperature\": {\n         \"unit\": \"C\",\n         \"value\": 20\n      },\n      \"weatherTime\": \"2020-01-02T00:00:00Z\",\n      \"weatherType\": \"Raining\",\n      \"wind\": {\n         \"direction\": \"SE\",\n         \"speed\": 15,\n         \"unit\": \"KPH\"\n      }\n   }'")
			}
		}
	}
	v := &weather.Weather{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		v.FireID = &fireIDptr
	}
	if message.LogId != 0 {
		logIDptr := int(message.LogId)
		v.LogID = &logIDptr
	}
	if message.Humidity != 0 {
		v.Humidity = &message.Humidity
	}
	if message.WeatherType != "" {
		v.WeatherType = &message.WeatherType
	}
	if message.WeatherTime != "" {
		v.WeatherTime = &message.WeatherTime
	}
	if message.Temperature != nil {
		v.Temperature = protobufWeatherpbTemperatureToWeatherTemperature(message.Temperature)
	}
	if message.DewPoint != nil {
		v.DewPoint = protobufWeatherpbTemperatureToWeatherTemperature(message.DewPoint)
	}
	if message.Wind != nil {
		v.Wind = protobufWeatherpbWindToWeatherWind(message.Wind)
	}

	return v, nil
}

// BuildGetPayload builds the payload for the weather get endpoint from CLI
// flags.
func BuildGetPayload(weatherGetMessage string) (*weather.Weather, error) {
	var err error
	var message weatherpb.GetRequest
	{
		if weatherGetMessage != "" {
			err = json.Unmarshal([]byte(weatherGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2020-01-02T00:00:00Z\",\n      \"dewPoint\": {\n         \"unit\": \"C\",\n         \"value\": 20\n      },\n      \"fireID\": 1,\n      \"humidity\": 1500,\n      \"id\": 1,\n      \"logID\": 1,\n      \"temperature\": {\n         \"unit\": \"C\",\n         \"value\": 20\n      },\n      \"weatherTime\": \"2020-01-02T00:00:00Z\",\n      \"weatherType\": \"Sunny\",\n      \"wind\": {\n         \"direction\": \"SE\",\n         \"speed\": 15,\n         \"unit\": \"KPH\"\n      }\n   }'")
			}
		}
	}
	v := &weather.Weather{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		v.FireID = &fireIDptr
	}
	if message.LogId != 0 {
		logIDptr := int(message.LogId)
		v.LogID = &logIDptr
	}
	if message.Humidity != 0 {
		v.Humidity = &message.Humidity
	}
	if message.WeatherType != "" {
		v.WeatherType = &message.WeatherType
	}
	if message.WeatherTime != "" {
		v.WeatherTime = &message.WeatherTime
	}
	if message.Temperature != nil {
		v.Temperature = protobufWeatherpbTemperatureToWeatherTemperature(message.Temperature)
	}
	if message.DewPoint != nil {
		v.DewPoint = protobufWeatherpbTemperatureToWeatherTemperature(message.DewPoint)
	}
	if message.Wind != nil {
		v.Wind = protobufWeatherpbWindToWeatherWind(message.Wind)
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the weather update endpoint from
// CLI flags.
func BuildUpdatePayload(weatherUpdateMessage string) (*weather.Weather, error) {
	var err error
	var message weatherpb.UpdateRequest
	{
		if weatherUpdateMessage != "" {
			err = json.Unmarshal([]byte(weatherUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2020-01-02T00:00:00Z\",\n      \"dewPoint\": {\n         \"unit\": \"C\",\n         \"value\": 20\n      },\n      \"fireID\": 1,\n      \"humidity\": 1500,\n      \"id\": 1,\n      \"logID\": 1,\n      \"temperature\": {\n         \"unit\": \"C\",\n         \"value\": 20\n      },\n      \"weatherTime\": \"2020-01-02T00:00:00Z\",\n      \"weatherType\": \"Windy\",\n      \"wind\": {\n         \"direction\": \"SE\",\n         \"speed\": 15,\n         \"unit\": \"KPH\"\n      }\n   }'")
			}
		}
	}
	v := &weather.Weather{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		v.FireID = &fireIDptr
	}
	if message.LogId != 0 {
		logIDptr := int(message.LogId)
		v.LogID = &logIDptr
	}
	if message.Humidity != 0 {
		v.Humidity = &message.Humidity
	}
	if message.WeatherType != "" {
		v.WeatherType = &message.WeatherType
	}
	if message.WeatherTime != "" {
		v.WeatherTime = &message.WeatherTime
	}
	if message.Temperature != nil {
		v.Temperature = protobufWeatherpbTemperatureToWeatherTemperature(message.Temperature)
	}
	if message.DewPoint != nil {
		v.DewPoint = protobufWeatherpbTemperatureToWeatherTemperature(message.DewPoint)
	}
	if message.Wind != nil {
		v.Wind = protobufWeatherpbWindToWeatherWind(message.Wind)
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the weather delete endpoint from
// CLI flags.
func BuildDeletePayload(weatherDeleteMessage string) (*weather.Weather, error) {
	var err error
	var message weatherpb.DeleteRequest
	{
		if weatherDeleteMessage != "" {
			err = json.Unmarshal([]byte(weatherDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2020-01-02T00:00:00Z\",\n      \"dewPoint\": {\n         \"unit\": \"C\",\n         \"value\": 20\n      },\n      \"fireID\": 1,\n      \"humidity\": 1500,\n      \"id\": 1,\n      \"logID\": 1,\n      \"temperature\": {\n         \"unit\": \"C\",\n         \"value\": 20\n      },\n      \"weatherTime\": \"2020-01-02T00:00:00Z\",\n      \"weatherType\": \"Sunny\",\n      \"wind\": {\n         \"direction\": \"SE\",\n         \"speed\": 15,\n         \"unit\": \"KPH\"\n      }\n   }'")
			}
		}
	}
	v := &weather.Weather{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		v.FireID = &fireIDptr
	}
	if message.LogId != 0 {
		logIDptr := int(message.LogId)
		v.LogID = &logIDptr
	}
	if message.Humidity != 0 {
		v.Humidity = &message.Humidity
	}
	if message.WeatherType != "" {
		v.WeatherType = &message.WeatherType
	}
	if message.WeatherTime != "" {
		v.WeatherTime = &message.WeatherTime
	}
	if message.Temperature != nil {
		v.Temperature = protobufWeatherpbTemperatureToWeatherTemperature(message.Temperature)
	}
	if message.DewPoint != nil {
		v.DewPoint = protobufWeatherpbTemperatureToWeatherTemperature(message.DewPoint)
	}
	if message.Wind != nil {
		v.Wind = protobufWeatherpbWindToWeatherWind(message.Wind)
	}

	return v, nil
}

// BuildListPayload builds the payload for the weather list endpoint from CLI
// flags.
func BuildListPayload(weatherListMessage string) (*weather.WeatherListPayload, error) {
	var err error
	var message weatherpb.ListRequest
	{
		if weatherListMessage != "" {
			err = json.Unmarshal([]byte(weatherListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"filters\": {\n         \"humidity\": [\n            {\n               \"key\": \"id\",\n               \"operator\": \"\\u003c\",\n               \"value\": 1\n            },\n            {\n               \"key\": \"id\",\n               \"operator\": \"\\u003c\",\n               \"value\": 1\n            }\n         ],\n         \"temperature\": [\n            {\n               \"key\": \"id\",\n               \"operator\": \"\\u003c\",\n               \"value\": 1\n            },\n            {\n               \"key\": \"id\",\n               \"operator\": \"\\u003c\",\n               \"value\": 1\n            },\n            {\n               \"key\": \"id\",\n               \"operator\": \"\\u003c\",\n               \"value\": 1\n            }\n         ],\n         \"time\": [\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"\\u003c\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            },\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"\\u003c\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            }\n         ],\n         \"windSpeed\": [\n            {\n               \"key\": \"id\",\n               \"operator\": \"\\u003c\",\n               \"value\": 1\n            },\n            {\n               \"key\": \"id\",\n               \"operator\": \"\\u003c\",\n               \"value\": 1\n            }\n         ]\n      },\n      \"pagination\": {\n         \"limit\": 10,\n         \"page\": 1\n      },\n      \"search\": {\n         \"description\": \"Almost blew the fire out!\",\n         \"name\": \"Windy Part\"\n      },\n      \"sort\": {\n         \"id\": \"ASC, DESC\"\n      }\n   }'")
			}
		}
	}
	v := &weather.WeatherListPayload{}
	if message.Filters != nil {
		v.Filters = protobufWeatherpbWeatherFiltersToWeatherWeatherFilters(message.Filters)
	}
	if message.Search != nil {
		v.Search = protobufWeatherpbWeatherSearchToWeatherWeatherSearch(message.Search)
	}
	if message.Sort != nil {
		v.Sort = protobufWeatherpbWeatherSortsToWeatherWeatherSorts(message.Sort)
	}
	if message.Pagination != nil {
		v.Pagination = protobufWeatherpbWeatherPaginationToWeatherWeatherPagination(message.Pagination)
	}

	return v, nil
}
