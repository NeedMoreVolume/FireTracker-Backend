// Code generated by goa v3.3.1, DO NOT EDIT.
//
// weather gRPC client types
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	weatherpb "github.com/NeedMoreVolume/FireTracker/gen/grpc/weather/pb"
	weather "github.com/NeedMoreVolume/FireTracker/gen/weather"
	goa "goa.design/goa/v3/pkg"
)

// NewCreateRequest builds the gRPC request type from the payload of the
// "create" endpoint of the "weather" service.
func NewCreateRequest(payload *weather.Weather) *weatherpb.CreateRequest {
	message := &weatherpb.CreateRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.FireID != nil {
		message.FireId = int32(*payload.FireID)
	}
	if payload.LogID != nil {
		message.LogId = int32(*payload.LogID)
	}
	if payload.Humidity != nil {
		message.Humidity = *payload.Humidity
	}
	if payload.WeatherType != nil {
		message.WeatherType = *payload.WeatherType
	}
	if payload.WeatherTime != nil {
		message.WeatherTime = *payload.WeatherTime
	}
	if payload.Temperature != nil {
		message.Temperature = svcWeatherTemperatureToWeatherpbTemperature(payload.Temperature)
	}
	if payload.DewPoint != nil {
		message.DewPoint = svcWeatherTemperatureToWeatherpbTemperature(payload.DewPoint)
	}
	if payload.Wind != nil {
		message.Wind = svcWeatherWindToWeatherpbWind(payload.Wind)
	}
	return message
}

// NewCreateResult builds the result type of the "create" endpoint of the
// "weather" service from the gRPC response type.
func NewCreateResult(message *weatherpb.CreateResponse) *weather.Weather {
	result := &weather.Weather{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		result.FireID = &fireIDptr
	}
	if message.LogId != 0 {
		logIDptr := int(message.LogId)
		result.LogID = &logIDptr
	}
	if message.Humidity != 0 {
		result.Humidity = &message.Humidity
	}
	if message.WeatherType != "" {
		result.WeatherType = &message.WeatherType
	}
	if message.WeatherTime != "" {
		result.WeatherTime = &message.WeatherTime
	}
	if message.Temperature != nil {
		result.Temperature = protobufWeatherpbTemperatureToWeatherTemperature(message.Temperature)
	}
	if message.DewPoint != nil {
		result.DewPoint = protobufWeatherpbTemperatureToWeatherTemperature(message.DewPoint)
	}
	if message.Wind != nil {
		result.Wind = protobufWeatherpbWindToWeatherWind(message.Wind)
	}
	return result
}

// NewGetRequest builds the gRPC request type from the payload of the "get"
// endpoint of the "weather" service.
func NewGetRequest(payload *weather.Weather) *weatherpb.GetRequest {
	message := &weatherpb.GetRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.FireID != nil {
		message.FireId = int32(*payload.FireID)
	}
	if payload.LogID != nil {
		message.LogId = int32(*payload.LogID)
	}
	if payload.Humidity != nil {
		message.Humidity = *payload.Humidity
	}
	if payload.WeatherType != nil {
		message.WeatherType = *payload.WeatherType
	}
	if payload.WeatherTime != nil {
		message.WeatherTime = *payload.WeatherTime
	}
	if payload.Temperature != nil {
		message.Temperature = svcWeatherTemperatureToWeatherpbTemperature(payload.Temperature)
	}
	if payload.DewPoint != nil {
		message.DewPoint = svcWeatherTemperatureToWeatherpbTemperature(payload.DewPoint)
	}
	if payload.Wind != nil {
		message.Wind = svcWeatherWindToWeatherpbWind(payload.Wind)
	}
	return message
}

// NewGetResult builds the result type of the "get" endpoint of the "weather"
// service from the gRPC response type.
func NewGetResult(message *weatherpb.GetResponse) *weather.Weather {
	result := &weather.Weather{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		result.FireID = &fireIDptr
	}
	if message.LogId != 0 {
		logIDptr := int(message.LogId)
		result.LogID = &logIDptr
	}
	if message.Humidity != 0 {
		result.Humidity = &message.Humidity
	}
	if message.WeatherType != "" {
		result.WeatherType = &message.WeatherType
	}
	if message.WeatherTime != "" {
		result.WeatherTime = &message.WeatherTime
	}
	if message.Temperature != nil {
		result.Temperature = protobufWeatherpbTemperatureToWeatherTemperature(message.Temperature)
	}
	if message.DewPoint != nil {
		result.DewPoint = protobufWeatherpbTemperatureToWeatherTemperature(message.DewPoint)
	}
	if message.Wind != nil {
		result.Wind = protobufWeatherpbWindToWeatherWind(message.Wind)
	}
	return result
}

// NewUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "weather" service.
func NewUpdateRequest(payload *weather.Weather) *weatherpb.UpdateRequest {
	message := &weatherpb.UpdateRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.FireID != nil {
		message.FireId = int32(*payload.FireID)
	}
	if payload.LogID != nil {
		message.LogId = int32(*payload.LogID)
	}
	if payload.Humidity != nil {
		message.Humidity = *payload.Humidity
	}
	if payload.WeatherType != nil {
		message.WeatherType = *payload.WeatherType
	}
	if payload.WeatherTime != nil {
		message.WeatherTime = *payload.WeatherTime
	}
	if payload.Temperature != nil {
		message.Temperature = svcWeatherTemperatureToWeatherpbTemperature(payload.Temperature)
	}
	if payload.DewPoint != nil {
		message.DewPoint = svcWeatherTemperatureToWeatherpbTemperature(payload.DewPoint)
	}
	if payload.Wind != nil {
		message.Wind = svcWeatherWindToWeatherpbWind(payload.Wind)
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the
// "weather" service from the gRPC response type.
func NewUpdateResult(message *weatherpb.UpdateResponse) *weather.Weather {
	result := &weather.Weather{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		result.FireID = &fireIDptr
	}
	if message.LogId != 0 {
		logIDptr := int(message.LogId)
		result.LogID = &logIDptr
	}
	if message.Humidity != 0 {
		result.Humidity = &message.Humidity
	}
	if message.WeatherType != "" {
		result.WeatherType = &message.WeatherType
	}
	if message.WeatherTime != "" {
		result.WeatherTime = &message.WeatherTime
	}
	if message.Temperature != nil {
		result.Temperature = protobufWeatherpbTemperatureToWeatherTemperature(message.Temperature)
	}
	if message.DewPoint != nil {
		result.DewPoint = protobufWeatherpbTemperatureToWeatherTemperature(message.DewPoint)
	}
	if message.Wind != nil {
		result.Wind = protobufWeatherpbWindToWeatherWind(message.Wind)
	}
	return result
}

// NewDeleteRequest builds the gRPC request type from the payload of the
// "delete" endpoint of the "weather" service.
func NewDeleteRequest(payload *weather.Weather) *weatherpb.DeleteRequest {
	message := &weatherpb.DeleteRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.FireID != nil {
		message.FireId = int32(*payload.FireID)
	}
	if payload.LogID != nil {
		message.LogId = int32(*payload.LogID)
	}
	if payload.Humidity != nil {
		message.Humidity = *payload.Humidity
	}
	if payload.WeatherType != nil {
		message.WeatherType = *payload.WeatherType
	}
	if payload.WeatherTime != nil {
		message.WeatherTime = *payload.WeatherTime
	}
	if payload.Temperature != nil {
		message.Temperature = svcWeatherTemperatureToWeatherpbTemperature(payload.Temperature)
	}
	if payload.DewPoint != nil {
		message.DewPoint = svcWeatherTemperatureToWeatherpbTemperature(payload.DewPoint)
	}
	if payload.Wind != nil {
		message.Wind = svcWeatherWindToWeatherpbWind(payload.Wind)
	}
	return message
}

// NewListRequest builds the gRPC request type from the payload of the "list"
// endpoint of the "weather" service.
func NewListRequest(payload *weather.WeatherListPayload) *weatherpb.ListRequest {
	message := &weatherpb.ListRequest{}
	if payload.Filters != nil {
		message.Filters = svcWeatherWeatherFiltersToWeatherpbWeatherFilters(payload.Filters)
	}
	if payload.Search != nil {
		message.Search = svcWeatherWeatherSearchToWeatherpbWeatherSearch(payload.Search)
	}
	if payload.Sort != nil {
		message.Sort = svcWeatherWeatherSortsToWeatherpbWeatherSorts(payload.Sort)
	}
	if payload.Pagination != nil {
		message.Pagination = svcWeatherWeatherPaginationToWeatherpbWeatherPagination(payload.Pagination)
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "weather"
// service from the gRPC response type.
func NewListResult(message *weatherpb.ListResponse) *weather.WeatherList {
	result := &weather.WeatherList{}
	if message.Weathers != nil {
		result.Weathers = make([]*weather.Weather, len(message.Weathers))
		for i, val := range message.Weathers {
			result.Weathers[i] = &weather.Weather{}
			if val.Id != 0 {
				idptr := int(val.Id)
				result.Weathers[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				result.Weathers[i].CreatedAt = &val.CreatedAt
			}
			if val.FireId != 0 {
				fireIDptr := int(val.FireId)
				result.Weathers[i].FireID = &fireIDptr
			}
			if val.LogId != 0 {
				logIDptr := int(val.LogId)
				result.Weathers[i].LogID = &logIDptr
			}
			if val.Humidity != 0 {
				result.Weathers[i].Humidity = &val.Humidity
			}
			if val.WeatherType != "" {
				result.Weathers[i].WeatherType = &val.WeatherType
			}
			if val.WeatherTime != "" {
				result.Weathers[i].WeatherTime = &val.WeatherTime
			}
			if val.Temperature != nil {
				result.Weathers[i].Temperature = protobufWeatherpbTemperatureToWeatherTemperature(val.Temperature)
			}
			if val.DewPoint != nil {
				result.Weathers[i].DewPoint = protobufWeatherpbTemperatureToWeatherTemperature(val.DewPoint)
			}
			if val.Wind != nil {
				result.Weathers[i].Wind = protobufWeatherpbWindToWeatherWind(val.Wind)
			}
		}
	}
	if message.Pagination != nil {
		result.Pagination = protobufWeatherpbPaginationToWeatherPagination(message.Pagination)
	}
	return result
}

// ValidateTemperature runs the validations defined on Temperature.
func ValidateTemperature(message *weatherpb.Temperature) (err error) {
	if message.Unit != "" {
		if !(message.Unit == "K" || message.Unit == "C" || message.Unit == "F") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.unit", message.Unit, []interface{}{"K", "C", "F"}))
		}
	}
	return
}

// ValidateWind runs the validations defined on Wind.
func ValidateWind(message *weatherpb.Wind) (err error) {
	if message.Direction != "" {
		if !(message.Direction == "S" || message.Direction == "SE" || message.Direction == "E" || message.Direction == "NE" || message.Direction == "N" || message.Direction == "NW" || message.Direction == "W" || message.Direction == "SW") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.direction", message.Direction, []interface{}{"S", "SE", "E", "NE", "N", "NW", "W", "SW"}))
		}
	}
	if message.Unit != "" {
		if !(message.Unit == "KPH" || message.Unit == "MPH") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.unit", message.Unit, []interface{}{"KPH", "MPH"}))
		}
	}
	return
}

// ValidateCreateResponse runs the validations defined on CreateResponse.
func ValidateCreateResponse(message *weatherpb.CreateResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.Temperature != nil {
		if err2 := ValidateTemperature(message.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.DewPoint != nil {
		if err2 := ValidateTemperature(message.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.Wind != nil {
		if err2 := ValidateWind(message.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.WeatherType != "" {
		if !(message.WeatherType == "Sunny" || message.WeatherType == "Cloudy" || message.WeatherType == "Raining" || message.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.weatherType", message.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if message.WeatherTime != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.weatherTime", message.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateGetResponse runs the validations defined on GetResponse.
func ValidateGetResponse(message *weatherpb.GetResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.Temperature != nil {
		if err2 := ValidateTemperature(message.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.DewPoint != nil {
		if err2 := ValidateTemperature(message.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.Wind != nil {
		if err2 := ValidateWind(message.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.WeatherType != "" {
		if !(message.WeatherType == "Sunny" || message.WeatherType == "Cloudy" || message.WeatherType == "Raining" || message.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.weatherType", message.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if message.WeatherTime != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.weatherTime", message.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateResponse runs the validations defined on UpdateResponse.
func ValidateUpdateResponse(message *weatherpb.UpdateResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.Temperature != nil {
		if err2 := ValidateTemperature(message.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.DewPoint != nil {
		if err2 := ValidateTemperature(message.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.Wind != nil {
		if err2 := ValidateWind(message.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.WeatherType != "" {
		if !(message.WeatherType == "Sunny" || message.WeatherType == "Cloudy" || message.WeatherType == "Raining" || message.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.weatherType", message.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if message.WeatherTime != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.weatherTime", message.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateListResponse runs the validations defined on ListResponse.
func ValidateListResponse(message *weatherpb.ListResponse) (err error) {
	for _, e := range message.Weathers {
		if e != nil {
			if err2 := ValidateWeather2(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateWeather2 runs the validations defined on Weather2.
func ValidateWeather2(message *weatherpb.Weather2) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.Temperature != nil {
		if err2 := ValidateTemperature(message.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.DewPoint != nil {
		if err2 := ValidateTemperature(message.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.Wind != nil {
		if err2 := ValidateWind(message.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.WeatherType != "" {
		if !(message.WeatherType == "Sunny" || message.WeatherType == "Cloudy" || message.WeatherType == "Raining" || message.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.weatherType", message.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if message.WeatherTime != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.weatherTime", message.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidatePagination runs the validations defined on Pagination.
func ValidatePagination(message *weatherpb.Pagination) (err error) {

	return
}

// protobufWeatherpbTemperatureToWeatherTemperature builds a value of type
// *weather.Temperature from a value of type *weatherpb.Temperature.
func protobufWeatherpbTemperatureToWeatherTemperature(v *weatherpb.Temperature) *weather.Temperature {
	if v == nil {
		return nil
	}
	res := &weather.Temperature{}
	if v.Unit != "" {
		res.Unit = &v.Unit
	}
	if v.Value != 0 {
		res.Value = &v.Value
	}

	return res
}

// protobufWeatherpbWindToWeatherWind builds a value of type *weather.Wind from
// a value of type *weatherpb.Wind.
func protobufWeatherpbWindToWeatherWind(v *weatherpb.Wind) *weather.Wind {
	if v == nil {
		return nil
	}
	res := &weather.Wind{}
	if v.Speed != 0 {
		res.Speed = &v.Speed
	}
	if v.Direction != "" {
		res.Direction = &v.Direction
	}
	if v.Unit != "" {
		res.Unit = &v.Unit
	}

	return res
}

// svcWeatherTemperatureToWeatherpbTemperature builds a value of type
// *weatherpb.Temperature from a value of type *weather.Temperature.
func svcWeatherTemperatureToWeatherpbTemperature(v *weather.Temperature) *weatherpb.Temperature {
	if v == nil {
		return nil
	}
	res := &weatherpb.Temperature{}
	if v.Unit != nil {
		res.Unit = *v.Unit
	}
	if v.Value != nil {
		res.Value = *v.Value
	}

	return res
}

// svcWeatherWindToWeatherpbWind builds a value of type *weatherpb.Wind from a
// value of type *weather.Wind.
func svcWeatherWindToWeatherpbWind(v *weather.Wind) *weatherpb.Wind {
	if v == nil {
		return nil
	}
	res := &weatherpb.Wind{}
	if v.Speed != nil {
		res.Speed = *v.Speed
	}
	if v.Direction != nil {
		res.Direction = *v.Direction
	}
	if v.Unit != nil {
		res.Unit = *v.Unit
	}

	return res
}

// protobufWeatherpbWeatherFiltersToWeatherWeatherFilters builds a value of
// type *weather.WeatherFilters from a value of type *weatherpb.WeatherFilters.
func protobufWeatherpbWeatherFiltersToWeatherWeatherFilters(v *weatherpb.WeatherFilters) *weather.WeatherFilters {
	res := &weather.WeatherFilters{}
	if v.Time != nil {
		res.Time = make([]*weather.TimeFilter, len(v.Time))
		for i, val := range v.Time {
			res.Time[i] = &weather.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.WindSpeed != nil {
		res.WindSpeed = make([]*weather.NumberFilter, len(v.WindSpeed))
		for i, val := range v.WindSpeed {
			res.WindSpeed[i] = &weather.NumberFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int(val.Value),
			}
		}
	}
	if v.Temperature != nil {
		res.Temperature = make([]*weather.NumberFilter, len(v.Temperature))
		for i, val := range v.Temperature {
			res.Temperature[i] = &weather.NumberFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int(val.Value),
			}
		}
	}
	if v.Humidity != nil {
		res.Humidity = make([]*weather.NumberFilter, len(v.Humidity))
		for i, val := range v.Humidity {
			res.Humidity[i] = &weather.NumberFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int(val.Value),
			}
		}
	}

	return res
}

// protobufWeatherpbWeatherSearchToWeatherWeatherSearch builds a value of type
// *weather.WeatherSearch from a value of type *weatherpb.WeatherSearch.
func protobufWeatherpbWeatherSearchToWeatherWeatherSearch(v *weatherpb.WeatherSearch) *weather.WeatherSearch {
	res := &weather.WeatherSearch{}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.Description != "" {
		res.Description = &v.Description
	}

	return res
}

// protobufWeatherpbWeatherSortsToWeatherWeatherSorts builds a value of type
// *weather.WeatherSorts from a value of type *weatherpb.WeatherSorts.
func protobufWeatherpbWeatherSortsToWeatherWeatherSorts(v *weatherpb.WeatherSorts) *weather.WeatherSorts {
	res := &weather.WeatherSorts{}
	if v.Id != "" {
		res.ID = &v.Id
	}

	return res
}

// protobufWeatherpbWeatherPaginationToWeatherWeatherPagination builds a value
// of type *weather.WeatherPagination from a value of type
// *weatherpb.WeatherPagination.
func protobufWeatherpbWeatherPaginationToWeatherWeatherPagination(v *weatherpb.WeatherPagination) *weather.WeatherPagination {
	res := &weather.WeatherPagination{
		Page:  int(v.Page),
		Limit: int(v.Limit),
	}

	return res
}

// svcWeatherWeatherFiltersToWeatherpbWeatherFilters builds a value of type
// *weatherpb.WeatherFilters from a value of type *weather.WeatherFilters.
func svcWeatherWeatherFiltersToWeatherpbWeatherFilters(v *weather.WeatherFilters) *weatherpb.WeatherFilters {
	res := &weatherpb.WeatherFilters{}
	if v.Time != nil {
		res.Time = make([]*weatherpb.TimeFilter, len(v.Time))
		for i, val := range v.Time {
			res.Time[i] = &weatherpb.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.WindSpeed != nil {
		res.WindSpeed = make([]*weatherpb.NumberFilter, len(v.WindSpeed))
		for i, val := range v.WindSpeed {
			res.WindSpeed[i] = &weatherpb.NumberFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int32(val.Value),
			}
		}
	}
	if v.Temperature != nil {
		res.Temperature = make([]*weatherpb.NumberFilter, len(v.Temperature))
		for i, val := range v.Temperature {
			res.Temperature[i] = &weatherpb.NumberFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int32(val.Value),
			}
		}
	}
	if v.Humidity != nil {
		res.Humidity = make([]*weatherpb.NumberFilter, len(v.Humidity))
		for i, val := range v.Humidity {
			res.Humidity[i] = &weatherpb.NumberFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int32(val.Value),
			}
		}
	}

	return res
}

// svcWeatherWeatherSearchToWeatherpbWeatherSearch builds a value of type
// *weatherpb.WeatherSearch from a value of type *weather.WeatherSearch.
func svcWeatherWeatherSearchToWeatherpbWeatherSearch(v *weather.WeatherSearch) *weatherpb.WeatherSearch {
	res := &weatherpb.WeatherSearch{}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.Description != nil {
		res.Description = *v.Description
	}

	return res
}

// svcWeatherWeatherSortsToWeatherpbWeatherSorts builds a value of type
// *weatherpb.WeatherSorts from a value of type *weather.WeatherSorts.
func svcWeatherWeatherSortsToWeatherpbWeatherSorts(v *weather.WeatherSorts) *weatherpb.WeatherSorts {
	res := &weatherpb.WeatherSorts{}
	if v.ID != nil {
		res.Id = *v.ID
	}

	return res
}

// svcWeatherWeatherPaginationToWeatherpbWeatherPagination builds a value of
// type *weatherpb.WeatherPagination from a value of type
// *weather.WeatherPagination.
func svcWeatherWeatherPaginationToWeatherpbWeatherPagination(v *weather.WeatherPagination) *weatherpb.WeatherPagination {
	res := &weatherpb.WeatherPagination{
		Page:  int32(v.Page),
		Limit: int32(v.Limit),
	}

	return res
}

// svcWeatherPaginationToWeatherpbPagination builds a value of type
// *weatherpb.Pagination from a value of type *weather.Pagination.
func svcWeatherPaginationToWeatherpbPagination(v *weather.Pagination) *weatherpb.Pagination {
	if v == nil {
		return nil
	}
	res := &weatherpb.Pagination{}
	if v.Total != nil {
		res.Total = int32(*v.Total)
	}
	if v.Page != nil {
		res.Page = int32(*v.Page)
	}
	if v.Limit != nil {
		res.Limit = int32(*v.Limit)
	}

	return res
}

// protobufWeatherpbPaginationToWeatherPagination builds a value of type
// *weather.Pagination from a value of type *weatherpb.Pagination.
func protobufWeatherpbPaginationToWeatherPagination(v *weatherpb.Pagination) *weather.Pagination {
	if v == nil {
		return nil
	}
	res := &weather.Pagination{}
	if v.Total != 0 {
		totalptr := int(v.Total)
		res.Total = &totalptr
	}
	if v.Page != 0 {
		pageptr := int(v.Page)
		res.Page = &pageptr
	}
	if v.Limit != 0 {
		limitptr := int(v.Limit)
		res.Limit = &limitptr
	}

	return res
}
