// Code generated by goa v3.3.1, DO NOT EDIT.
//
// log gRPC client types
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	logpb "github.com/NeedMoreVolume/FireTracker/gen/grpc/log/pb"
	log "github.com/NeedMoreVolume/FireTracker/gen/log"
	goa "goa.design/goa/v3/pkg"
)

// NewCreateRequest builds the gRPC request type from the payload of the
// "create" endpoint of the "log" service.
func NewCreateRequest(payload *log.Log) *logpb.CreateRequest {
	message := &logpb.CreateRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.UpdatedAt != nil {
		message.UpdatedAt = *payload.UpdatedAt
	}
	if payload.Name != nil {
		message.Name = *payload.Name
	}
	if payload.Size != nil {
		message.Size = *payload.Size
	}
	if payload.FireID != nil {
		message.FireId = int32(*payload.FireID)
	}
	if payload.AddedAt != nil {
		message.AddedAt = *payload.AddedAt
	}
	if payload.Weather != nil {
		message.Weather = svcLogWeatherToLogpbWeather(payload.Weather)
	}
	return message
}

// NewCreateResult builds the result type of the "create" endpoint of the "log"
// service from the gRPC response type.
func NewCreateResult(message *logpb.CreateResponse) *log.Log {
	result := &log.Log{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		result.UpdatedAt = &message.UpdatedAt
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.Size != "" {
		result.Size = &message.Size
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		result.FireID = &fireIDptr
	}
	if message.AddedAt != "" {
		result.AddedAt = &message.AddedAt
	}
	if message.Weather != nil {
		result.Weather = protobufLogpbWeatherToLogWeather(message.Weather)
	}
	return result
}

// NewGetRequest builds the gRPC request type from the payload of the "get"
// endpoint of the "log" service.
func NewGetRequest(payload *log.Log) *logpb.GetRequest {
	message := &logpb.GetRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.UpdatedAt != nil {
		message.UpdatedAt = *payload.UpdatedAt
	}
	if payload.Name != nil {
		message.Name = *payload.Name
	}
	if payload.Size != nil {
		message.Size = *payload.Size
	}
	if payload.FireID != nil {
		message.FireId = int32(*payload.FireID)
	}
	if payload.AddedAt != nil {
		message.AddedAt = *payload.AddedAt
	}
	if payload.Weather != nil {
		message.Weather = svcLogWeatherToLogpbWeather(payload.Weather)
	}
	return message
}

// NewGetResult builds the result type of the "get" endpoint of the "log"
// service from the gRPC response type.
func NewGetResult(message *logpb.GetResponse) *log.Log {
	result := &log.Log{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		result.UpdatedAt = &message.UpdatedAt
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.Size != "" {
		result.Size = &message.Size
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		result.FireID = &fireIDptr
	}
	if message.AddedAt != "" {
		result.AddedAt = &message.AddedAt
	}
	if message.Weather != nil {
		result.Weather = protobufLogpbWeatherToLogWeather(message.Weather)
	}
	return result
}

// NewUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "log" service.
func NewUpdateRequest(payload *log.Log) *logpb.UpdateRequest {
	message := &logpb.UpdateRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.UpdatedAt != nil {
		message.UpdatedAt = *payload.UpdatedAt
	}
	if payload.Name != nil {
		message.Name = *payload.Name
	}
	if payload.Size != nil {
		message.Size = *payload.Size
	}
	if payload.FireID != nil {
		message.FireId = int32(*payload.FireID)
	}
	if payload.AddedAt != nil {
		message.AddedAt = *payload.AddedAt
	}
	if payload.Weather != nil {
		message.Weather = svcLogWeatherToLogpbWeather(payload.Weather)
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the "log"
// service from the gRPC response type.
func NewUpdateResult(message *logpb.UpdateResponse) *log.Log {
	result := &log.Log{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		result.UpdatedAt = &message.UpdatedAt
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.Size != "" {
		result.Size = &message.Size
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		result.FireID = &fireIDptr
	}
	if message.AddedAt != "" {
		result.AddedAt = &message.AddedAt
	}
	if message.Weather != nil {
		result.Weather = protobufLogpbWeatherToLogWeather(message.Weather)
	}
	return result
}

// NewDeleteRequest builds the gRPC request type from the payload of the
// "delete" endpoint of the "log" service.
func NewDeleteRequest(payload *log.Log) *logpb.DeleteRequest {
	message := &logpb.DeleteRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.UpdatedAt != nil {
		message.UpdatedAt = *payload.UpdatedAt
	}
	if payload.Name != nil {
		message.Name = *payload.Name
	}
	if payload.Size != nil {
		message.Size = *payload.Size
	}
	if payload.FireID != nil {
		message.FireId = int32(*payload.FireID)
	}
	if payload.AddedAt != nil {
		message.AddedAt = *payload.AddedAt
	}
	if payload.Weather != nil {
		message.Weather = svcLogWeatherToLogpbWeather(payload.Weather)
	}
	return message
}

// NewListRequest builds the gRPC request type from the payload of the "list"
// endpoint of the "log" service.
func NewListRequest(payload *log.LogListPayload) *logpb.ListRequest {
	message := &logpb.ListRequest{}
	if payload.Filters != nil {
		message.Filters = svcLogLogFiltersToLogpbLogFilters(payload.Filters)
	}
	if payload.Search != nil {
		message.Search = svcLogLogSearchToLogpbLogSearch(payload.Search)
	}
	if payload.Sort != nil {
		message.Sort = svcLogLogSortsToLogpbLogSorts(payload.Sort)
	}
	if payload.Pagination != nil {
		message.Pagination = svcLogLogPaginationToLogpbLogPagination(payload.Pagination)
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "log"
// service from the gRPC response type.
func NewListResult(message *logpb.ListResponse) *log.LogList {
	result := &log.LogList{}
	if message.Logs != nil {
		result.Logs = make([]*log.Log, len(message.Logs))
		for i, val := range message.Logs {
			result.Logs[i] = &log.Log{}
			if val.Id != 0 {
				idptr := int(val.Id)
				result.Logs[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				result.Logs[i].CreatedAt = &val.CreatedAt
			}
			if val.UpdatedAt != "" {
				result.Logs[i].UpdatedAt = &val.UpdatedAt
			}
			if val.Name != "" {
				result.Logs[i].Name = &val.Name
			}
			if val.Size != "" {
				result.Logs[i].Size = &val.Size
			}
			if val.FireId != 0 {
				fireIDptr := int(val.FireId)
				result.Logs[i].FireID = &fireIDptr
			}
			if val.AddedAt != "" {
				result.Logs[i].AddedAt = &val.AddedAt
			}
			if val.Weather != nil {
				result.Logs[i].Weather = protobufLogpbWeatherToLogWeather(val.Weather)
			}
		}
	}
	if message.Pagination != nil {
		result.Pagination = protobufLogpbPaginationToLogPagination(message.Pagination)
	}
	return result
}

// ValidateWeather runs the validations defined on Weather.
func ValidateWeather(message *logpb.Weather) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.Temperature != nil {
		if err2 := ValidateTemperature(message.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.DewPoint != nil {
		if err2 := ValidateTemperature(message.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.Wind != nil {
		if err2 := ValidateWind(message.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.WeatherType != "" {
		if !(message.WeatherType == "Sunny" || message.WeatherType == "Cloudy" || message.WeatherType == "Raining" || message.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.weatherType", message.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if message.WeatherTime != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.weatherTime", message.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateTemperature runs the validations defined on Temperature.
func ValidateTemperature(message *logpb.Temperature) (err error) {
	if message.Unit != "" {
		if !(message.Unit == "K" || message.Unit == "C" || message.Unit == "F") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.unit", message.Unit, []interface{}{"K", "C", "F"}))
		}
	}
	return
}

// ValidateWind runs the validations defined on Wind.
func ValidateWind(message *logpb.Wind) (err error) {
	if message.Direction != "" {
		if !(message.Direction == "S" || message.Direction == "SE" || message.Direction == "E" || message.Direction == "NE" || message.Direction == "N" || message.Direction == "NW" || message.Direction == "W" || message.Direction == "SW") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.direction", message.Direction, []interface{}{"S", "SE", "E", "NE", "N", "NW", "W", "SW"}))
		}
	}
	if message.Unit != "" {
		if !(message.Unit == "KPH" || message.Unit == "MPH") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.unit", message.Unit, []interface{}{"KPH", "MPH"}))
		}
	}
	return
}

// ValidateCreateResponse runs the validations defined on CreateResponse.
func ValidateCreateResponse(message *logpb.CreateResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.Size != "" {
		if !(message.Size == "S" || message.Size == "M" || message.Size == "L" || message.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.size", message.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if message.AddedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.addedAt", message.AddedAt, goa.FormatDateTime))
	}
	if message.Weather != nil {
		if err2 := ValidateWeather(message.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetResponse runs the validations defined on GetResponse.
func ValidateGetResponse(message *logpb.GetResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.Size != "" {
		if !(message.Size == "S" || message.Size == "M" || message.Size == "L" || message.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.size", message.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if message.AddedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.addedAt", message.AddedAt, goa.FormatDateTime))
	}
	if message.Weather != nil {
		if err2 := ValidateWeather(message.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateResponse runs the validations defined on UpdateResponse.
func ValidateUpdateResponse(message *logpb.UpdateResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.Size != "" {
		if !(message.Size == "S" || message.Size == "M" || message.Size == "L" || message.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.size", message.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if message.AddedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.addedAt", message.AddedAt, goa.FormatDateTime))
	}
	if message.Weather != nil {
		if err2 := ValidateWeather(message.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListResponse runs the validations defined on ListResponse.
func ValidateListResponse(message *logpb.ListResponse) (err error) {
	for _, e := range message.Logs {
		if e != nil {
			if err2 := ValidateLog2(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateLog2 runs the validations defined on Log2.
func ValidateLog2(message *logpb.Log2) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.Size != "" {
		if !(message.Size == "S" || message.Size == "M" || message.Size == "L" || message.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.size", message.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if message.AddedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.addedAt", message.AddedAt, goa.FormatDateTime))
	}
	if message.Weather != nil {
		if err2 := ValidateWeather(message.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePagination runs the validations defined on Pagination.
func ValidatePagination(message *logpb.Pagination) (err error) {

	return
}

// protobufLogpbWeatherToLogWeather builds a value of type *log.Weather from a
// value of type *logpb.Weather.
func protobufLogpbWeatherToLogWeather(v *logpb.Weather) *log.Weather {
	if v == nil {
		return nil
	}
	res := &log.Weather{}
	if v.Id != 0 {
		idptr := int(v.Id)
		res.ID = &idptr
	}
	if v.CreatedAt != "" {
		res.CreatedAt = &v.CreatedAt
	}
	if v.FireId != 0 {
		fireIDptr := int(v.FireId)
		res.FireID = &fireIDptr
	}
	if v.LogId != 0 {
		logIDptr := int(v.LogId)
		res.LogID = &logIDptr
	}
	if v.Humidity != 0 {
		res.Humidity = &v.Humidity
	}
	if v.WeatherType != "" {
		res.WeatherType = &v.WeatherType
	}
	if v.WeatherTime != "" {
		res.WeatherTime = &v.WeatherTime
	}
	if v.Temperature != nil {
		res.Temperature = protobufLogpbTemperatureToLogTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = protobufLogpbTemperatureToLogTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = protobufLogpbWindToLogWind(v.Wind)
	}

	return res
}

// protobufLogpbTemperatureToLogTemperature builds a value of type
// *log.Temperature from a value of type *logpb.Temperature.
func protobufLogpbTemperatureToLogTemperature(v *logpb.Temperature) *log.Temperature {
	if v == nil {
		return nil
	}
	res := &log.Temperature{}
	if v.Unit != "" {
		res.Unit = &v.Unit
	}
	if v.Value != 0 {
		res.Value = &v.Value
	}

	return res
}

// protobufLogpbWindToLogWind builds a value of type *log.Wind from a value of
// type *logpb.Wind.
func protobufLogpbWindToLogWind(v *logpb.Wind) *log.Wind {
	if v == nil {
		return nil
	}
	res := &log.Wind{}
	if v.Speed != 0 {
		res.Speed = &v.Speed
	}
	if v.Direction != "" {
		res.Direction = &v.Direction
	}
	if v.Unit != "" {
		res.Unit = &v.Unit
	}

	return res
}

// svcLogWeatherToLogpbWeather builds a value of type *logpb.Weather from a
// value of type *log.Weather.
func svcLogWeatherToLogpbWeather(v *log.Weather) *logpb.Weather {
	if v == nil {
		return nil
	}
	res := &logpb.Weather{}
	if v.ID != nil {
		res.Id = int32(*v.ID)
	}
	if v.CreatedAt != nil {
		res.CreatedAt = *v.CreatedAt
	}
	if v.FireID != nil {
		res.FireId = int32(*v.FireID)
	}
	if v.LogID != nil {
		res.LogId = int32(*v.LogID)
	}
	if v.Humidity != nil {
		res.Humidity = *v.Humidity
	}
	if v.WeatherType != nil {
		res.WeatherType = *v.WeatherType
	}
	if v.WeatherTime != nil {
		res.WeatherTime = *v.WeatherTime
	}
	if v.Temperature != nil {
		res.Temperature = svcLogTemperatureToLogpbTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = svcLogTemperatureToLogpbTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = svcLogWindToLogpbWind(v.Wind)
	}

	return res
}

// svcLogTemperatureToLogpbTemperature builds a value of type
// *logpb.Temperature from a value of type *log.Temperature.
func svcLogTemperatureToLogpbTemperature(v *log.Temperature) *logpb.Temperature {
	if v == nil {
		return nil
	}
	res := &logpb.Temperature{}
	if v.Unit != nil {
		res.Unit = *v.Unit
	}
	if v.Value != nil {
		res.Value = *v.Value
	}

	return res
}

// svcLogWindToLogpbWind builds a value of type *logpb.Wind from a value of
// type *log.Wind.
func svcLogWindToLogpbWind(v *log.Wind) *logpb.Wind {
	if v == nil {
		return nil
	}
	res := &logpb.Wind{}
	if v.Speed != nil {
		res.Speed = *v.Speed
	}
	if v.Direction != nil {
		res.Direction = *v.Direction
	}
	if v.Unit != nil {
		res.Unit = *v.Unit
	}

	return res
}

// protobufLogpbLogFiltersToLogLogFilters builds a value of type
// *log.LogFilters from a value of type *logpb.LogFilters.
func protobufLogpbLogFiltersToLogLogFilters(v *logpb.LogFilters) *log.LogFilters {
	res := &log.LogFilters{}
	if v.Name != nil {
		res.Name = make([]*log.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = &log.StringFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.Start != nil {
		res.Start = make([]*log.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = &log.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.End != nil {
		res.End = make([]*log.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = &log.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}

	return res
}

// protobufLogpbLogSearchToLogLogSearch builds a value of type *log.LogSearch
// from a value of type *logpb.LogSearch.
func protobufLogpbLogSearchToLogLogSearch(v *logpb.LogSearch) *log.LogSearch {
	res := &log.LogSearch{}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.Description != "" {
		res.Description = &v.Description
	}

	return res
}

// protobufLogpbLogSortsToLogLogSorts builds a value of type *log.LogSorts from
// a value of type *logpb.LogSorts.
func protobufLogpbLogSortsToLogLogSorts(v *logpb.LogSorts) *log.LogSorts {
	res := &log.LogSorts{}
	if v.Id != "" {
		res.ID = &v.Id
	}
	if v.Start != "" {
		res.Start = &v.Start
	}
	if v.End != "" {
		res.End = &v.End
	}

	return res
}

// protobufLogpbLogPaginationToLogLogPagination builds a value of type
// *log.LogPagination from a value of type *logpb.LogPagination.
func protobufLogpbLogPaginationToLogLogPagination(v *logpb.LogPagination) *log.LogPagination {
	res := &log.LogPagination{
		Page:  int(v.Page),
		Limit: int(v.Limit),
	}

	return res
}

// svcLogLogFiltersToLogpbLogFilters builds a value of type *logpb.LogFilters
// from a value of type *log.LogFilters.
func svcLogLogFiltersToLogpbLogFilters(v *log.LogFilters) *logpb.LogFilters {
	res := &logpb.LogFilters{}
	if v.Name != nil {
		res.Name = make([]*logpb.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = &logpb.StringFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.Start != nil {
		res.Start = make([]*logpb.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = &logpb.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.End != nil {
		res.End = make([]*logpb.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = &logpb.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}

	return res
}

// svcLogLogSearchToLogpbLogSearch builds a value of type *logpb.LogSearch from
// a value of type *log.LogSearch.
func svcLogLogSearchToLogpbLogSearch(v *log.LogSearch) *logpb.LogSearch {
	res := &logpb.LogSearch{}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.Description != nil {
		res.Description = *v.Description
	}

	return res
}

// svcLogLogSortsToLogpbLogSorts builds a value of type *logpb.LogSorts from a
// value of type *log.LogSorts.
func svcLogLogSortsToLogpbLogSorts(v *log.LogSorts) *logpb.LogSorts {
	res := &logpb.LogSorts{}
	if v.ID != nil {
		res.Id = *v.ID
	}
	if v.Start != nil {
		res.Start = *v.Start
	}
	if v.End != nil {
		res.End = *v.End
	}

	return res
}

// svcLogLogPaginationToLogpbLogPagination builds a value of type
// *logpb.LogPagination from a value of type *log.LogPagination.
func svcLogLogPaginationToLogpbLogPagination(v *log.LogPagination) *logpb.LogPagination {
	res := &logpb.LogPagination{
		Page:  int32(v.Page),
		Limit: int32(v.Limit),
	}

	return res
}

// svcLogPaginationToLogpbPagination builds a value of type *logpb.Pagination
// from a value of type *log.Pagination.
func svcLogPaginationToLogpbPagination(v *log.Pagination) *logpb.Pagination {
	if v == nil {
		return nil
	}
	res := &logpb.Pagination{}
	if v.Total != nil {
		res.Total = int32(*v.Total)
	}
	if v.Page != nil {
		res.Page = int32(*v.Page)
	}
	if v.Limit != nil {
		res.Limit = int32(*v.Limit)
	}

	return res
}

// protobufLogpbPaginationToLogPagination builds a value of type
// *log.Pagination from a value of type *logpb.Pagination.
func protobufLogpbPaginationToLogPagination(v *logpb.Pagination) *log.Pagination {
	if v == nil {
		return nil
	}
	res := &log.Pagination{}
	if v.Total != 0 {
		totalptr := int(v.Total)
		res.Total = &totalptr
	}
	if v.Page != 0 {
		pageptr := int(v.Page)
		res.Page = &pageptr
	}
	if v.Limit != 0 {
		limitptr := int(v.Limit)
		res.Limit = &limitptr
	}

	return res
}
