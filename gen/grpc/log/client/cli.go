// Code generated by goa v3.2.5, DO NOT EDIT.
//
// log gRPC client CLI support package
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"encoding/json"
	"fmt"

	logpb "github.com/NeedMoreVolume/FireTracker/gen/grpc/log/pb"
	log "github.com/NeedMoreVolume/FireTracker/gen/log"
)

// BuildCreatePayload builds the payload for the log create endpoint from CLI
// flags.
func BuildCreatePayload(logCreateMessage string) (*log.Log, error) {
	var err error
	var message logpb.CreateRequest
	{
		if logCreateMessage != "" {
			err = json.Unmarshal([]byte(logCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"addedAt\": \"1977-05-06T14:52:07Z\",\n      \"createdAt\": \"1994-05-07T16:07:26Z\",\n      \"fireID\": 6736437899940715186,\n      \"id\": 1913927608535220508,\n      \"name\": \"Illo ut et excepturi et adipisci.\",\n      \"size\": \"S\",\n      \"updatedAt\": \"1981-01-10T06:48:05Z\",\n      \"weather\": {\n         \"createdAt\": \"2013-03-31T00:00:31Z\",\n         \"dewPoint\": {\n            \"unit\": \"F\",\n            \"value\": 727998182\n         },\n         \"fireID\": 5021708757207724489,\n         \"humidity\": 1961871777,\n         \"id\": 4545438651844921453,\n         \"logID\": 1167531932544065094,\n         \"temperature\": {\n            \"unit\": \"F\",\n            \"value\": 727998182\n         },\n         \"weatherTime\": \"2003-07-28T19:16:39Z\",\n         \"weatherType\": \"Windy\",\n         \"wind\": {\n            \"direction\": \"SE\",\n            \"speed\": 740748338,\n            \"unit\": \"MPH\"\n         }\n      }\n   }'")
			}
		}
	}
	v := &log.Log{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		v.UpdatedAt = &message.UpdatedAt
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Size != "" {
		v.Size = &message.Size
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		v.FireID = &fireIDptr
	}
	if message.AddedAt != "" {
		v.AddedAt = &message.AddedAt
	}
	if message.Weather != nil {
		v.Weather = protobufLogpbWeatherToLogWeather(message.Weather)
	}

	return v, nil
}

// BuildGetPayload builds the payload for the log get endpoint from CLI flags.
func BuildGetPayload(logGetMessage string) (*log.Log, error) {
	var err error
	var message logpb.GetRequest
	{
		if logGetMessage != "" {
			err = json.Unmarshal([]byte(logGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"addedAt\": \"1993-04-24T08:45:18Z\",\n      \"createdAt\": \"1998-06-02T03:20:26Z\",\n      \"fireID\": 6408389337853557776,\n      \"id\": 4532697486990614527,\n      \"name\": \"Qui dignissimos laborum.\",\n      \"size\": \"S\",\n      \"updatedAt\": \"1987-07-27T11:51:34Z\",\n      \"weather\": {\n         \"createdAt\": \"2013-03-31T00:00:31Z\",\n         \"dewPoint\": {\n            \"unit\": \"F\",\n            \"value\": 727998182\n         },\n         \"fireID\": 5021708757207724489,\n         \"humidity\": 1961871777,\n         \"id\": 4545438651844921453,\n         \"logID\": 1167531932544065094,\n         \"temperature\": {\n            \"unit\": \"F\",\n            \"value\": 727998182\n         },\n         \"weatherTime\": \"2003-07-28T19:16:39Z\",\n         \"weatherType\": \"Windy\",\n         \"wind\": {\n            \"direction\": \"SE\",\n            \"speed\": 740748338,\n            \"unit\": \"MPH\"\n         }\n      }\n   }'")
			}
		}
	}
	v := &log.Log{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		v.UpdatedAt = &message.UpdatedAt
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Size != "" {
		v.Size = &message.Size
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		v.FireID = &fireIDptr
	}
	if message.AddedAt != "" {
		v.AddedAt = &message.AddedAt
	}
	if message.Weather != nil {
		v.Weather = protobufLogpbWeatherToLogWeather(message.Weather)
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the log update endpoint from CLI
// flags.
func BuildUpdatePayload(logUpdateMessage string) (*log.Log, error) {
	var err error
	var message logpb.UpdateRequest
	{
		if logUpdateMessage != "" {
			err = json.Unmarshal([]byte(logUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"addedAt\": \"1972-02-16T20:27:18Z\",\n      \"createdAt\": \"2012-09-13T17:23:27Z\",\n      \"fireID\": 2482404165864863284,\n      \"id\": 5531877719792856122,\n      \"name\": \"Rem et asperiores et qui qui quibusdam.\",\n      \"size\": \"M\",\n      \"updatedAt\": \"1992-08-03T04:42:16Z\",\n      \"weather\": {\n         \"createdAt\": \"2013-03-31T00:00:31Z\",\n         \"dewPoint\": {\n            \"unit\": \"F\",\n            \"value\": 727998182\n         },\n         \"fireID\": 5021708757207724489,\n         \"humidity\": 1961871777,\n         \"id\": 4545438651844921453,\n         \"logID\": 1167531932544065094,\n         \"temperature\": {\n            \"unit\": \"F\",\n            \"value\": 727998182\n         },\n         \"weatherTime\": \"2003-07-28T19:16:39Z\",\n         \"weatherType\": \"Windy\",\n         \"wind\": {\n            \"direction\": \"SE\",\n            \"speed\": 740748338,\n            \"unit\": \"MPH\"\n         }\n      }\n   }'")
			}
		}
	}
	v := &log.Log{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		v.UpdatedAt = &message.UpdatedAt
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Size != "" {
		v.Size = &message.Size
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		v.FireID = &fireIDptr
	}
	if message.AddedAt != "" {
		v.AddedAt = &message.AddedAt
	}
	if message.Weather != nil {
		v.Weather = protobufLogpbWeatherToLogWeather(message.Weather)
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the log delete endpoint from CLI
// flags.
func BuildDeletePayload(logDeleteMessage string) (*log.Log, error) {
	var err error
	var message logpb.DeleteRequest
	{
		if logDeleteMessage != "" {
			err = json.Unmarshal([]byte(logDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"addedAt\": \"1994-10-18T19:42:57Z\",\n      \"createdAt\": \"1980-09-14T10:41:37Z\",\n      \"fireID\": 8736365977478103614,\n      \"id\": 7218447836258405858,\n      \"name\": \"Eos soluta.\",\n      \"size\": \"L\",\n      \"updatedAt\": \"2003-01-06T12:49:53Z\",\n      \"weather\": {\n         \"createdAt\": \"2013-03-31T00:00:31Z\",\n         \"dewPoint\": {\n            \"unit\": \"F\",\n            \"value\": 727998182\n         },\n         \"fireID\": 5021708757207724489,\n         \"humidity\": 1961871777,\n         \"id\": 4545438651844921453,\n         \"logID\": 1167531932544065094,\n         \"temperature\": {\n            \"unit\": \"F\",\n            \"value\": 727998182\n         },\n         \"weatherTime\": \"2003-07-28T19:16:39Z\",\n         \"weatherType\": \"Windy\",\n         \"wind\": {\n            \"direction\": \"SE\",\n            \"speed\": 740748338,\n            \"unit\": \"MPH\"\n         }\n      }\n   }'")
			}
		}
	}
	v := &log.Log{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		v.UpdatedAt = &message.UpdatedAt
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Size != "" {
		v.Size = &message.Size
	}
	if message.FireId != 0 {
		fireIDptr := int(message.FireId)
		v.FireID = &fireIDptr
	}
	if message.AddedAt != "" {
		v.AddedAt = &message.AddedAt
	}
	if message.Weather != nil {
		v.Weather = protobufLogpbWeatherToLogWeather(message.Weather)
	}

	return v, nil
}

// BuildListPayload builds the payload for the log list endpoint from CLI flags.
func BuildListPayload(logListMessage string) (*log.LogListPayload, error) {
	var err error
	var message logpb.ListRequest
	{
		if logListMessage != "" {
			err = json.Unmarshal([]byte(logListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"filters\": {\n         \"end\": [\n            {\n               \"key\": \"1996-06-12T08:40:44Z\",\n               \"operator\": \"\\u003e=\",\n               \"value\": 5573547598936979342\n            },\n            {\n               \"key\": \"1996-06-12T08:40:44Z\",\n               \"operator\": \"\\u003e=\",\n               \"value\": 5573547598936979342\n            },\n            {\n               \"key\": \"1996-06-12T08:40:44Z\",\n               \"operator\": \"\\u003e=\",\n               \"value\": 5573547598936979342\n            }\n         ],\n         \"name\": [\n            {\n               \"key\": \"Qui hic.\",\n               \"operator\": \"!=\",\n               \"value\": \"Quia sint eligendi eum architecto sint est.\"\n            },\n            {\n               \"key\": \"Qui hic.\",\n               \"operator\": \"!=\",\n               \"value\": \"Quia sint eligendi eum architecto sint est.\"\n            },\n            {\n               \"key\": \"Qui hic.\",\n               \"operator\": \"!=\",\n               \"value\": \"Quia sint eligendi eum architecto sint est.\"\n            },\n            {\n               \"key\": \"Qui hic.\",\n               \"operator\": \"!=\",\n               \"value\": \"Quia sint eligendi eum architecto sint est.\"\n            }\n         ],\n         \"start\": [\n            {\n               \"key\": \"1996-06-12T08:40:44Z\",\n               \"operator\": \"\\u003e=\",\n               \"value\": 5573547598936979342\n            },\n            {\n               \"key\": \"1996-06-12T08:40:44Z\",\n               \"operator\": \"\\u003e=\",\n               \"value\": 5573547598936979342\n            }\n         ]\n      },\n      \"pagination\": {\n         \"limit\": 2313523494388906239,\n         \"page\": 7128205722982720020\n      },\n      \"search\": {\n         \"description\": \"Exercitationem animi.\",\n         \"name\": \"Et ipsa nihil officia accusantium beatae doloremque.\"\n      },\n      \"sort\": {\n         \"end\": \"ASC, DESC\",\n         \"id\": \"ASC, DESC\",\n         \"start\": \"ASC, DESC\"\n      }\n   }'")
			}
		}
	}
	v := &log.LogListPayload{}
	if message.Filters != nil {
		v.Filters = protobufLogpbLogFiltersToLogLogFilters(message.Filters)
	}
	if message.Search != nil {
		v.Search = protobufLogpbLogSearchToLogLogSearch(message.Search)
	}
	if message.Sort != nil {
		v.Sort = protobufLogpbLogSortsToLogLogSorts(message.Sort)
	}
	if message.Pagination != nil {
		v.Pagination = protobufLogpbLogPaginationToLogLogPagination(message.Pagination)
	}

	return v, nil
}
