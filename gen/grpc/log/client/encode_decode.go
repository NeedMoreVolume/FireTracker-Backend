// Code generated by goa v3.3.1, DO NOT EDIT.
//
// log gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"context"

	logpb "github.com/NeedMoreVolume/FireTracker/gen/grpc/log/pb"
	log "github.com/NeedMoreVolume/FireTracker/gen/log"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildCreateFunc builds the remote method to invoke for "log" service
// "create" endpoint.
func BuildCreateFunc(grpccli logpb.LogClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Create(ctx, reqpb.(*logpb.CreateRequest), opts...)
		}
		return grpccli.Create(ctx, &logpb.CreateRequest{}, opts...)
	}
}

// EncodeCreateRequest encodes requests sent to log create endpoint.
func EncodeCreateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*log.Log)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "create", "*log.Log", v)
	}
	return NewCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the log create endpoint.
func DecodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*logpb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "create", "*logpb.CreateResponse", v)
	}
	if err := ValidateCreateResponse(message); err != nil {
		return nil, err
	}
	res := NewCreateResult(message)
	return res, nil
}

// BuildGetFunc builds the remote method to invoke for "log" service "get"
// endpoint.
func BuildGetFunc(grpccli logpb.LogClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*logpb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &logpb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to log get endpoint.
func EncodeGetRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*log.Log)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "get", "*log.Log", v)
	}
	return NewGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the log get endpoint.
func DecodeGetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*logpb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "get", "*logpb.GetResponse", v)
	}
	if err := ValidateGetResponse(message); err != nil {
		return nil, err
	}
	res := NewGetResult(message)
	return res, nil
}

// BuildUpdateFunc builds the remote method to invoke for "log" service
// "update" endpoint.
func BuildUpdateFunc(grpccli logpb.LogClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*logpb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &logpb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to log update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*log.Log)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "update", "*log.Log", v)
	}
	return NewUpdateRequest(payload), nil
}

// DecodeUpdateResponse decodes responses from the log update endpoint.
func DecodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*logpb.UpdateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "update", "*logpb.UpdateResponse", v)
	}
	if err := ValidateUpdateResponse(message); err != nil {
		return nil, err
	}
	res := NewUpdateResult(message)
	return res, nil
}

// BuildDeleteFunc builds the remote method to invoke for "log" service
// "delete" endpoint.
func BuildDeleteFunc(grpccli logpb.LogClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Delete(ctx, reqpb.(*logpb.DeleteRequest), opts...)
		}
		return grpccli.Delete(ctx, &logpb.DeleteRequest{}, opts...)
	}
}

// EncodeDeleteRequest encodes requests sent to log delete endpoint.
func EncodeDeleteRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*log.Log)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "delete", "*log.Log", v)
	}
	return NewDeleteRequest(payload), nil
}

// BuildListFunc builds the remote method to invoke for "log" service "list"
// endpoint.
func BuildListFunc(grpccli logpb.LogClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*logpb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &logpb.ListRequest{}, opts...)
	}
}

// EncodeListRequest encodes requests sent to log list endpoint.
func EncodeListRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*log.LogListPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "list", "*log.LogListPayload", v)
	}
	return NewListRequest(payload), nil
}

// DecodeListResponse decodes responses from the log list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*logpb.ListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "list", "*logpb.ListResponse", v)
	}
	if err := ValidateListResponse(message); err != nil {
		return nil, err
	}
	res := NewListResult(message)
	return res, nil
}
