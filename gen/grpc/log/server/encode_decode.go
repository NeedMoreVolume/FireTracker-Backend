// Code generated by goa v3.2.5, DO NOT EDIT.
//
// log gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package server

import (
	"context"

	logpb "github.com/NeedMoreVolume/FireTracker/gen/grpc/log/pb"
	log "github.com/NeedMoreVolume/FireTracker/gen/log"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateResponse encodes responses from the "log" service "create"
// endpoint.
func EncodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*log.Log)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "create", "*log.Log", v)
	}
	resp := NewCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "log" service "create" endpoint.
func DecodeCreateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *logpb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*logpb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("log", "create", "*logpb.CreateRequest", v)
		}
		if err := ValidateCreateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *log.Log
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeGetResponse encodes responses from the "log" service "get" endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*log.Log)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "get", "*log.Log", v)
	}
	resp := NewGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "log" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *logpb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*logpb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("log", "get", "*logpb.GetRequest", v)
		}
		if err := ValidateGetRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *log.Log
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "log" service "update"
// endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*log.Log)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "update", "*log.Log", v)
	}
	resp := NewUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "log" service "update" endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *logpb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*logpb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("log", "update", "*logpb.UpdateRequest", v)
		}
		if err := ValidateUpdateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *log.Log
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "log" service "delete"
// endpoint.
func EncodeDeleteResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewDeleteResponse()
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "log" service "delete" endpoint.
func DecodeDeleteRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *logpb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*logpb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("log", "delete", "*logpb.DeleteRequest", v)
		}
		if err := ValidateDeleteRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *log.Log
	{
		payload = NewDeletePayload(message)
	}
	return payload, nil
}

// EncodeListResponse encodes responses from the "log" service "list" endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*log.LogList)
	if !ok {
		return nil, goagrpc.ErrInvalidType("log", "list", "*log.LogList", v)
	}
	resp := NewListResponse(result)
	return resp, nil
}

// DecodeListRequest decodes requests sent to "log" service "list" endpoint.
func DecodeListRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *logpb.ListRequest
		ok      bool
	)
	{
		if message, ok = v.(*logpb.ListRequest); !ok {
			return nil, goagrpc.ErrInvalidType("log", "list", "*logpb.ListRequest", v)
		}
		if err := ValidateListRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *log.LogListPayload
	{
		payload = NewListPayload(message)
	}
	return payload, nil
}
