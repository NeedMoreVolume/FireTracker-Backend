// Code generated by goa v3.2.5, DO NOT EDIT.
//
// fire gRPC client types
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	fire "github.com/NeedMoreVolume/FireTracker/gen/fire"
	firepb "github.com/NeedMoreVolume/FireTracker/gen/grpc/fire/pb"
	goa "goa.design/goa/v3/pkg"
)

// NewCreateRequest builds the gRPC request type from the payload of the
// "create" endpoint of the "fire" service.
func NewCreateRequest(payload *fire.Fire) *firepb.CreateRequest {
	message := &firepb.CreateRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.UpdatedAt != nil {
		message.UpdatedAt = *payload.UpdatedAt
	}
	if payload.DeletedAt != nil {
		message.DeletedAt = *payload.DeletedAt
	}
	if payload.Name != nil {
		message.Name = *payload.Name
	}
	if payload.Description != nil {
		message.Description = *payload.Description
	}
	if payload.Start != nil {
		message.Start = *payload.Start
	}
	if payload.End != nil {
		message.End = *payload.End
	}
	return message
}

// NewCreateResult builds the result type of the "create" endpoint of the
// "fire" service from the gRPC response type.
func NewCreateResult(message *firepb.CreateResponse) *fire.Fire {
	result := &fire.Fire{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		result.UpdatedAt = &message.UpdatedAt
	}
	if message.DeletedAt != "" {
		result.DeletedAt = &message.DeletedAt
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.Description != "" {
		result.Description = &message.Description
	}
	if message.Start != "" {
		result.Start = &message.Start
	}
	if message.End != "" {
		result.End = &message.End
	}
	return result
}

// NewGetRequest builds the gRPC request type from the payload of the "get"
// endpoint of the "fire" service.
func NewGetRequest(payload *fire.GetPayload) *firepb.GetRequest {
	message := &firepb.GetRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	return message
}

// NewGetResult builds the result type of the "get" endpoint of the "fire"
// service from the gRPC response type.
func NewGetResult(message *firepb.GetResponse) *fire.Fire {
	result := &fire.Fire{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		result.UpdatedAt = &message.UpdatedAt
	}
	if message.DeletedAt != "" {
		result.DeletedAt = &message.DeletedAt
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.Description != "" {
		result.Description = &message.Description
	}
	if message.Start != "" {
		result.Start = &message.Start
	}
	if message.End != "" {
		result.End = &message.End
	}
	return result
}

// NewUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "fire" service.
func NewUpdateRequest(payload *fire.Fire) *firepb.UpdateRequest {
	message := &firepb.UpdateRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	if payload.CreatedAt != nil {
		message.CreatedAt = *payload.CreatedAt
	}
	if payload.UpdatedAt != nil {
		message.UpdatedAt = *payload.UpdatedAt
	}
	if payload.DeletedAt != nil {
		message.DeletedAt = *payload.DeletedAt
	}
	if payload.Name != nil {
		message.Name = *payload.Name
	}
	if payload.Description != nil {
		message.Description = *payload.Description
	}
	if payload.Start != nil {
		message.Start = *payload.Start
	}
	if payload.End != nil {
		message.End = *payload.End
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the
// "fire" service from the gRPC response type.
func NewUpdateResult(message *firepb.UpdateResponse) *fire.Fire {
	result := &fire.Fire{}
	if message.Id != 0 {
		idptr := int(message.Id)
		result.ID = &idptr
	}
	if message.CreatedAt != "" {
		result.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		result.UpdatedAt = &message.UpdatedAt
	}
	if message.DeletedAt != "" {
		result.DeletedAt = &message.DeletedAt
	}
	if message.Name != "" {
		result.Name = &message.Name
	}
	if message.Description != "" {
		result.Description = &message.Description
	}
	if message.Start != "" {
		result.Start = &message.Start
	}
	if message.End != "" {
		result.End = &message.End
	}
	return result
}

// NewDeleteRequest builds the gRPC request type from the payload of the
// "delete" endpoint of the "fire" service.
func NewDeleteRequest(payload *fire.DeletePayload) *firepb.DeleteRequest {
	message := &firepb.DeleteRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	return message
}

// NewListRequest builds the gRPC request type from the payload of the "list"
// endpoint of the "fire" service.
func NewListRequest(payload *fire.FireListPayload) *firepb.ListRequest {
	message := &firepb.ListRequest{}
	if payload.Filters != nil {
		message.Filters = svcFireFireFiltersToFirepbFireFilters(payload.Filters)
	}
	if payload.Search != nil {
		message.Search = svcFireFireSearchToFirepbFireSearch(payload.Search)
	}
	if payload.Sort != nil {
		message.Sort = svcFireFireSortsToFirepbFireSorts(payload.Sort)
	}
	if payload.Pagination != nil {
		message.Pagination = svcFireFirePaginationToFirepbFirePagination(payload.Pagination)
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "fire"
// service from the gRPC response type.
func NewListResult(message *firepb.ListResponse) *fire.FireList {
	result := &fire.FireList{}
	if message.Fires != nil {
		result.Fires = make([]*fire.Fire, len(message.Fires))
		for i, val := range message.Fires {
			result.Fires[i] = &fire.Fire{}
			if val.Id != 0 {
				idptr := int(val.Id)
				result.Fires[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				result.Fires[i].CreatedAt = &val.CreatedAt
			}
			if val.UpdatedAt != "" {
				result.Fires[i].UpdatedAt = &val.UpdatedAt
			}
			if val.DeletedAt != "" {
				result.Fires[i].DeletedAt = &val.DeletedAt
			}
			if val.Name != "" {
				result.Fires[i].Name = &val.Name
			}
			if val.Description != "" {
				result.Fires[i].Description = &val.Description
			}
			if val.Start != "" {
				result.Fires[i].Start = &val.Start
			}
			if val.End != "" {
				result.Fires[i].End = &val.End
			}
		}
	}
	if message.Pagination != nil {
		result.Pagination = protobufFirepbPaginationToFirePagination(message.Pagination)
	}
	return result
}

// NewGetWeatherForFireRequest builds the gRPC request type from the payload of
// the "getWeatherForFire" endpoint of the "fire" service.
func NewGetWeatherForFireRequest(payload *fire.GetWeatherForFirePayload) *firepb.GetWeatherForFireRequest {
	message := &firepb.GetWeatherForFireRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	return message
}

// NewGetWeatherForFireResult builds the result type of the "getWeatherForFire"
// endpoint of the "fire" service from the gRPC response type.
func NewGetWeatherForFireResult(message *firepb.GetWeatherForFireResponse) *fire.WeatherList {
	result := &fire.WeatherList{}
	if message.Weathers != nil {
		result.Weathers = make([]*fire.Weather, len(message.Weathers))
		for i, val := range message.Weathers {
			result.Weathers[i] = &fire.Weather{}
			if val.Id != 0 {
				idptr := int(val.Id)
				result.Weathers[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				result.Weathers[i].CreatedAt = &val.CreatedAt
			}
			if val.FireId != 0 {
				fireIDptr := int(val.FireId)
				result.Weathers[i].FireID = &fireIDptr
			}
			if val.LogId != 0 {
				logIDptr := int(val.LogId)
				result.Weathers[i].LogID = &logIDptr
			}
			if val.Humidity != 0 {
				result.Weathers[i].Humidity = &val.Humidity
			}
			if val.WeatherType != "" {
				result.Weathers[i].WeatherType = &val.WeatherType
			}
			if val.WeatherTime != "" {
				result.Weathers[i].WeatherTime = &val.WeatherTime
			}
			if val.Temperature != nil {
				result.Weathers[i].Temperature = protobufFirepbTemperatureToFireTemperature(val.Temperature)
			}
			if val.DewPoint != nil {
				result.Weathers[i].DewPoint = protobufFirepbTemperatureToFireTemperature(val.DewPoint)
			}
			if val.Wind != nil {
				result.Weathers[i].Wind = protobufFirepbWindToFireWind(val.Wind)
			}
		}
	}
	if message.Pagination != nil {
		result.Pagination = protobufFirepbPaginationToFirePagination(message.Pagination)
	}
	return result
}

// NewGetLogsForFireRequest builds the gRPC request type from the payload of
// the "getLogsForFire" endpoint of the "fire" service.
func NewGetLogsForFireRequest(payload *fire.GetLogsForFirePayload) *firepb.GetLogsForFireRequest {
	message := &firepb.GetLogsForFireRequest{}
	if payload.ID != nil {
		message.Id = int32(*payload.ID)
	}
	return message
}

// NewGetLogsForFireResult builds the result type of the "getLogsForFire"
// endpoint of the "fire" service from the gRPC response type.
func NewGetLogsForFireResult(message *firepb.GetLogsForFireResponse) *fire.LogList {
	result := &fire.LogList{}
	if message.Logs != nil {
		result.Logs = make([]*fire.Log, len(message.Logs))
		for i, val := range message.Logs {
			result.Logs[i] = &fire.Log{}
			if val.Id != 0 {
				idptr := int(val.Id)
				result.Logs[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				result.Logs[i].CreatedAt = &val.CreatedAt
			}
			if val.UpdatedAt != "" {
				result.Logs[i].UpdatedAt = &val.UpdatedAt
			}
			if val.Name != "" {
				result.Logs[i].Name = &val.Name
			}
			if val.Size != "" {
				result.Logs[i].Size = &val.Size
			}
			if val.FireId != 0 {
				fireIDptr := int(val.FireId)
				result.Logs[i].FireID = &fireIDptr
			}
			if val.AddedAt != "" {
				result.Logs[i].AddedAt = &val.AddedAt
			}
			if val.Weather != nil {
				result.Logs[i].Weather = protobufFirepbWeatherToFireWeather(val.Weather)
			}
		}
	}
	if message.Pagination != nil {
		result.Pagination = protobufFirepbPaginationToFirePagination(message.Pagination)
	}
	return result
}

// ValidateCreateResponse runs the validations defined on CreateResponse.
func ValidateCreateResponse(message *firepb.CreateResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.DeletedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.deletedAt", message.DeletedAt, goa.FormatDateTime))
	}
	if message.Start != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.start", message.Start, goa.FormatDateTime))
	}
	if message.End != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.end", message.End, goa.FormatDateTime))
	}
	return
}

// ValidateGetResponse runs the validations defined on GetResponse.
func ValidateGetResponse(message *firepb.GetResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.DeletedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.deletedAt", message.DeletedAt, goa.FormatDateTime))
	}
	if message.Start != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.start", message.Start, goa.FormatDateTime))
	}
	if message.End != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.end", message.End, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateResponse runs the validations defined on UpdateResponse.
func ValidateUpdateResponse(message *firepb.UpdateResponse) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.DeletedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.deletedAt", message.DeletedAt, goa.FormatDateTime))
	}
	if message.Start != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.start", message.Start, goa.FormatDateTime))
	}
	if message.End != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.end", message.End, goa.FormatDateTime))
	}
	return
}

// ValidateListResponse runs the validations defined on ListResponse.
func ValidateListResponse(message *firepb.ListResponse) (err error) {
	for _, e := range message.Fires {
		if e != nil {
			if err2 := ValidateFire2(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateFire2 runs the validations defined on Fire2.
func ValidateFire2(message *firepb.Fire2) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.DeletedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.deletedAt", message.DeletedAt, goa.FormatDateTime))
	}
	if message.Start != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.start", message.Start, goa.FormatDateTime))
	}
	if message.End != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.end", message.End, goa.FormatDateTime))
	}
	return
}

// ValidatePagination runs the validations defined on Pagination.
func ValidatePagination(message *firepb.Pagination) (err error) {

	return
}

// ValidateGetWeatherForFireResponse runs the validations defined on
// GetWeatherForFireResponse.
func ValidateGetWeatherForFireResponse(message *firepb.GetWeatherForFireResponse) (err error) {
	for _, e := range message.Weathers {
		if e != nil {
			if err2 := ValidateWeather(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateWeather runs the validations defined on Weather.
func ValidateWeather(message *firepb.Weather) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.Temperature != nil {
		if err2 := ValidateTemperature(message.Temperature); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.DewPoint != nil {
		if err2 := ValidateTemperature(message.DewPoint); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.Wind != nil {
		if err2 := ValidateWind(message.Wind); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.WeatherType != "" {
		if !(message.WeatherType == "Sunny" || message.WeatherType == "Cloudy" || message.WeatherType == "Raining" || message.WeatherType == "Windy") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.weatherType", message.WeatherType, []interface{}{"Sunny", "Cloudy", "Raining", "Windy"}))
		}
	}
	if message.WeatherTime != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.weatherTime", message.WeatherTime, goa.FormatDateTime))
	}
	return
}

// ValidateTemperature runs the validations defined on Temperature.
func ValidateTemperature(message *firepb.Temperature) (err error) {
	if message.Unit != "" {
		if !(message.Unit == "K" || message.Unit == "C" || message.Unit == "F") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.unit", message.Unit, []interface{}{"K", "C", "F"}))
		}
	}
	return
}

// ValidateWind runs the validations defined on Wind.
func ValidateWind(message *firepb.Wind) (err error) {
	if message.Direction != "" {
		if !(message.Direction == "S" || message.Direction == "SE" || message.Direction == "E" || message.Direction == "NE" || message.Direction == "N" || message.Direction == "NW" || message.Direction == "W" || message.Direction == "SW") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.direction", message.Direction, []interface{}{"S", "SE", "E", "NE", "N", "NW", "W", "SW"}))
		}
	}
	if message.Unit != "" {
		if !(message.Unit == "KPH" || message.Unit == "MPH") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.unit", message.Unit, []interface{}{"KPH", "MPH"}))
		}
	}
	return
}

// ValidateGetLogsForFireResponse runs the validations defined on
// GetLogsForFireResponse.
func ValidateGetLogsForFireResponse(message *firepb.GetLogsForFireResponse) (err error) {
	for _, e := range message.Logs {
		if e != nil {
			if err2 := ValidateLog(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateLog runs the validations defined on Log.
func ValidateLog(message *firepb.Log) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.Size != "" {
		if !(message.Size == "S" || message.Size == "M" || message.Size == "L" || message.Size == "XL") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.size", message.Size, []interface{}{"S", "M", "L", "XL"}))
		}
	}
	if message.AddedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.addedAt", message.AddedAt, goa.FormatDateTime))
	}
	if message.Weather != nil {
		if err2 := ValidateWeather(message.Weather); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// protobufFirepbFireFiltersToFireFireFilters builds a value of type
// *fire.FireFilters from a value of type *firepb.FireFilters.
func protobufFirepbFireFiltersToFireFireFilters(v *firepb.FireFilters) *fire.FireFilters {
	res := &fire.FireFilters{}
	if v.Name != nil {
		res.Name = make([]*fire.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = &fire.StringFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.Start != nil {
		res.Start = make([]*fire.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = &fire.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int(val.Value),
			}
		}
	}
	if v.End != nil {
		res.End = make([]*fire.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = &fire.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int(val.Value),
			}
		}
	}

	return res
}

// protobufFirepbFireSearchToFireFireSearch builds a value of type
// *fire.FireSearch from a value of type *firepb.FireSearch.
func protobufFirepbFireSearchToFireFireSearch(v *firepb.FireSearch) *fire.FireSearch {
	res := &fire.FireSearch{}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.Description != "" {
		res.Description = &v.Description
	}

	return res
}

// protobufFirepbFireSortsToFireFireSorts builds a value of type
// *fire.FireSorts from a value of type *firepb.FireSorts.
func protobufFirepbFireSortsToFireFireSorts(v *firepb.FireSorts) *fire.FireSorts {
	res := &fire.FireSorts{}
	if v.Id != "" {
		res.ID = &v.Id
	}
	if v.Start != "" {
		res.Start = &v.Start
	}
	if v.End != "" {
		res.End = &v.End
	}

	return res
}

// protobufFirepbFirePaginationToFireFirePagination builds a value of type
// *fire.FirePagination from a value of type *firepb.FirePagination.
func protobufFirepbFirePaginationToFireFirePagination(v *firepb.FirePagination) *fire.FirePagination {
	res := &fire.FirePagination{
		Page:  int(v.Page),
		Limit: int(v.Limit),
	}

	return res
}

// svcFireFireFiltersToFirepbFireFilters builds a value of type
// *firepb.FireFilters from a value of type *fire.FireFilters.
func svcFireFireFiltersToFirepbFireFilters(v *fire.FireFilters) *firepb.FireFilters {
	res := &firepb.FireFilters{}
	if v.Name != nil {
		res.Name = make([]*firepb.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = &firepb.StringFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.Start != nil {
		res.Start = make([]*firepb.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = &firepb.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int32(val.Value),
			}
		}
	}
	if v.End != nil {
		res.End = make([]*firepb.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = &firepb.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int32(val.Value),
			}
		}
	}

	return res
}

// svcFireFireSearchToFirepbFireSearch builds a value of type
// *firepb.FireSearch from a value of type *fire.FireSearch.
func svcFireFireSearchToFirepbFireSearch(v *fire.FireSearch) *firepb.FireSearch {
	res := &firepb.FireSearch{}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.Description != nil {
		res.Description = *v.Description
	}

	return res
}

// svcFireFireSortsToFirepbFireSorts builds a value of type *firepb.FireSorts
// from a value of type *fire.FireSorts.
func svcFireFireSortsToFirepbFireSorts(v *fire.FireSorts) *firepb.FireSorts {
	res := &firepb.FireSorts{}
	if v.ID != nil {
		res.Id = *v.ID
	}
	if v.Start != nil {
		res.Start = *v.Start
	}
	if v.End != nil {
		res.End = *v.End
	}

	return res
}

// svcFireFirePaginationToFirepbFirePagination builds a value of type
// *firepb.FirePagination from a value of type *fire.FirePagination.
func svcFireFirePaginationToFirepbFirePagination(v *fire.FirePagination) *firepb.FirePagination {
	res := &firepb.FirePagination{
		Page:  int32(v.Page),
		Limit: int32(v.Limit),
	}

	return res
}

// svcFirePaginationToFirepbPagination builds a value of type
// *firepb.Pagination from a value of type *fire.Pagination.
func svcFirePaginationToFirepbPagination(v *fire.Pagination) *firepb.Pagination {
	if v == nil {
		return nil
	}
	res := &firepb.Pagination{}
	if v.Total != nil {
		res.Total = int32(*v.Total)
	}
	if v.Page != nil {
		res.Page = int32(*v.Page)
	}
	if v.Limit != nil {
		res.Limit = int32(*v.Limit)
	}

	return res
}

// protobufFirepbPaginationToFirePagination builds a value of type
// *fire.Pagination from a value of type *firepb.Pagination.
func protobufFirepbPaginationToFirePagination(v *firepb.Pagination) *fire.Pagination {
	if v == nil {
		return nil
	}
	res := &fire.Pagination{}
	if v.Total != 0 {
		totalptr := int(v.Total)
		res.Total = &totalptr
	}
	if v.Page != 0 {
		pageptr := int(v.Page)
		res.Page = &pageptr
	}
	if v.Limit != 0 {
		limitptr := int(v.Limit)
		res.Limit = &limitptr
	}

	return res
}

// svcFireTemperatureToFirepbTemperature builds a value of type
// *firepb.Temperature from a value of type *fire.Temperature.
func svcFireTemperatureToFirepbTemperature(v *fire.Temperature) *firepb.Temperature {
	if v == nil {
		return nil
	}
	res := &firepb.Temperature{}
	if v.Unit != nil {
		res.Unit = *v.Unit
	}
	if v.Value != nil {
		res.Value = *v.Value
	}

	return res
}

// svcFireWindToFirepbWind builds a value of type *firepb.Wind from a value of
// type *fire.Wind.
func svcFireWindToFirepbWind(v *fire.Wind) *firepb.Wind {
	if v == nil {
		return nil
	}
	res := &firepb.Wind{}
	if v.Speed != nil {
		res.Speed = *v.Speed
	}
	if v.Direction != nil {
		res.Direction = *v.Direction
	}
	if v.Unit != nil {
		res.Unit = *v.Unit
	}

	return res
}

// protobufFirepbTemperatureToFireTemperature builds a value of type
// *fire.Temperature from a value of type *firepb.Temperature.
func protobufFirepbTemperatureToFireTemperature(v *firepb.Temperature) *fire.Temperature {
	if v == nil {
		return nil
	}
	res := &fire.Temperature{}
	if v.Unit != "" {
		res.Unit = &v.Unit
	}
	if v.Value != 0 {
		res.Value = &v.Value
	}

	return res
}

// protobufFirepbWindToFireWind builds a value of type *fire.Wind from a value
// of type *firepb.Wind.
func protobufFirepbWindToFireWind(v *firepb.Wind) *fire.Wind {
	if v == nil {
		return nil
	}
	res := &fire.Wind{}
	if v.Speed != 0 {
		res.Speed = &v.Speed
	}
	if v.Direction != "" {
		res.Direction = &v.Direction
	}
	if v.Unit != "" {
		res.Unit = &v.Unit
	}

	return res
}

// svcFireWeatherToFirepbWeather builds a value of type *firepb.Weather from a
// value of type *fire.Weather.
func svcFireWeatherToFirepbWeather(v *fire.Weather) *firepb.Weather {
	if v == nil {
		return nil
	}
	res := &firepb.Weather{}
	if v.ID != nil {
		res.Id = int32(*v.ID)
	}
	if v.CreatedAt != nil {
		res.CreatedAt = *v.CreatedAt
	}
	if v.FireID != nil {
		res.FireId = int32(*v.FireID)
	}
	if v.LogID != nil {
		res.LogId = int32(*v.LogID)
	}
	if v.Humidity != nil {
		res.Humidity = *v.Humidity
	}
	if v.WeatherType != nil {
		res.WeatherType = *v.WeatherType
	}
	if v.WeatherTime != nil {
		res.WeatherTime = *v.WeatherTime
	}
	if v.Temperature != nil {
		res.Temperature = svcFireTemperatureToFirepbTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = svcFireTemperatureToFirepbTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = svcFireWindToFirepbWind(v.Wind)
	}

	return res
}

// protobufFirepbWeatherToFireWeather builds a value of type *fire.Weather from
// a value of type *firepb.Weather.
func protobufFirepbWeatherToFireWeather(v *firepb.Weather) *fire.Weather {
	if v == nil {
		return nil
	}
	res := &fire.Weather{}
	if v.Id != 0 {
		idptr := int(v.Id)
		res.ID = &idptr
	}
	if v.CreatedAt != "" {
		res.CreatedAt = &v.CreatedAt
	}
	if v.FireId != 0 {
		fireIDptr := int(v.FireId)
		res.FireID = &fireIDptr
	}
	if v.LogId != 0 {
		logIDptr := int(v.LogId)
		res.LogID = &logIDptr
	}
	if v.Humidity != 0 {
		res.Humidity = &v.Humidity
	}
	if v.WeatherType != "" {
		res.WeatherType = &v.WeatherType
	}
	if v.WeatherTime != "" {
		res.WeatherTime = &v.WeatherTime
	}
	if v.Temperature != nil {
		res.Temperature = protobufFirepbTemperatureToFireTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = protobufFirepbTemperatureToFireTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = protobufFirepbWindToFireWind(v.Wind)
	}

	return res
}
