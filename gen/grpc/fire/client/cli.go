// Code generated by goa v3.3.1, DO NOT EDIT.
//
// fire gRPC client CLI support package
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package client

import (
	"encoding/json"
	"fmt"

	fire "github.com/NeedMoreVolume/FireTracker/gen/fire"
	firepb "github.com/NeedMoreVolume/FireTracker/gen/grpc/fire/pb"
)

// BuildCreatePayload builds the payload for the fire create endpoint from CLI
// flags.
func BuildCreatePayload(fireCreateMessage string) (*fire.Fire, error) {
	var err error
	var message firepb.CreateRequest
	{
		if fireCreateMessage != "" {
			err = json.Unmarshal([]byte(fireCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2020-01-01T00:00:00Z\",\n      \"deletedAt\": \"2020-01-01T00:00:00Z\",\n      \"description\": \"My first fire with FireTracker\",\n      \"end\": \"2020-01-02T00:00:00Z\",\n      \"id\": 1,\n      \"logs\": [\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 8142335612677589816,\n            \"name\": \"Big Log\",\n            \"size\": \"L\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Raining\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 8142335612677589816,\n            \"name\": \"Big Log\",\n            \"size\": \"L\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Raining\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 8142335612677589816,\n            \"name\": \"Big Log\",\n            \"size\": \"L\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Raining\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 8142335612677589816,\n            \"name\": \"Big Log\",\n            \"size\": \"L\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Raining\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         }\n      ],\n      \"name\": \"Test Fire\",\n      \"start\": \"2020-01-01T00:00:00Z\",\n      \"updatedAt\": \"2020-01-01T00:00:00Z\",\n      \"weathers\": [\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Raining\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         },\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Raining\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         },\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Raining\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         }\n      ]\n   }'")
			}
		}
	}
	v := &fire.Fire{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		v.UpdatedAt = &message.UpdatedAt
	}
	if message.DeletedAt != "" {
		v.DeletedAt = &message.DeletedAt
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	if message.Start != "" {
		v.Start = &message.Start
	}
	if message.End != "" {
		v.End = &message.End
	}
	if message.Logs != nil {
		v.Logs = make([]*fire.Log, len(message.Logs))
		for i, val := range message.Logs {
			v.Logs[i] = &fire.Log{}
			if val.Id != 0 {
				idptr := int(val.Id)
				v.Logs[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				v.Logs[i].CreatedAt = &val.CreatedAt
			}
			if val.UpdatedAt != "" {
				v.Logs[i].UpdatedAt = &val.UpdatedAt
			}
			if val.Name != "" {
				v.Logs[i].Name = &val.Name
			}
			if val.Size != "" {
				v.Logs[i].Size = &val.Size
			}
			if val.FireId != 0 {
				fireIDptr := int(val.FireId)
				v.Logs[i].FireID = &fireIDptr
			}
			if val.AddedAt != "" {
				v.Logs[i].AddedAt = &val.AddedAt
			}
			if val.Weather != nil {
				v.Logs[i].Weather = protobufFirepbWeatherToFireWeather(val.Weather)
			}
		}
	}
	if message.Weathers != nil {
		v.Weathers = make([]*fire.Weather, len(message.Weathers))
		for i, val := range message.Weathers {
			v.Weathers[i] = &fire.Weather{}
			if val.Id != 0 {
				idptr := int(val.Id)
				v.Weathers[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				v.Weathers[i].CreatedAt = &val.CreatedAt
			}
			if val.FireId != 0 {
				fireIDptr := int(val.FireId)
				v.Weathers[i].FireID = &fireIDptr
			}
			if val.LogId != 0 {
				logIDptr := int(val.LogId)
				v.Weathers[i].LogID = &logIDptr
			}
			if val.Humidity != 0 {
				v.Weathers[i].Humidity = &val.Humidity
			}
			if val.WeatherType != "" {
				v.Weathers[i].WeatherType = &val.WeatherType
			}
			if val.WeatherTime != "" {
				v.Weathers[i].WeatherTime = &val.WeatherTime
			}
			if val.Temperature != nil {
				v.Weathers[i].Temperature = protobufFirepbTemperatureToFireTemperature(val.Temperature)
			}
			if val.DewPoint != nil {
				v.Weathers[i].DewPoint = protobufFirepbTemperatureToFireTemperature(val.DewPoint)
			}
			if val.Wind != nil {
				v.Weathers[i].Wind = protobufFirepbWindToFireWind(val.Wind)
			}
		}
	}

	return v, nil
}

// BuildGetPayload builds the payload for the fire get endpoint from CLI flags.
func BuildGetPayload(fireGetMessage string) (*fire.GetPayload, error) {
	var err error
	var message firepb.GetRequest
	{
		if fireGetMessage != "" {
			err = json.Unmarshal([]byte(fireGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 3405553402896483766\n   }'")
			}
		}
	}
	v := &fire.GetPayload{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the fire update endpoint from CLI
// flags.
func BuildUpdatePayload(fireUpdateMessage string) (*fire.Fire, error) {
	var err error
	var message firepb.UpdateRequest
	{
		if fireUpdateMessage != "" {
			err = json.Unmarshal([]byte(fireUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"createdAt\": \"2020-01-01T00:00:00Z\",\n      \"deletedAt\": \"2020-01-01T00:00:00Z\",\n      \"description\": \"My first fire with FireTracker\",\n      \"end\": \"2020-01-02T00:00:00Z\",\n      \"id\": 1,\n      \"logs\": [\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 8142335612677589816,\n            \"name\": \"Big Log\",\n            \"size\": \"L\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Raining\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         },\n         {\n            \"addedAt\": \"2020-01-02T00:00:00Z\",\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"fireID\": 1,\n            \"id\": 8142335612677589816,\n            \"name\": \"Big Log\",\n            \"size\": \"L\",\n            \"updatedAt\": \"2020-01-02T00:00:00Z\",\n            \"weather\": {\n               \"createdAt\": \"2020-01-02T00:00:00Z\",\n               \"dewPoint\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"fireID\": 1,\n               \"humidity\": 1500,\n               \"id\": 1,\n               \"logID\": 1,\n               \"temperature\": {\n                  \"unit\": \"C\",\n                  \"value\": 20\n               },\n               \"weatherTime\": \"2020-01-02T00:00:00Z\",\n               \"weatherType\": \"Raining\",\n               \"wind\": {\n                  \"direction\": \"SE\",\n                  \"speed\": 15,\n                  \"unit\": \"KPH\"\n               }\n            }\n         }\n      ],\n      \"name\": \"Test Fire\",\n      \"start\": \"2020-01-01T00:00:00Z\",\n      \"updatedAt\": \"2020-01-01T00:00:00Z\",\n      \"weathers\": [\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Raining\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         },\n         {\n            \"createdAt\": \"2020-01-02T00:00:00Z\",\n            \"dewPoint\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"fireID\": 1,\n            \"humidity\": 1500,\n            \"id\": 1,\n            \"logID\": 1,\n            \"temperature\": {\n               \"unit\": \"C\",\n               \"value\": 20\n            },\n            \"weatherTime\": \"2020-01-02T00:00:00Z\",\n            \"weatherType\": \"Raining\",\n            \"wind\": {\n               \"direction\": \"SE\",\n               \"speed\": 15,\n               \"unit\": \"KPH\"\n            }\n         }\n      ]\n   }'")
			}
		}
	}
	v := &fire.Fire{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		v.UpdatedAt = &message.UpdatedAt
	}
	if message.DeletedAt != "" {
		v.DeletedAt = &message.DeletedAt
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	if message.Start != "" {
		v.Start = &message.Start
	}
	if message.End != "" {
		v.End = &message.End
	}
	if message.Logs != nil {
		v.Logs = make([]*fire.Log, len(message.Logs))
		for i, val := range message.Logs {
			v.Logs[i] = &fire.Log{}
			if val.Id != 0 {
				idptr := int(val.Id)
				v.Logs[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				v.Logs[i].CreatedAt = &val.CreatedAt
			}
			if val.UpdatedAt != "" {
				v.Logs[i].UpdatedAt = &val.UpdatedAt
			}
			if val.Name != "" {
				v.Logs[i].Name = &val.Name
			}
			if val.Size != "" {
				v.Logs[i].Size = &val.Size
			}
			if val.FireId != 0 {
				fireIDptr := int(val.FireId)
				v.Logs[i].FireID = &fireIDptr
			}
			if val.AddedAt != "" {
				v.Logs[i].AddedAt = &val.AddedAt
			}
			if val.Weather != nil {
				v.Logs[i].Weather = protobufFirepbWeatherToFireWeather(val.Weather)
			}
		}
	}
	if message.Weathers != nil {
		v.Weathers = make([]*fire.Weather, len(message.Weathers))
		for i, val := range message.Weathers {
			v.Weathers[i] = &fire.Weather{}
			if val.Id != 0 {
				idptr := int(val.Id)
				v.Weathers[i].ID = &idptr
			}
			if val.CreatedAt != "" {
				v.Weathers[i].CreatedAt = &val.CreatedAt
			}
			if val.FireId != 0 {
				fireIDptr := int(val.FireId)
				v.Weathers[i].FireID = &fireIDptr
			}
			if val.LogId != 0 {
				logIDptr := int(val.LogId)
				v.Weathers[i].LogID = &logIDptr
			}
			if val.Humidity != 0 {
				v.Weathers[i].Humidity = &val.Humidity
			}
			if val.WeatherType != "" {
				v.Weathers[i].WeatherType = &val.WeatherType
			}
			if val.WeatherTime != "" {
				v.Weathers[i].WeatherTime = &val.WeatherTime
			}
			if val.Temperature != nil {
				v.Weathers[i].Temperature = protobufFirepbTemperatureToFireTemperature(val.Temperature)
			}
			if val.DewPoint != nil {
				v.Weathers[i].DewPoint = protobufFirepbTemperatureToFireTemperature(val.DewPoint)
			}
			if val.Wind != nil {
				v.Weathers[i].Wind = protobufFirepbWindToFireWind(val.Wind)
			}
		}
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the fire delete endpoint from CLI
// flags.
func BuildDeletePayload(fireDeleteMessage string) (*fire.DeletePayload, error) {
	var err error
	var message firepb.DeleteRequest
	{
		if fireDeleteMessage != "" {
			err = json.Unmarshal([]byte(fireDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 8113059793380976996\n   }'")
			}
		}
	}
	v := &fire.DeletePayload{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}

	return v, nil
}

// BuildListPayload builds the payload for the fire list endpoint from CLI
// flags.
func BuildListPayload(fireListMessage string) (*fire.FireListPayload, error) {
	var err error
	var message firepb.ListRequest
	{
		if fireListMessage != "" {
			err = json.Unmarshal([]byte(fireListMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"filters\": {\n         \"end\": [\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"\\u003c\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            },\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"\\u003c\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            },\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"\\u003c\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            }\n         ],\n         \"name\": [\n            {\n               \"key\": \"name\",\n               \"operator\": \"!=\",\n               \"value\": \"Daniel\"\n            },\n            {\n               \"key\": \"name\",\n               \"operator\": \"!=\",\n               \"value\": \"Daniel\"\n            },\n            {\n               \"key\": \"name\",\n               \"operator\": \"!=\",\n               \"value\": \"Daniel\"\n            },\n            {\n               \"key\": \"name\",\n               \"operator\": \"!=\",\n               \"value\": \"Daniel\"\n            }\n         ],\n         \"start\": [\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"\\u003c\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            },\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"\\u003c\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            },\n            {\n               \"key\": \"added_at\",\n               \"operator\": \"\\u003c\",\n               \"value\": \"2020-01-01T00:00:00Z\"\n            }\n         ]\n      },\n      \"pagination\": {\n         \"limit\": 10,\n         \"page\": 1\n      },\n      \"search\": {\n         \"description\": \"That time johnny lit the fire with gasoline\",\n         \"name\": \"Test\"\n      },\n      \"sort\": {\n         \"end\": \"ASC, DESC\",\n         \"id\": \"ASC, DESC\",\n         \"start\": \"ASC, DESC\"\n      }\n   }'")
			}
		}
	}
	v := &fire.FireListPayload{}
	if message.Filters != nil {
		v.Filters = protobufFirepbFireFiltersToFireFireFilters(message.Filters)
	}
	if message.Search != nil {
		v.Search = protobufFirepbFireSearchToFireFireSearch(message.Search)
	}
	if message.Sort != nil {
		v.Sort = protobufFirepbFireSortsToFireFireSorts(message.Sort)
	}
	if message.Pagination != nil {
		v.Pagination = protobufFirepbFirePaginationToFireFirePagination(message.Pagination)
	}

	return v, nil
}

// BuildGetWeatherForFirePayload builds the payload for the fire
// getWeatherForFire endpoint from CLI flags.
func BuildGetWeatherForFirePayload(fireGetWeatherForFireMessage string) (*fire.GetWeatherForFirePayload, error) {
	var err error
	var message firepb.GetWeatherForFireRequest
	{
		if fireGetWeatherForFireMessage != "" {
			err = json.Unmarshal([]byte(fireGetWeatherForFireMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 6959803630763754367\n   }'")
			}
		}
	}
	v := &fire.GetWeatherForFirePayload{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}

	return v, nil
}

// BuildGetLogsForFirePayload builds the payload for the fire getLogsForFire
// endpoint from CLI flags.
func BuildGetLogsForFirePayload(fireGetLogsForFireMessage string) (*fire.GetLogsForFirePayload, error) {
	var err error
	var message firepb.GetLogsForFireRequest
	{
		if fireGetLogsForFireMessage != "" {
			err = json.Unmarshal([]byte(fireGetLogsForFireMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 8774194672847088201\n   }'")
			}
		}
	}
	v := &fire.GetLogsForFirePayload{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}

	return v, nil
}
