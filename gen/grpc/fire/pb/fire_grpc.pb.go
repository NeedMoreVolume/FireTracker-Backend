// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package firepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FireClient is the client API for Fire service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FireClient interface {
	// Create a fire and optional payloads
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Get fire and data friends
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Update something about a fire specifically
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Update something about a fire specifically
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// List fires
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Gets a list of weather for a fire
	GetWeatherForFire(ctx context.Context, in *GetWeatherForFireRequest, opts ...grpc.CallOption) (*GetWeatherForFireResponse, error)
	// Gets a list of logs for a fire
	GetLogsForFire(ctx context.Context, in *GetLogsForFireRequest, opts ...grpc.CallOption) (*GetLogsForFireResponse, error)
}

type fireClient struct {
	cc grpc.ClientConnInterface
}

func NewFireClient(cc grpc.ClientConnInterface) FireClient {
	return &fireClient{cc}
}

func (c *fireClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/fire.Fire/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/fire.Fire/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/fire.Fire/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/fire.Fire/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/fire.Fire/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireClient) GetWeatherForFire(ctx context.Context, in *GetWeatherForFireRequest, opts ...grpc.CallOption) (*GetWeatherForFireResponse, error) {
	out := new(GetWeatherForFireResponse)
	err := c.cc.Invoke(ctx, "/fire.Fire/GetWeatherForFire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fireClient) GetLogsForFire(ctx context.Context, in *GetLogsForFireRequest, opts ...grpc.CallOption) (*GetLogsForFireResponse, error) {
	out := new(GetLogsForFireResponse)
	err := c.cc.Invoke(ctx, "/fire.Fire/GetLogsForFire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FireServer is the server API for Fire service.
// All implementations must embed UnimplementedFireServer
// for forward compatibility
type FireServer interface {
	// Create a fire and optional payloads
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Get fire and data friends
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Update something about a fire specifically
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Update something about a fire specifically
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// List fires
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Gets a list of weather for a fire
	GetWeatherForFire(context.Context, *GetWeatherForFireRequest) (*GetWeatherForFireResponse, error)
	// Gets a list of logs for a fire
	GetLogsForFire(context.Context, *GetLogsForFireRequest) (*GetLogsForFireResponse, error)
	mustEmbedUnimplementedFireServer()
}

// UnimplementedFireServer must be embedded to have forward compatible implementations.
type UnimplementedFireServer struct {
}

func (UnimplementedFireServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFireServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFireServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFireServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFireServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFireServer) GetWeatherForFire(context.Context, *GetWeatherForFireRequest) (*GetWeatherForFireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeatherForFire not implemented")
}
func (UnimplementedFireServer) GetLogsForFire(context.Context, *GetLogsForFireRequest) (*GetLogsForFireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogsForFire not implemented")
}
func (UnimplementedFireServer) mustEmbedUnimplementedFireServer() {}

// UnsafeFireServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FireServer will
// result in compilation errors.
type UnsafeFireServer interface {
	mustEmbedUnimplementedFireServer()
}

func RegisterFireServer(s grpc.ServiceRegistrar, srv FireServer) {
	s.RegisterService(&_Fire_serviceDesc, srv)
}

func _Fire_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fire.Fire/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fire_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fire.Fire/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fire_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fire.Fire/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fire_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fire.Fire/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fire_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fire.Fire/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fire_GetWeatherForFire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeatherForFireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireServer).GetWeatherForFire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fire.Fire/GetWeatherForFire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireServer).GetWeatherForFire(ctx, req.(*GetWeatherForFireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fire_GetLogsForFire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsForFireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FireServer).GetLogsForFire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fire.Fire/GetLogsForFire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FireServer).GetLogsForFire(ctx, req.(*GetLogsForFireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fire_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fire.Fire",
	HandlerType: (*FireServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Fire_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Fire_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Fire_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Fire_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Fire_List_Handler,
		},
		{
			MethodName: "GetWeatherForFire",
			Handler:    _Fire_GetWeatherForFire_Handler,
		},
		{
			MethodName: "GetLogsForFire",
			Handler:    _Fire_GetLogsForFire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fire.proto",
}
