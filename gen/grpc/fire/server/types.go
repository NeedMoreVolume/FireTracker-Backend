// Code generated by goa v3.2.5, DO NOT EDIT.
//
// fire gRPC server types
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package server

import (
	fire "github.com/NeedMoreVolume/FireTracker/gen/fire"
	firepb "github.com/NeedMoreVolume/FireTracker/gen/grpc/fire/pb"
	goa "goa.design/goa/v3/pkg"
)

// NewCreatePayload builds the payload of the "create" endpoint of the "fire"
// service from the gRPC request type.
func NewCreatePayload(message *firepb.CreateRequest) *fire.Fire {
	v := &fire.Fire{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		v.UpdatedAt = &message.UpdatedAt
	}
	if message.DeletedAt != "" {
		v.DeletedAt = &message.DeletedAt
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	if message.Start != "" {
		v.Start = &message.Start
	}
	if message.End != "" {
		v.End = &message.End
	}
	return v
}

// NewCreateResponse builds the gRPC response type from the result of the
// "create" endpoint of the "fire" service.
func NewCreateResponse(result *fire.Fire) *firepb.CreateResponse {
	message := &firepb.CreateResponse{}
	if result.ID != nil {
		message.Id = int32(*result.ID)
	}
	if result.CreatedAt != nil {
		message.CreatedAt = *result.CreatedAt
	}
	if result.UpdatedAt != nil {
		message.UpdatedAt = *result.UpdatedAt
	}
	if result.DeletedAt != nil {
		message.DeletedAt = *result.DeletedAt
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Start != nil {
		message.Start = *result.Start
	}
	if result.End != nil {
		message.End = *result.End
	}
	return message
}

// NewGetPayload builds the payload of the "get" endpoint of the "fire" service
// from the gRPC request type.
func NewGetPayload(message *firepb.GetRequest) *fire.GetPayload {
	v := &fire.GetPayload{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	return v
}

// NewGetResponse builds the gRPC response type from the result of the "get"
// endpoint of the "fire" service.
func NewGetResponse(result *fire.Fire) *firepb.GetResponse {
	message := &firepb.GetResponse{}
	if result.ID != nil {
		message.Id = int32(*result.ID)
	}
	if result.CreatedAt != nil {
		message.CreatedAt = *result.CreatedAt
	}
	if result.UpdatedAt != nil {
		message.UpdatedAt = *result.UpdatedAt
	}
	if result.DeletedAt != nil {
		message.DeletedAt = *result.DeletedAt
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Start != nil {
		message.Start = *result.Start
	}
	if result.End != nil {
		message.End = *result.End
	}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "fire"
// service from the gRPC request type.
func NewUpdatePayload(message *firepb.UpdateRequest) *fire.Fire {
	v := &fire.Fire{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	if message.CreatedAt != "" {
		v.CreatedAt = &message.CreatedAt
	}
	if message.UpdatedAt != "" {
		v.UpdatedAt = &message.UpdatedAt
	}
	if message.DeletedAt != "" {
		v.DeletedAt = &message.DeletedAt
	}
	if message.Name != "" {
		v.Name = &message.Name
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	if message.Start != "" {
		v.Start = &message.Start
	}
	if message.End != "" {
		v.End = &message.End
	}
	return v
}

// NewUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "fire" service.
func NewUpdateResponse(result *fire.Fire) *firepb.UpdateResponse {
	message := &firepb.UpdateResponse{}
	if result.ID != nil {
		message.Id = int32(*result.ID)
	}
	if result.CreatedAt != nil {
		message.CreatedAt = *result.CreatedAt
	}
	if result.UpdatedAt != nil {
		message.UpdatedAt = *result.UpdatedAt
	}
	if result.DeletedAt != nil {
		message.DeletedAt = *result.DeletedAt
	}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	if result.Start != nil {
		message.Start = *result.Start
	}
	if result.End != nil {
		message.End = *result.End
	}
	return message
}

// NewDeletePayload builds the payload of the "delete" endpoint of the "fire"
// service from the gRPC request type.
func NewDeletePayload(message *firepb.DeleteRequest) *fire.DeletePayload {
	v := &fire.DeletePayload{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	return v
}

// NewDeleteResponse builds the gRPC response type from the result of the
// "delete" endpoint of the "fire" service.
func NewDeleteResponse() *firepb.DeleteResponse {
	message := &firepb.DeleteResponse{}
	return message
}

// NewListPayload builds the payload of the "list" endpoint of the "fire"
// service from the gRPC request type.
func NewListPayload(message *firepb.ListRequest) *fire.FireListPayload {
	v := &fire.FireListPayload{}
	if message.Filters != nil {
		v.Filters = protobufFirepbFireFiltersToFireFireFilters(message.Filters)
	}
	if message.Search != nil {
		v.Search = protobufFirepbFireSearchToFireFireSearch(message.Search)
	}
	if message.Sort != nil {
		v.Sort = protobufFirepbFireSortsToFireFireSorts(message.Sort)
	}
	if message.Pagination != nil {
		v.Pagination = protobufFirepbFirePaginationToFireFirePagination(message.Pagination)
	}
	return v
}

// NewListResponse builds the gRPC response type from the result of the "list"
// endpoint of the "fire" service.
func NewListResponse(result *fire.FireList) *firepb.ListResponse {
	message := &firepb.ListResponse{}
	if result.Fires != nil {
		message.Fires = make([]*firepb.Fire2, len(result.Fires))
		for i, val := range result.Fires {
			message.Fires[i] = &firepb.Fire2{}
			if val.ID != nil {
				message.Fires[i].Id = int32(*val.ID)
			}
			if val.CreatedAt != nil {
				message.Fires[i].CreatedAt = *val.CreatedAt
			}
			if val.UpdatedAt != nil {
				message.Fires[i].UpdatedAt = *val.UpdatedAt
			}
			if val.DeletedAt != nil {
				message.Fires[i].DeletedAt = *val.DeletedAt
			}
			if val.Name != nil {
				message.Fires[i].Name = *val.Name
			}
			if val.Description != nil {
				message.Fires[i].Description = *val.Description
			}
			if val.Start != nil {
				message.Fires[i].Start = *val.Start
			}
			if val.End != nil {
				message.Fires[i].End = *val.End
			}
		}
	}
	if result.Pagination != nil {
		message.Pagination = svcFirePaginationToFirepbPagination(result.Pagination)
	}
	return message
}

// NewGetWeatherForFirePayload builds the payload of the "getWeatherForFire"
// endpoint of the "fire" service from the gRPC request type.
func NewGetWeatherForFirePayload(message *firepb.GetWeatherForFireRequest) *fire.GetWeatherForFirePayload {
	v := &fire.GetWeatherForFirePayload{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	return v
}

// NewGetWeatherForFireResponse builds the gRPC response type from the result
// of the "getWeatherForFire" endpoint of the "fire" service.
func NewGetWeatherForFireResponse(result *fire.WeatherList) *firepb.GetWeatherForFireResponse {
	message := &firepb.GetWeatherForFireResponse{}
	if result.Weathers != nil {
		message.Weathers = make([]*firepb.Weather, len(result.Weathers))
		for i, val := range result.Weathers {
			message.Weathers[i] = &firepb.Weather{}
			if val.ID != nil {
				message.Weathers[i].Id = int32(*val.ID)
			}
			if val.CreatedAt != nil {
				message.Weathers[i].CreatedAt = *val.CreatedAt
			}
			if val.FireID != nil {
				message.Weathers[i].FireId = int32(*val.FireID)
			}
			if val.LogID != nil {
				message.Weathers[i].LogId = int32(*val.LogID)
			}
			if val.Humidity != nil {
				message.Weathers[i].Humidity = *val.Humidity
			}
			if val.WeatherType != nil {
				message.Weathers[i].WeatherType = *val.WeatherType
			}
			if val.WeatherTime != nil {
				message.Weathers[i].WeatherTime = *val.WeatherTime
			}
			if val.Temperature != nil {
				message.Weathers[i].Temperature = svcFireTemperatureToFirepbTemperature(val.Temperature)
			}
			if val.DewPoint != nil {
				message.Weathers[i].DewPoint = svcFireTemperatureToFirepbTemperature(val.DewPoint)
			}
			if val.Wind != nil {
				message.Weathers[i].Wind = svcFireWindToFirepbWind(val.Wind)
			}
		}
	}
	if result.Pagination != nil {
		message.Pagination = svcFirePaginationToFirepbPagination(result.Pagination)
	}
	return message
}

// NewGetLogsForFirePayload builds the payload of the "getLogsForFire" endpoint
// of the "fire" service from the gRPC request type.
func NewGetLogsForFirePayload(message *firepb.GetLogsForFireRequest) *fire.GetLogsForFirePayload {
	v := &fire.GetLogsForFirePayload{}
	if message.Id != 0 {
		idptr := int(message.Id)
		v.ID = &idptr
	}
	return v
}

// NewGetLogsForFireResponse builds the gRPC response type from the result of
// the "getLogsForFire" endpoint of the "fire" service.
func NewGetLogsForFireResponse(result *fire.LogList) *firepb.GetLogsForFireResponse {
	message := &firepb.GetLogsForFireResponse{}
	if result.Logs != nil {
		message.Logs = make([]*firepb.Log, len(result.Logs))
		for i, val := range result.Logs {
			message.Logs[i] = &firepb.Log{}
			if val.ID != nil {
				message.Logs[i].Id = int32(*val.ID)
			}
			if val.CreatedAt != nil {
				message.Logs[i].CreatedAt = *val.CreatedAt
			}
			if val.UpdatedAt != nil {
				message.Logs[i].UpdatedAt = *val.UpdatedAt
			}
			if val.Name != nil {
				message.Logs[i].Name = *val.Name
			}
			if val.Size != nil {
				message.Logs[i].Size = *val.Size
			}
			if val.FireID != nil {
				message.Logs[i].FireId = int32(*val.FireID)
			}
			if val.AddedAt != nil {
				message.Logs[i].AddedAt = *val.AddedAt
			}
			if val.Weather != nil {
				message.Logs[i].Weather = svcFireWeatherToFirepbWeather(val.Weather)
			}
		}
	}
	if result.Pagination != nil {
		message.Pagination = svcFirePaginationToFirepbPagination(result.Pagination)
	}
	return message
}

// ValidateCreateRequest runs the validations defined on CreateRequest.
func ValidateCreateRequest(message *firepb.CreateRequest) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.DeletedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.deletedAt", message.DeletedAt, goa.FormatDateTime))
	}
	if message.Start != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.start", message.Start, goa.FormatDateTime))
	}
	if message.End != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.end", message.End, goa.FormatDateTime))
	}
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *firepb.UpdateRequest) (err error) {
	if message.CreatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))
	}
	if message.UpdatedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))
	}
	if message.DeletedAt != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.deletedAt", message.DeletedAt, goa.FormatDateTime))
	}
	if message.Start != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.start", message.Start, goa.FormatDateTime))
	}
	if message.End != "" {
		err = goa.MergeErrors(err, goa.ValidateFormat("message.end", message.End, goa.FormatDateTime))
	}
	return
}

// ValidateListRequest runs the validations defined on ListRequest.
func ValidateListRequest(message *firepb.ListRequest) (err error) {
	if message.Filters == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("filters", "message"))
	}
	if message.Search == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("search", "message"))
	}
	if message.Sort == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sort", "message"))
	}
	if message.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pagination", "message"))
	}
	if message.Filters != nil {
		if err2 := ValidateFireFilters(message.Filters); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if message.Sort != nil {
		if err2 := ValidateFireSorts(message.Sort); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFireFilters runs the validations defined on FireFilters.
func ValidateFireFilters(message *firepb.FireFilters) (err error) {
	for _, e := range message.Name {
		if e != nil {
			if err2 := ValidateStringFilter(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range message.Start {
		if e != nil {
			if err2 := ValidateTimeFilter(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range message.End {
		if e != nil {
			if err2 := ValidateTimeFilter(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStringFilter runs the validations defined on StringFilter.
func ValidateStringFilter(message *firepb.StringFilter) (err error) {
	if !(message.Operator == "=" || message.Operator == "!=") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.operator", message.Operator, []interface{}{"=", "!="}))
	}
	return
}

// ValidateTimeFilter runs the validations defined on TimeFilter.
func ValidateTimeFilter(message *firepb.TimeFilter) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.key", message.Key, goa.FormatDateTime))

	if !(message.Operator == "=" || message.Operator == ">" || message.Operator == ">=" || message.Operator == "<=" || message.Operator == "<") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.operator", message.Operator, []interface{}{"=", ">", ">=", "<=", "<"}))
	}
	return
}

// ValidateFireSearch runs the validations defined on FireSearch.
func ValidateFireSearch(message *firepb.FireSearch) (err error) {

	return
}

// ValidateFireSorts runs the validations defined on FireSorts.
func ValidateFireSorts(message *firepb.FireSorts) (err error) {
	if message.Id != "" {
		if !(message.Id == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.id", message.Id, []interface{}{"ASC, DESC"}))
		}
	}
	if message.Start != "" {
		if !(message.Start == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.start", message.Start, []interface{}{"ASC, DESC"}))
		}
	}
	if message.End != "" {
		if !(message.End == "ASC, DESC") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.end", message.End, []interface{}{"ASC, DESC"}))
		}
	}
	return
}

// ValidateFirePagination runs the validations defined on FirePagination.
func ValidateFirePagination(message *firepb.FirePagination) (err error) {

	return
}

// protobufFirepbFireFiltersToFireFireFilters builds a value of type
// *fire.FireFilters from a value of type *firepb.FireFilters.
func protobufFirepbFireFiltersToFireFireFilters(v *firepb.FireFilters) *fire.FireFilters {
	res := &fire.FireFilters{}
	if v.Name != nil {
		res.Name = make([]*fire.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = &fire.StringFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.Start != nil {
		res.Start = make([]*fire.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = &fire.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int(val.Value),
			}
		}
	}
	if v.End != nil {
		res.End = make([]*fire.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = &fire.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int(val.Value),
			}
		}
	}

	return res
}

// protobufFirepbFireSearchToFireFireSearch builds a value of type
// *fire.FireSearch from a value of type *firepb.FireSearch.
func protobufFirepbFireSearchToFireFireSearch(v *firepb.FireSearch) *fire.FireSearch {
	res := &fire.FireSearch{}
	if v.Name != "" {
		res.Name = &v.Name
	}
	if v.Description != "" {
		res.Description = &v.Description
	}

	return res
}

// protobufFirepbFireSortsToFireFireSorts builds a value of type
// *fire.FireSorts from a value of type *firepb.FireSorts.
func protobufFirepbFireSortsToFireFireSorts(v *firepb.FireSorts) *fire.FireSorts {
	res := &fire.FireSorts{}
	if v.Id != "" {
		res.ID = &v.Id
	}
	if v.Start != "" {
		res.Start = &v.Start
	}
	if v.End != "" {
		res.End = &v.End
	}

	return res
}

// protobufFirepbFirePaginationToFireFirePagination builds a value of type
// *fire.FirePagination from a value of type *firepb.FirePagination.
func protobufFirepbFirePaginationToFireFirePagination(v *firepb.FirePagination) *fire.FirePagination {
	res := &fire.FirePagination{
		Page:  int(v.Page),
		Limit: int(v.Limit),
	}

	return res
}

// svcFireFireFiltersToFirepbFireFilters builds a value of type
// *firepb.FireFilters from a value of type *fire.FireFilters.
func svcFireFireFiltersToFirepbFireFilters(v *fire.FireFilters) *firepb.FireFilters {
	res := &firepb.FireFilters{}
	if v.Name != nil {
		res.Name = make([]*firepb.StringFilter, len(v.Name))
		for i, val := range v.Name {
			res.Name[i] = &firepb.StringFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    val.Value,
			}
		}
	}
	if v.Start != nil {
		res.Start = make([]*firepb.TimeFilter, len(v.Start))
		for i, val := range v.Start {
			res.Start[i] = &firepb.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int32(val.Value),
			}
		}
	}
	if v.End != nil {
		res.End = make([]*firepb.TimeFilter, len(v.End))
		for i, val := range v.End {
			res.End[i] = &firepb.TimeFilter{
				Key:      val.Key,
				Operator: val.Operator,
				Value:    int32(val.Value),
			}
		}
	}

	return res
}

// svcFireFireSearchToFirepbFireSearch builds a value of type
// *firepb.FireSearch from a value of type *fire.FireSearch.
func svcFireFireSearchToFirepbFireSearch(v *fire.FireSearch) *firepb.FireSearch {
	res := &firepb.FireSearch{}
	if v.Name != nil {
		res.Name = *v.Name
	}
	if v.Description != nil {
		res.Description = *v.Description
	}

	return res
}

// svcFireFireSortsToFirepbFireSorts builds a value of type *firepb.FireSorts
// from a value of type *fire.FireSorts.
func svcFireFireSortsToFirepbFireSorts(v *fire.FireSorts) *firepb.FireSorts {
	res := &firepb.FireSorts{}
	if v.ID != nil {
		res.Id = *v.ID
	}
	if v.Start != nil {
		res.Start = *v.Start
	}
	if v.End != nil {
		res.End = *v.End
	}

	return res
}

// svcFireFirePaginationToFirepbFirePagination builds a value of type
// *firepb.FirePagination from a value of type *fire.FirePagination.
func svcFireFirePaginationToFirepbFirePagination(v *fire.FirePagination) *firepb.FirePagination {
	res := &firepb.FirePagination{
		Page:  int32(v.Page),
		Limit: int32(v.Limit),
	}

	return res
}

// svcFirePaginationToFirepbPagination builds a value of type
// *firepb.Pagination from a value of type *fire.Pagination.
func svcFirePaginationToFirepbPagination(v *fire.Pagination) *firepb.Pagination {
	if v == nil {
		return nil
	}
	res := &firepb.Pagination{}
	if v.Total != nil {
		res.Total = int32(*v.Total)
	}
	if v.Page != nil {
		res.Page = int32(*v.Page)
	}
	if v.Limit != nil {
		res.Limit = int32(*v.Limit)
	}

	return res
}

// protobufFirepbPaginationToFirePagination builds a value of type
// *fire.Pagination from a value of type *firepb.Pagination.
func protobufFirepbPaginationToFirePagination(v *firepb.Pagination) *fire.Pagination {
	if v == nil {
		return nil
	}
	res := &fire.Pagination{}
	if v.Total != 0 {
		totalptr := int(v.Total)
		res.Total = &totalptr
	}
	if v.Page != 0 {
		pageptr := int(v.Page)
		res.Page = &pageptr
	}
	if v.Limit != 0 {
		limitptr := int(v.Limit)
		res.Limit = &limitptr
	}

	return res
}

// svcFireTemperatureToFirepbTemperature builds a value of type
// *firepb.Temperature from a value of type *fire.Temperature.
func svcFireTemperatureToFirepbTemperature(v *fire.Temperature) *firepb.Temperature {
	if v == nil {
		return nil
	}
	res := &firepb.Temperature{}
	if v.Unit != nil {
		res.Unit = *v.Unit
	}
	if v.Value != nil {
		res.Value = *v.Value
	}

	return res
}

// svcFireWindToFirepbWind builds a value of type *firepb.Wind from a value of
// type *fire.Wind.
func svcFireWindToFirepbWind(v *fire.Wind) *firepb.Wind {
	if v == nil {
		return nil
	}
	res := &firepb.Wind{}
	if v.Speed != nil {
		res.Speed = *v.Speed
	}
	if v.Direction != nil {
		res.Direction = *v.Direction
	}
	if v.Unit != nil {
		res.Unit = *v.Unit
	}

	return res
}

// protobufFirepbTemperatureToFireTemperature builds a value of type
// *fire.Temperature from a value of type *firepb.Temperature.
func protobufFirepbTemperatureToFireTemperature(v *firepb.Temperature) *fire.Temperature {
	if v == nil {
		return nil
	}
	res := &fire.Temperature{}
	if v.Unit != "" {
		res.Unit = &v.Unit
	}
	if v.Value != 0 {
		res.Value = &v.Value
	}

	return res
}

// protobufFirepbWindToFireWind builds a value of type *fire.Wind from a value
// of type *firepb.Wind.
func protobufFirepbWindToFireWind(v *firepb.Wind) *fire.Wind {
	if v == nil {
		return nil
	}
	res := &fire.Wind{}
	if v.Speed != 0 {
		res.Speed = &v.Speed
	}
	if v.Direction != "" {
		res.Direction = &v.Direction
	}
	if v.Unit != "" {
		res.Unit = &v.Unit
	}

	return res
}

// svcFireWeatherToFirepbWeather builds a value of type *firepb.Weather from a
// value of type *fire.Weather.
func svcFireWeatherToFirepbWeather(v *fire.Weather) *firepb.Weather {
	if v == nil {
		return nil
	}
	res := &firepb.Weather{}
	if v.ID != nil {
		res.Id = int32(*v.ID)
	}
	if v.CreatedAt != nil {
		res.CreatedAt = *v.CreatedAt
	}
	if v.FireID != nil {
		res.FireId = int32(*v.FireID)
	}
	if v.LogID != nil {
		res.LogId = int32(*v.LogID)
	}
	if v.Humidity != nil {
		res.Humidity = *v.Humidity
	}
	if v.WeatherType != nil {
		res.WeatherType = *v.WeatherType
	}
	if v.WeatherTime != nil {
		res.WeatherTime = *v.WeatherTime
	}
	if v.Temperature != nil {
		res.Temperature = svcFireTemperatureToFirepbTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = svcFireTemperatureToFirepbTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = svcFireWindToFirepbWind(v.Wind)
	}

	return res
}

// protobufFirepbWeatherToFireWeather builds a value of type *fire.Weather from
// a value of type *firepb.Weather.
func protobufFirepbWeatherToFireWeather(v *firepb.Weather) *fire.Weather {
	if v == nil {
		return nil
	}
	res := &fire.Weather{}
	if v.Id != 0 {
		idptr := int(v.Id)
		res.ID = &idptr
	}
	if v.CreatedAt != "" {
		res.CreatedAt = &v.CreatedAt
	}
	if v.FireId != 0 {
		fireIDptr := int(v.FireId)
		res.FireID = &fireIDptr
	}
	if v.LogId != 0 {
		logIDptr := int(v.LogId)
		res.LogID = &logIDptr
	}
	if v.Humidity != 0 {
		res.Humidity = &v.Humidity
	}
	if v.WeatherType != "" {
		res.WeatherType = &v.WeatherType
	}
	if v.WeatherTime != "" {
		res.WeatherTime = &v.WeatherTime
	}
	if v.Temperature != nil {
		res.Temperature = protobufFirepbTemperatureToFireTemperature(v.Temperature)
	}
	if v.DewPoint != nil {
		res.DewPoint = protobufFirepbTemperatureToFireTemperature(v.DewPoint)
	}
	if v.Wind != nil {
		res.Wind = protobufFirepbWindToFireWind(v.Wind)
	}

	return res
}
