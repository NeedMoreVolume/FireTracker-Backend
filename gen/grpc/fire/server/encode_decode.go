// Code generated by goa v3.3.1, DO NOT EDIT.
//
// fire gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/NeedMoreVolume/FireTracker/design

package server

import (
	"context"

	fire "github.com/NeedMoreVolume/FireTracker/gen/fire"
	firepb "github.com/NeedMoreVolume/FireTracker/gen/grpc/fire/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateResponse encodes responses from the "fire" service "create"
// endpoint.
func EncodeCreateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*fire.Fire)
	if !ok {
		return nil, goagrpc.ErrInvalidType("fire", "create", "*fire.Fire", v)
	}
	resp := NewCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "fire" service "create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *firepb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*firepb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("fire", "create", "*firepb.CreateRequest", v)
		}
		if err := ValidateCreateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *fire.Fire
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeGetResponse encodes responses from the "fire" service "get" endpoint.
func EncodeGetResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*fire.Fire)
	if !ok {
		return nil, goagrpc.ErrInvalidType("fire", "get", "*fire.Fire", v)
	}
	resp := NewGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "fire" service "get" endpoint.
func DecodeGetRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *firepb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*firepb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("fire", "get", "*firepb.GetRequest", v)
		}
	}
	var payload *fire.GetPayload
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "fire" service "update"
// endpoint.
func EncodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*fire.Fire)
	if !ok {
		return nil, goagrpc.ErrInvalidType("fire", "update", "*fire.Fire", v)
	}
	resp := NewUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "fire" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *firepb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*firepb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("fire", "update", "*firepb.UpdateRequest", v)
		}
		if err := ValidateUpdateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *fire.Fire
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "fire" service "delete"
// endpoint.
func EncodeDeleteResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	resp := NewDeleteResponse()
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "fire" service "delete"
// endpoint.
func DecodeDeleteRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *firepb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*firepb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("fire", "delete", "*firepb.DeleteRequest", v)
		}
	}
	var payload *fire.DeletePayload
	{
		payload = NewDeletePayload(message)
	}
	return payload, nil
}

// EncodeListResponse encodes responses from the "fire" service "list" endpoint.
func EncodeListResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*fire.FireList)
	if !ok {
		return nil, goagrpc.ErrInvalidType("fire", "list", "*fire.FireList", v)
	}
	resp := NewListResponse(result)
	return resp, nil
}

// DecodeListRequest decodes requests sent to "fire" service "list" endpoint.
func DecodeListRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *firepb.ListRequest
		ok      bool
	)
	{
		if message, ok = v.(*firepb.ListRequest); !ok {
			return nil, goagrpc.ErrInvalidType("fire", "list", "*firepb.ListRequest", v)
		}
		if err := ValidateListRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *fire.FireListPayload
	{
		payload = NewListPayload(message)
	}
	return payload, nil
}

// EncodeGetWeatherForFireResponse encodes responses from the "fire" service
// "getWeatherForFire" endpoint.
func EncodeGetWeatherForFireResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*fire.WeatherList)
	if !ok {
		return nil, goagrpc.ErrInvalidType("fire", "getWeatherForFire", "*fire.WeatherList", v)
	}
	resp := NewGetWeatherForFireResponse(result)
	return resp, nil
}

// DecodeGetWeatherForFireRequest decodes requests sent to "fire" service
// "getWeatherForFire" endpoint.
func DecodeGetWeatherForFireRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *firepb.GetWeatherForFireRequest
		ok      bool
	)
	{
		if message, ok = v.(*firepb.GetWeatherForFireRequest); !ok {
			return nil, goagrpc.ErrInvalidType("fire", "getWeatherForFire", "*firepb.GetWeatherForFireRequest", v)
		}
	}
	var payload *fire.GetWeatherForFirePayload
	{
		payload = NewGetWeatherForFirePayload(message)
	}
	return payload, nil
}

// EncodeGetLogsForFireResponse encodes responses from the "fire" service
// "getLogsForFire" endpoint.
func EncodeGetLogsForFireResponse(ctx context.Context, v interface{}, hdr, trlr *metadata.MD) (interface{}, error) {
	result, ok := v.(*fire.LogList)
	if !ok {
		return nil, goagrpc.ErrInvalidType("fire", "getLogsForFire", "*fire.LogList", v)
	}
	resp := NewGetLogsForFireResponse(result)
	return resp, nil
}

// DecodeGetLogsForFireRequest decodes requests sent to "fire" service
// "getLogsForFire" endpoint.
func DecodeGetLogsForFireRequest(ctx context.Context, v interface{}, md metadata.MD) (interface{}, error) {
	var (
		message *firepb.GetLogsForFireRequest
		ok      bool
	)
	{
		if message, ok = v.(*firepb.GetLogsForFireRequest); !ok {
			return nil, goagrpc.ErrInvalidType("fire", "getLogsForFire", "*firepb.GetLogsForFireRequest", v)
		}
	}
	var payload *fire.GetLogsForFirePayload
	{
		payload = NewGetLogsForFirePayload(message)
	}
	return payload, nil
}
